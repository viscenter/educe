/////////////////////////////////////////////////////////////////////////////
// Name:        itkthresholdsegmentationlevelsetfilter.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     14/08/2007 13:09:41
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 14/08/2007 13:09:41

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"
#include <StandAlone/Apps/Seg3D/Painter.h>
#include <StandAlone/Apps/Seg3D/Seg3DFrame.h>

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "itkthresholdsegmentationlevelsetfilter.h"
#include "seg3devents.h"

////@begin XPM images
////@end XPM images


/*!
 * ITKThresholdSegmentationLevelSetFilter type definition
 */

IMPLEMENT_DYNAMIC_CLASS( ITKThresholdSegmentationLevelSetFilter, wxPanel )


/*!
 * ITKThresholdSegmentationLevelSetFilter event table definition
 */

BEGIN_EVENT_TABLE( ITKThresholdSegmentationLevelSetFilter, wxPanel )

////@begin ITKThresholdSegmentationLevelSetFilter event table entries
////@end ITKThresholdSegmentationLevelSetFilter event table entries
  EVT_BUTTON( XRCID("SET_SEEDLAYER_BUTTON"), ITKThresholdSegmentationLevelSetFilter::OnSetSeedLayerButtonClick )
  EVT_BUTTON( XRCID("START_BUTTON"), ITKThresholdSegmentationLevelSetFilter::OnStartButtonClick )
  EVT_BUTTON( XRCID("STOP_BUTTON"), ITKThresholdSegmentationLevelSetFilter::OnStopButtonClick )
  EVT_BUTTON( XRCID("CLOSE_BUTTON"), ITKThresholdSegmentationLevelSetFilter::OnCloseButtonClick )

  // Custom entries
  EVT_SPINCTRL( XRCID("SPIN_BRUSH_RADIUS"), ITKThresholdSegmentationLevelSetFilter::SpinRadius)
  EVT_COMMAND( wxID_ANY, wxEVT_BRUSH_RADIUS_CHANGE, ITKThresholdSegmentationLevelSetFilter::UpdateRadius)

  EVT_COMMAND( wxID_ANY, wxEVT_SET_PROGRESS, ITKThresholdSegmentationLevelSetFilter::OnSetProgress)

END_EVENT_TABLE()


/*!
 * ITKThresholdSegmentationLevelSetFilter constructors
 */

ITKThresholdSegmentationLevelSetFilter::ITKThresholdSegmentationLevelSetFilter()
{
    Init();
}

ITKThresholdSegmentationLevelSetFilter::ITKThresholdSegmentationLevelSetFilter( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * ITKThresholdSegmentationLevelSetFilter creator
 */

bool ITKThresholdSegmentationLevelSetFilter::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin ITKThresholdSegmentationLevelSetFilter creation
    SetParent(parent);
    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
////@end ITKThresholdSegmentationLevelSetFilter creation
    return true;
}


/*!
 * ITKThresholdSegmentationLevelSetFilter destructor
 */

ITKThresholdSegmentationLevelSetFilter::~ITKThresholdSegmentationLevelSetFilter()
{
////@begin ITKThresholdSegmentationLevelSetFilter destruction
////@end ITKThresholdSegmentationLevelSetFilter destruction
}


/*!
 * Member initialisation
 */

void ITKThresholdSegmentationLevelSetFilter::Init()
{
////@begin ITKThresholdSegmentationLevelSetFilter member initialisation
    mRadius = NULL;
    mThresholdMin = NULL;
    mThresholdMax = NULL;
    mCurvatureScale = NULL;
    mPropagationScale = NULL;
    mEdgeWeight = NULL;
    mPercentage = NULL;
////@end ITKThresholdSegmentationLevelSetFilter member initialisation

    disabler_ = NULL;
}


/*!
 * Control creation for ITKThresholdSegmentationLevelSetFilter
 */

void ITKThresholdSegmentationLevelSetFilter::CreateControls()
{    
////@begin ITKThresholdSegmentationLevelSetFilter content construction
    if (!wxXmlResource::Get()->LoadPanel(this, GetParent(), _T("ID_ITKTHRESHOLDSEGMENTATIONLEVELSETFILTER")))
        wxLogError(wxT("Missing wxXmlResource::Get()->Load() in OnInit()?"));
    mRadius = XRCCTRL(*this, "SPIN_BRUSH_RADIUS", wxSpinCtrl);
    mThresholdMin = XRCCTRL(*this, "SPIN_THRESHOLD_MIN", wxSpinCtrl);
    mThresholdMax = XRCCTRL(*this, "SPIN_THRESHOLD_MAX", wxSpinCtrl);
    mCurvatureScale = XRCCTRL(*this, "SPIN_CURVATURE_SCALING", wxSpinCtrl);
    mPropagationScale = XRCCTRL(*this, "SPIN_PROPAGATION_SCALING", wxSpinCtrl);
    mEdgeWeight = XRCCTRL(*this, "SPIN_EDGE_WEIGHT", wxSpinCtrl);
    mPercentage = XRCCTRL(*this, "ID_GAUGE", wxGauge);
////@end ITKThresholdSegmentationLevelSetFilter content construction

    // Create custom windows not generated automatically here.
////@begin ITKThresholdSegmentationLevelSetFilter content initialisation
////@end ITKThresholdSegmentationLevelSetFilter content initialisation
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for SET_SEEDLAYER_BUTTON
 */
void ITKThresholdSegmentationLevelSetFilter::OnSetSeedLayerButtonClick( wxCommandEvent& event )
{
  SCIRun::Painter::ThrowSkinnerSignal("Painter::SetLayer");
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for SET_DATALAYER_BUTTON
 */
void ITKThresholdSegmentationLevelSetFilter::OnSetDataLayerButtonClick( wxCommandEvent& event )
{
  SCIRun::Painter::ThrowSkinnerSignal("Painter::SetDataLayer");
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for CLOSE_BUTTON
 */
void ITKThresholdSegmentationLevelSetFilter::OnCloseButtonClick( wxCommandEvent& event )
{
  SCIRun::Painter::global_seg3dframe_pointer_->HideTool();
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for START_BUTTON
 */
void ITKThresholdSegmentationLevelSetFilter::OnStartButtonClick( wxCommandEvent& event )
{
  SCIRun::Painter::ThrowSkinnerSignal("Painter::FinishTool", false);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for STOP_BUTTON
 */
void ITKThresholdSegmentationLevelSetFilter::OnStopButtonClick( wxCommandEvent& event )
{
  SCIRun::Painter::ThrowSkinnerSignal("Painter::AbortFilterOn");
}


void
ITKThresholdSegmentationLevelSetFilter::SpinRadius( wxSpinEvent &event)
{
  SCIRun::ThrowSkinnerSignalEvent *tsse =
    new SCIRun::ThrowSkinnerSignalEvent("Painter::UpdateBrushRadius");
  tsse->add_var("Painter::brush_radius",
                SCIRun::to_string(event.GetPosition()));
  SCIRun::Painter::ThrowSkinnerSignal(tsse);
}


void
ITKThresholdSegmentationLevelSetFilter::UpdateRadius( wxCommandEvent &event)
{
  mRadius->SetValue(event.GetInt());
}


void ITKThresholdSegmentationLevelSetFilter::OnSetProgress( wxCommandEvent &event)
{	
  int progress = event.GetInt();
  
  // start_progress() sends -1
  if (progress < 0)
  {
    wxBeginBusyCursor();
    disabler_ = new wxWindowDisabler();
    progress = 0;
  }
  // finish_progress() sends 101
  if (progress > 100)
  {
    if (disabler_) { delete disabler_; disabler_ = 0; }
    wxEndBusyCursor();
    progress = 100;
  }
  if (progress == 0 || progress > mPercentage->GetValue())
  {
    mPercentage->SetValue(progress);
  }
}

/*!
 * Should we show tooltips?
 */

bool ITKThresholdSegmentationLevelSetFilter::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap ITKThresholdSegmentationLevelSetFilter::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin ITKThresholdSegmentationLevelSetFilter bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end ITKThresholdSegmentationLevelSetFilter bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon ITKThresholdSegmentationLevelSetFilter::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin ITKThresholdSegmentationLevelSetFilter icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end ITKThresholdSegmentationLevelSetFilter icon retrieval
}
