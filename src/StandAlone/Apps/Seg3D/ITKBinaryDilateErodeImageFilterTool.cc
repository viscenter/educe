

#include <StandAlone/Apps/Seg3D/ITKBinaryDilateErodeImageFilterTool.h>
#include <itkBinaryBallStructuringElement.h>
#include <itkBinaryDilateImageFilter.h>
#include <itkBinaryErodeImageFilter.h>
#include <itkImportImageFilter.h>
#include <StandAlone/Apps/Seg3D/Seg3DFrame.h>
#include <StandAlone/Apps/Seg3D/BrushTool.h>
#include <StandAlone/Apps/Seg3D/Painter.h>
#include <StandAlone/Apps/Seg3D/VolumeOps.h>
#include <Core/Util/Assert.h>

namespace SCIRun {


ITKBinaryDilateErodeImageFilterTool::ITKBinaryDilateErodeImageFilterTool(Painter *painter)
  : BaseTool("ITKBinaryDilateErodeImageFilterTool::"),
    PointerTool("ITKBinaryDilateErodeImageFilterTool::"),
    painter_(painter)
{
}


BaseTool::propagation_state_e 
ITKBinaryDilateErodeImageFilterTool::process_event(event_handle_t event)
{
  // Check for the FinishEvent signal generated by the start button
  if (dynamic_cast<DilateEvent *>(event.get_rep())) {
    if (!painter_->check_for_active_label_volume("Binary dilate"))
    {
      return STOP_E;
    }
    painter_->set_status("Dilating " + painter_->current_volume_->name_ + ".");
    painter_->start_progress();
    run_dilate_filter();
    painter_->finish_progress();
    painter_->extract_all_window_slices();
    painter_->redraw_all();
  }
  if (dynamic_cast<ErodeEvent *>(event.get_rep())) {
    if (!painter_->check_for_active_label_volume("Binary erode"))
    {
      return STOP_E;
    }
    painter_->set_status("Eroding " + painter_->current_volume_->name_ + ".");
    painter_->start_progress();
    run_erode_filter();
    painter_->finish_progress();
    painter_->extract_all_window_slices();
    painter_->redraw_all();
  }
  if (dynamic_cast<DilateErodeEvent *>(event.get_rep())) {
    if (!painter_->check_for_active_label_volume("Binary dilate/erode"))
    {
      return STOP_E;
    }
    painter_->set_status("Dilating and then eroding " + painter_->current_volume_->name_ + ".");
    painter_->start_progress();
    run_dilate_erode_filter();
    painter_->finish_progress();
    painter_->extract_all_window_slices();
    painter_->redraw_all();
  }
 
  return CONTINUE_E;
}

void ITKBinaryDilateErodeImageFilterTool::run_dilate_filter()
{

  const string name = "ITKBinaryDilateErodeImageFilterTool::";

  dilate_filter.set_volume(painter_->current_volume_);
  
  structuringElement.SetRadius(painter_->get_vars()->get_int(name+"DilateRadius"));
  structuringElement.CreateStructuringElement();
  
  dilate_filter->SetKernel(structuringElement);
  dilate_filter->SetDilateValue(painter_->current_volume_->label_);

  dilate_filter();
}

void ITKBinaryDilateErodeImageFilterTool::run_erode_filter()
{

  const string name = "ITKBinaryDilateErodeImageFilterTool::";

  erode_filter.set_volume(painter_->current_volume_);

  structuringElement.SetRadius(painter_->get_vars()->get_int(name+"ErodeRadius"));
  structuringElement.CreateStructuringElement();
  
  erode_filter->SetKernel(structuringElement);
  erode_filter->SetErodeValue(painter_->current_volume_->label_);

  erode_filter();
}

void ITKBinaryDilateErodeImageFilterTool::run_dilate_erode_filter()
{
  run_dilate_filter();
  run_erode_filter();
}

}
