
#include <StandAlone/Apps/Seg3D/ITKDiscreteGaussianImageFilterTool.h>

#include <StandAlone/Apps/Seg3D/Seg3DFrame.h>
#include <StandAlone/Apps/Seg3D/BrushTool.h>
#include <StandAlone/Apps/Seg3D/Painter.h>
#include <StandAlone/Apps/Seg3D/VolumeOps.h>
#include <Core/Util/Assert.h>

#include <StandAlone/Apps/Seg3D/GuiCode/itkDiscreteGaussianImageFilter.h>
#include <StandAlone/Apps/Seg3D/Seg3DwxGuiUtils.h>
#include <wx/string.h>
#include <wx/variant.h>

namespace SCIRun {

ITKDiscreteGaussianImageFilterTool::
ITKDiscreteGaussianImageFilterTool(Painter *painter) :
  BaseTool("ITK Discrete Gaussian ImageFilter Tool"),
  painter_(painter),
  Variance_(painter->get_vars(), "itkDiscreteGaussianImageFilter::mVariance"),
  Max_Error_(painter->get_vars(), "itkDiscreteGaussianImageFilter::mMaxError"),
  filter_()
{
  Skinner::Var<bool> ready(painter_->get_vars(), "Filter::ready", 0);
  ready = 0;
}


BaseTool::propagation_state_e 
ITKDiscreteGaussianImageFilterTool::process_event
(event_handle_t event)
{
  // check for the FinishEvent signal generated by the start button
  if (dynamic_cast<FinishEvent *>(event.get_rep())) {
    if (!painter_->check_for_active_data_volume("Discrete Gaussian filter"))
    {
      return STOP_E;
    }
    run_filter();
  }
 
  return CONTINUE_E;
}


void
ITKDiscreteGaussianImageFilterTool::run_filter()
{
  filter_.set_volume( painter_->copy_current_layer(" Discrete Gaussian") );

  // Set the filter parameters.
  const double variance = Variance_;
  const int max_kernel_width = Max_Error_;

  filter_->SetVariance(variance);
  if (max_kernel_width > 0)
  {
    filter_->SetMaximumKernelWidth(max_kernel_width);
  }

  painter_->set_status("Running discrete gaussian filter.");
  painter_->start_progress();
  filter_();
  painter_->finish_progress();

  painter_->current_volume_->reset_data_range();

  // Redraw everything after completion.
  painter_->extract_all_window_slices();
  painter_->redraw_all();

  painter_->hide_tool_panel();
}


}
