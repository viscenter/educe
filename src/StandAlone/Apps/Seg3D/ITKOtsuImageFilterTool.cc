#include <StandAlone/Apps/Seg3D/ITKOtsuImageFilterTool.h>
#include <StandAlone/Apps/Seg3D/Seg3DFrame.h>
#include <StandAlone/Apps/Seg3D/BrushTool.h>
#include <StandAlone/Apps/Seg3D/Painter.h>
#include <StandAlone/Apps/Seg3D/VolumeOps.h>
#include <Core/Util/Assert.h>

namespace SCIRun {


ITKOtsuImageFilterTool::ITKOtsuImageFilterTool(Painter *painter)
  : BaseTool("ITK Otsu Image Filter Tool"),
    painter_(painter),
    prefix_("ITKOtsuImageFilterTool::"),
    filter_()
{
}


BaseTool::propagation_state_e 
ITKOtsuImageFilterTool::process_event(event_handle_t event)
{
  // check for the FinishEvent signal generated by the start button
  if (dynamic_cast<FinishEvent *>(event.get_rep())) {
    if (!painter_->check_for_active_data_volume("Otsu threshold filter"))
    {
      return STOP_E;
    }
  
    run_filter();
  }

  return CONTINUE_E;
}


void
ITKOtsuImageFilterTool::run_filter()
{
  painter_->volume_lock_.lock();

  // Save the source.
  source_volume_ = painter_->current_volume_;

  // Make a new label volume.
  NrrdDataHandle nrrdh = VolumeOps::create_clear_nrrd(painter_->current_volume_->nrrd_handle_, LabelNrrdType);
  const string name = painter_->unique_layer_name(painter_->current_volume_->name_ + " Otsu Label");
  painter_->volumes_.push_back(new NrrdVolume(painter_, name, nrrdh, 1));
  painter_->current_volume_ = painter_->volumes_.back();
  painter_->rebuild_layer_buttons();
  painter_->volume_lock_.unlock();

  filter_.set_volume(painter_->current_volume_); 
  filter_->SetOutsideValue(1);
  filter_->SetInsideValue(0);

  filter_.progress_offset_ = 50.0;
  painter_->set_status("Running otsu threshold filter.");
  painter_->start_progress();
  filter_(source_volume_->nrrd_handle_); // Source is original current_volume_.
  painter_->finish_progress();

  const double tval = filter_->GetThreshold();
  painter_->set_status("Otsu threshold filter completed with a value of " + to_string(tval) + ".");
  painter_->extract_all_window_slices();
  painter_->redraw_all();

  painter_->hide_tool_panel();
}


}
