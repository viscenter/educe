# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _sr_py
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _sr_py.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _sr_py.PySwigIterator_value(*args)
    def incr(*args): return _sr_py.PySwigIterator_incr(*args)
    def decr(*args): return _sr_py.PySwigIterator_decr(*args)
    def distance(*args): return _sr_py.PySwigIterator_distance(*args)
    def equal(*args): return _sr_py.PySwigIterator_equal(*args)
    def copy(*args): return _sr_py.PySwigIterator_copy(*args)
    def next(*args): return _sr_py.PySwigIterator_next(*args)
    def previous(*args): return _sr_py.PySwigIterator_previous(*args)
    def advance(*args): return _sr_py.PySwigIterator_advance(*args)
    def __eq__(*args): return _sr_py.PySwigIterator___eq__(*args)
    def __ne__(*args): return _sr_py.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _sr_py.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _sr_py.PySwigIterator___isub__(*args)
    def __add__(*args): return _sr_py.PySwigIterator___add__(*args)
    def __sub__(*args): return _sr_py.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _sr_py.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class OpenGLContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenGLContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenGLContext, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _sr_py.delete_OpenGLContext
    __del__ = lambda self : None;
    def make_current(*args): return _sr_py.OpenGLContext_make_current(*args)
    def release(*args): return _sr_py.OpenGLContext_release(*args)
    def width(*args): return _sr_py.OpenGLContext_width(*args)
    def height(*args): return _sr_py.OpenGLContext_height(*args)
    def swap(*args): return _sr_py.OpenGLContext_swap(*args)
    def lock(*args): return _sr_py.OpenGLContext_lock(*args)
    def unlock(*args): return _sr_py.OpenGLContext_unlock(*args)
OpenGLContext_swigregister = _sr_py.OpenGLContext_swigregister
OpenGLContext_swigregister(OpenGLContext)

class CallbackOpenGLContext(OpenGLContext):
    __swig_setmethods__ = {}
    for _s in [OpenGLContext]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackOpenGLContext, name, value)
    __swig_getmethods__ = {}
    for _s in [OpenGLContext]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackOpenGLContext, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CallbackOpenGLContext(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CallbackOpenGLContext
    __del__ = lambda self : None;
    def make_current(*args): return _sr_py.CallbackOpenGLContext_make_current(*args)
    def release(*args): return _sr_py.CallbackOpenGLContext_release(*args)
    def width(*args): return _sr_py.CallbackOpenGLContext_width(*args)
    def height(*args): return _sr_py.CallbackOpenGLContext_height(*args)
    def swap(*args): return _sr_py.CallbackOpenGLContext_swap(*args)
    def set_make_current_func(*args): return _sr_py.CallbackOpenGLContext_set_make_current_func(*args)
    def set_release_func(*args): return _sr_py.CallbackOpenGLContext_set_release_func(*args)
    def set_width_func(*args): return _sr_py.CallbackOpenGLContext_set_width_func(*args)
    def set_height_func(*args): return _sr_py.CallbackOpenGLContext_set_height_func(*args)
    def set_swap_func(*args): return _sr_py.CallbackOpenGLContext_set_swap_func(*args)
    def set_pymake_current_func(*args): return _sr_py.CallbackOpenGLContext_set_pymake_current_func(*args)
    def set_pyrelease_func(*args): return _sr_py.CallbackOpenGLContext_set_pyrelease_func(*args)
    def set_pyswap_func(*args): return _sr_py.CallbackOpenGLContext_set_pyswap_func(*args)
    def set_pywidth_func(*args): return _sr_py.CallbackOpenGLContext_set_pywidth_func(*args)
    def set_pyheight_func(*args): return _sr_py.CallbackOpenGLContext_set_pyheight_func(*args)
CallbackOpenGLContext_swigregister = _sr_py.CallbackOpenGLContext_swigregister
CallbackOpenGLContext_swigregister(CallbackOpenGLContext)

class Mutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mutex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_Mutex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_Mutex
    __del__ = lambda self : None;
    def lock(*args): return _sr_py.Mutex_lock(*args)
    def tryLock(*args): return _sr_py.Mutex_tryLock(*args)
    def unlock(*args): return _sr_py.Mutex_unlock(*args)
Mutex_swigregister = _sr_py.Mutex_swigregister
Mutex_swigregister(Mutex)

class ProgressReporter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressReporter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressReporter, name)
    __repr__ = _swig_repr
    Starting = _sr_py.ProgressReporter_Starting
    Compiling = _sr_py.ProgressReporter_Compiling
    CompilationDone = _sr_py.ProgressReporter_CompilationDone
    Done = _sr_py.ProgressReporter_Done
    def __init__(self, *args): 
        this = _sr_py.new_ProgressReporter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ProgressReporter
    __del__ = lambda self : None;
    def error(*args): return _sr_py.ProgressReporter_error(*args)
    def warning(*args): return _sr_py.ProgressReporter_warning(*args)
    def remark(*args): return _sr_py.ProgressReporter_remark(*args)
    def compile_error(*args): return _sr_py.ProgressReporter_compile_error(*args)
    def add_raw_message(*args): return _sr_py.ProgressReporter_add_raw_message(*args)
    def msg_stream(*args): return _sr_py.ProgressReporter_msg_stream(*args)
    def msg_stream_flush(*args): return _sr_py.ProgressReporter_msg_stream_flush(*args)
    def report_progress(*args): return _sr_py.ProgressReporter_report_progress(*args)
    def update_progress(*args): return _sr_py.ProgressReporter_update_progress(*args)
    def increment_progress(*args): return _sr_py.ProgressReporter_increment_progress(*args)
ProgressReporter_swigregister = _sr_py.ProgressReporter_swigregister
ProgressReporter_swigregister(ProgressReporter)

CORE_PERSISTENT_H = _sr_py.CORE_PERSISTENT_H
class PersistentTypeID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PersistentTypeID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PersistentTypeID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sr_py.PersistentTypeID_type_set
    __swig_getmethods__["type"] = _sr_py.PersistentTypeID_type_get
    if _newclass:type = _swig_property(_sr_py.PersistentTypeID_type_get, _sr_py.PersistentTypeID_type_set)
    __swig_setmethods__["parent"] = _sr_py.PersistentTypeID_parent_set
    __swig_getmethods__["parent"] = _sr_py.PersistentTypeID_parent_get
    if _newclass:parent = _swig_property(_sr_py.PersistentTypeID_parent_get, _sr_py.PersistentTypeID_parent_set)
    __swig_setmethods__["maker"] = _sr_py.PersistentTypeID_maker_set
    __swig_getmethods__["maker"] = _sr_py.PersistentTypeID_maker_get
    if _newclass:maker = _swig_property(_sr_py.PersistentTypeID_maker_get, _sr_py.PersistentTypeID_maker_set)
    def __init__(self, *args): 
        this = _sr_py.new_PersistentTypeID(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_PersistentTypeID
    __del__ = lambda self : None;
    __swig_setmethods__["bc_maker1"] = _sr_py.PersistentTypeID_bc_maker1_set
    __swig_getmethods__["bc_maker1"] = _sr_py.PersistentTypeID_bc_maker1_get
    if _newclass:bc_maker1 = _swig_property(_sr_py.PersistentTypeID_bc_maker1_get, _sr_py.PersistentTypeID_bc_maker1_set)
    __swig_setmethods__["bc_maker2"] = _sr_py.PersistentTypeID_bc_maker2_set
    __swig_getmethods__["bc_maker2"] = _sr_py.PersistentTypeID_bc_maker2_get
    if _newclass:bc_maker2 = _swig_property(_sr_py.PersistentTypeID_bc_maker2_get, _sr_py.PersistentTypeID_bc_maker2_set)
    __swig_setmethods__["persistentTypeIDMutex"] = _sr_py.PersistentTypeID_persistentTypeIDMutex_set
    __swig_getmethods__["persistentTypeIDMutex"] = _sr_py.PersistentTypeID_persistentTypeIDMutex_get
    if _newclass:persistentTypeIDMutex = _swig_property(_sr_py.PersistentTypeID_persistentTypeIDMutex_get, _sr_py.PersistentTypeID_persistentTypeIDMutex_set)
PersistentTypeID_swigregister = _sr_py.PersistentTypeID_swigregister
PersistentTypeID_swigregister(PersistentTypeID)
cvar = _sr_py.cvar

class Piostream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Piostream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Piostream, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    Read = _sr_py.Piostream_Read
    Write = _sr_py.Piostream_Write
    Big = _sr_py.Piostream_Big
    Little = _sr_py.Piostream_Little
    def flag_error(*args): return _sr_py.Piostream_flag_error(*args)
    __swig_getmethods__["readHeader"] = lambda x: _sr_py.Piostream_readHeader
    if _newclass:readHeader = staticmethod(_sr_py.Piostream_readHeader)
    __swig_setmethods__["file_name"] = _sr_py.Piostream_file_name_set
    __swig_getmethods__["file_name"] = _sr_py.Piostream_file_name_get
    if _newclass:file_name = _swig_property(_sr_py.Piostream_file_name_get, _sr_py.Piostream_file_name_set)
    __swig_destroy__ = _sr_py.delete_Piostream
    __del__ = lambda self : None;
    def peek_class(*args): return _sr_py.Piostream_peek_class(*args)
    def begin_class(*args): return _sr_py.Piostream_begin_class(*args)
    def end_class(*args): return _sr_py.Piostream_end_class(*args)
    def begin_cheap_delim(*args): return _sr_py.Piostream_begin_cheap_delim(*args)
    def end_cheap_delim(*args): return _sr_py.Piostream_end_cheap_delim(*args)
    def eof(*args): return _sr_py.Piostream_eof(*args)
    def io(*args): return _sr_py.Piostream_io(*args)
    def reading(*args): return _sr_py.Piostream_reading(*args)
    def writing(*args): return _sr_py.Piostream_writing(*args)
    def error(*args): return _sr_py.Piostream_error(*args)
    def version(*args): return _sr_py.Piostream_version(*args)
    def backwards_compat_id(*args): return _sr_py.Piostream_backwards_compat_id(*args)
    def set_backwards_compat_id(*args): return _sr_py.Piostream_set_backwards_compat_id(*args)
    def supports_block_io(*args): return _sr_py.Piostream_supports_block_io(*args)
    def block_io(*args): return _sr_py.Piostream_block_io(*args)
    def disable_pointer_hashing(*args): return _sr_py.Piostream_disable_pointer_hashing(*args)
Piostream_swigregister = _sr_py.Piostream_swigregister
Piostream_swigregister(Piostream)
auto_istream = _sr_py.auto_istream
auto_ostream = _sr_py.auto_ostream
Piostream.PERSISTENT_VERSION = _sr_py.cvar.Piostream_PERSISTENT_VERSION
Piostream_readHeader = _sr_py.Piostream_readHeader

class Persistent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Persistent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Persistent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _sr_py.delete_Persistent
    __del__ = lambda self : None;
    def io(*args): return _sr_py.Persistent_io(*args)
    def __init__(self, *args): 
        this = _sr_py.new_Persistent(*args)
        try: self.this.append(this)
        except: self.this = this
Persistent_swigregister = _sr_py.Persistent_swigregister
Persistent_swigregister(Persistent)

Pio_size = _sr_py.Pio_size
SCI_project_Datatype_h = _sr_py.SCI_project_Datatype_h
class Datatype(Persistent):
    __swig_setmethods__ = {}
    for _s in [Persistent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datatype, name, value)
    __swig_getmethods__ = {}
    for _s in [Persistent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Datatype, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ref_cnt"] = _sr_py.Datatype_ref_cnt_set
    __swig_getmethods__["ref_cnt"] = _sr_py.Datatype_ref_cnt_get
    if _newclass:ref_cnt = _swig_property(_sr_py.Datatype_ref_cnt_get, _sr_py.Datatype_ref_cnt_set)
    __swig_getmethods__["lock"] = _sr_py.Datatype_lock_get
    if _newclass:lock = _swig_property(_sr_py.Datatype_lock_get)
    __swig_setmethods__["generation"] = _sr_py.Datatype_generation_set
    __swig_getmethods__["generation"] = _sr_py.Datatype_generation_get
    if _newclass:generation = _swig_property(_sr_py.Datatype_generation_get, _sr_py.Datatype_generation_set)
    def __init__(self, *args): 
        this = _sr_py.new_Datatype(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_Datatype
    __del__ = lambda self : None;
    __swig_getmethods__["compute_new_generation"] = lambda x: _sr_py.Datatype_compute_new_generation
    if _newclass:compute_new_generation = staticmethod(_sr_py.Datatype_compute_new_generation)
Datatype_swigregister = _sr_py.Datatype_swigregister
Datatype_swigregister(Datatype)
Pio = _sr_py.Pio
Pio_index = _sr_py.Pio_index
Datatype_compute_new_generation = _sr_py.Datatype_compute_new_generation

class BaseEvent(Datatype):
    __swig_setmethods__ = {}
    for _s in [Datatype]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Datatype]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseEvent, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _sr_py.delete_BaseEvent
    __del__ = lambda self : None;
    def clone(*args): return _sr_py.BaseEvent_clone(*args)
    def io(*args): return _sr_py.BaseEvent_io(*args)
    __swig_setmethods__["type_id"] = _sr_py.BaseEvent_type_id_set
    __swig_getmethods__["type_id"] = _sr_py.BaseEvent_type_id_get
    if _newclass:type_id = _swig_property(_sr_py.BaseEvent_type_id_get, _sr_py.BaseEvent_type_id_set)
    def get_time(*args): return _sr_py.BaseEvent_get_time(*args)
    def get_target(*args): return _sr_py.BaseEvent_get_target(*args)
    def set_time(*args): return _sr_py.BaseEvent_set_time(*args)
    def set_target(*args): return _sr_py.BaseEvent_set_target(*args)
    def is_pointer_event(*args): return _sr_py.BaseEvent_is_pointer_event(*args)
    def is_key_event(*args): return _sr_py.BaseEvent_is_key_event(*args)
    def is_window_event(*args): return _sr_py.BaseEvent_is_window_event(*args)
    def is_redraw_event(*args): return _sr_py.BaseEvent_is_redraw_event(*args)
    def is_quit_event(*args): return _sr_py.BaseEvent_is_quit_event(*args)
    def is_scene_graph_event(*args): return _sr_py.BaseEvent_is_scene_graph_event(*args)
    def is_tm_notify_event(*args): return _sr_py.BaseEvent_is_tm_notify_event(*args)
    def is_command_event(*args): return _sr_py.BaseEvent_is_command_event(*args)
    def is_trail_enabled(*args): return _sr_py.BaseEvent_is_trail_enabled(*args)
BaseEvent_swigregister = _sr_py.BaseEvent_swigregister
BaseEvent_swigregister(BaseEvent)

class EventModifiers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventModifiers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventModifiers, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_EventModifiers(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_EventModifiers
    __del__ = lambda self : None;
    def io(*args): return _sr_py.EventModifiers_io(*args)
    __swig_setmethods__["type_id"] = _sr_py.EventModifiers_type_id_set
    __swig_getmethods__["type_id"] = _sr_py.EventModifiers_type_id_get
    if _newclass:type_id = _swig_property(_sr_py.EventModifiers_type_id_get, _sr_py.EventModifiers_type_id_set)
    SHIFT_E = _sr_py.EventModifiers_SHIFT_E
    CAPS_LOCK_E = _sr_py.EventModifiers_CAPS_LOCK_E
    CONTROL_E = _sr_py.EventModifiers_CONTROL_E
    ALT_E = _sr_py.EventModifiers_ALT_E
    M1_E = _sr_py.EventModifiers_M1_E
    M2_E = _sr_py.EventModifiers_M2_E
    M3_E = _sr_py.EventModifiers_M3_E
    M4_E = _sr_py.EventModifiers_M4_E
    def get_modifiers(*args): return _sr_py.EventModifiers_get_modifiers(*args)
    def set_modifiers(*args): return _sr_py.EventModifiers_set_modifiers(*args)
    def is_trail_enabled(*args): return _sr_py.EventModifiers_is_trail_enabled(*args)
EventModifiers_swigregister = _sr_py.EventModifiers_swigregister
EventModifiers_swigregister(EventModifiers)

class PointerEvent(BaseEvent,EventModifiers):
    __swig_setmethods__ = {}
    for _s in [BaseEvent,EventModifiers]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointerEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEvent,EventModifiers]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointerEvent, name)
    __repr__ = _swig_repr
    MOTION_E = _sr_py.PointerEvent_MOTION_E
    BUTTON_PRESS_E = _sr_py.PointerEvent_BUTTON_PRESS_E
    BUTTON_RELEASE_E = _sr_py.PointerEvent_BUTTON_RELEASE_E
    BUTTON_1_E = _sr_py.PointerEvent_BUTTON_1_E
    BUTTON_2_E = _sr_py.PointerEvent_BUTTON_2_E
    BUTTON_3_E = _sr_py.PointerEvent_BUTTON_3_E
    BUTTON_4_E = _sr_py.PointerEvent_BUTTON_4_E
    BUTTON_5_E = _sr_py.PointerEvent_BUTTON_5_E
    def __init__(self, *args): 
        this = _sr_py.new_PointerEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_PointerEvent
    __del__ = lambda self : None;
    def io(*args): return _sr_py.PointerEvent_io(*args)
    def clone(*args): return _sr_py.PointerEvent_clone(*args)
    __swig_setmethods__["type_id"] = _sr_py.PointerEvent_type_id_set
    __swig_getmethods__["type_id"] = _sr_py.PointerEvent_type_id_get
    if _newclass:type_id = _swig_property(_sr_py.PointerEvent_type_id_get, _sr_py.PointerEvent_type_id_set)
    def is_pointer_event(*args): return _sr_py.PointerEvent_is_pointer_event(*args)
    def is_trail_enabled(*args): return _sr_py.PointerEvent_is_trail_enabled(*args)
    def get_pointer_state(*args): return _sr_py.PointerEvent_get_pointer_state(*args)
    def get_x(*args): return _sr_py.PointerEvent_get_x(*args)
    def get_y(*args): return _sr_py.PointerEvent_get_y(*args)
    def set_pointer_state(*args): return _sr_py.PointerEvent_set_pointer_state(*args)
    def set_x(*args): return _sr_py.PointerEvent_set_x(*args)
    def set_y(*args): return _sr_py.PointerEvent_set_y(*args)
PointerEvent_swigregister = _sr_py.PointerEvent_swigregister
PointerEvent_swigregister(PointerEvent)

class KeyEvent(BaseEvent,EventModifiers):
    __swig_setmethods__ = {}
    for _s in [BaseEvent,EventModifiers]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEvent,EventModifiers]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyEvent, name)
    __repr__ = _swig_repr
    KEY_PRESS_E = _sr_py.KeyEvent_KEY_PRESS_E
    KEY_RELEASE_E = _sr_py.KeyEvent_KEY_RELEASE_E
    def __init__(self, *args): 
        this = _sr_py.new_KeyEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_KeyEvent
    __del__ = lambda self : None;
    def clone(*args): return _sr_py.KeyEvent_clone(*args)
    def io(*args): return _sr_py.KeyEvent_io(*args)
    __swig_setmethods__["type_id"] = _sr_py.KeyEvent_type_id_set
    __swig_getmethods__["type_id"] = _sr_py.KeyEvent_type_id_get
    if _newclass:type_id = _swig_property(_sr_py.KeyEvent_type_id_get, _sr_py.KeyEvent_type_id_set)
    def is_key_event(*args): return _sr_py.KeyEvent_is_key_event(*args)
    def is_trail_enabled(*args): return _sr_py.KeyEvent_is_trail_enabled(*args)
    def get_key_state(*args): return _sr_py.KeyEvent_get_key_state(*args)
    def get_keyval(*args): return _sr_py.KeyEvent_get_keyval(*args)
    def get_key_string(*args): return _sr_py.KeyEvent_get_key_string(*args)
    def set_key_state(*args): return _sr_py.KeyEvent_set_key_state(*args)
    def set_keyval(*args): return _sr_py.KeyEvent_set_keyval(*args)
    def set_key_string(*args): return _sr_py.KeyEvent_set_key_string(*args)
KeyEvent_swigregister = _sr_py.KeyEvent_swigregister
KeyEvent_swigregister(KeyEvent)

class WindowEvent(BaseEvent):
    __swig_setmethods__ = {}
    for _s in [BaseEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WindowEvent, name)
    __repr__ = _swig_repr
    CREATE_E = _sr_py.WindowEvent_CREATE_E
    DESTROY_E = _sr_py.WindowEvent_DESTROY_E
    ENTER_E = _sr_py.WindowEvent_ENTER_E
    LEAVE_E = _sr_py.WindowEvent_LEAVE_E
    EXPOSE_E = _sr_py.WindowEvent_EXPOSE_E
    CONFIGURE_E = _sr_py.WindowEvent_CONFIGURE_E
    FOCUSIN_E = _sr_py.WindowEvent_FOCUSIN_E
    FOCUSOUT_E = _sr_py.WindowEvent_FOCUSOUT_E
    REDRAW_E = _sr_py.WindowEvent_REDRAW_E
    def __init__(self, *args): 
        this = _sr_py.new_WindowEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_WindowEvent
    __del__ = lambda self : None;
    def clone(*args): return _sr_py.WindowEvent_clone(*args)
    def io(*args): return _sr_py.WindowEvent_io(*args)
    __swig_setmethods__["type_id"] = _sr_py.WindowEvent_type_id_set
    __swig_getmethods__["type_id"] = _sr_py.WindowEvent_type_id_get
    if _newclass:type_id = _swig_property(_sr_py.WindowEvent_type_id_get, _sr_py.WindowEvent_type_id_set)
    def is_window_event(*args): return _sr_py.WindowEvent_is_window_event(*args)
    def is_redraw_event(*args): return _sr_py.WindowEvent_is_redraw_event(*args)
    def is_trail_enabled(*args): return _sr_py.WindowEvent_is_trail_enabled(*args)
    def get_window_state(*args): return _sr_py.WindowEvent_get_window_state(*args)
    def set_window_state(*args): return _sr_py.WindowEvent_set_window_state(*args)
WindowEvent_swigregister = _sr_py.WindowEvent_swigregister
WindowEvent_swigregister(WindowEvent)

class QuitEvent(BaseEvent):
    __swig_setmethods__ = {}
    for _s in [BaseEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuitEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuitEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_QuitEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_QuitEvent
    __del__ = lambda self : None;
    def io(*args): return _sr_py.QuitEvent_io(*args)
    __swig_setmethods__["type_id"] = _sr_py.QuitEvent_type_id_set
    __swig_getmethods__["type_id"] = _sr_py.QuitEvent_type_id_get
    if _newclass:type_id = _swig_property(_sr_py.QuitEvent_type_id_get, _sr_py.QuitEvent_type_id_set)
    def is_trail_enabled(*args): return _sr_py.QuitEvent_is_trail_enabled(*args)
    def is_quit_event(*args): return _sr_py.QuitEvent_is_quit_event(*args)
    def clone(*args): return _sr_py.QuitEvent_clone(*args)
QuitEvent_swigregister = _sr_py.QuitEvent_swigregister
QuitEvent_swigregister(QuitEvent)

class RedrawEvent(BaseEvent):
    __swig_setmethods__ = {}
    for _s in [BaseEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RedrawEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RedrawEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_RedrawEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_RedrawEvent
    __del__ = lambda self : None;
    def io(*args): return _sr_py.RedrawEvent_io(*args)
    def clone(*args): return _sr_py.RedrawEvent_clone(*args)
RedrawEvent_swigregister = _sr_py.RedrawEvent_swigregister
RedrawEvent_swigregister(RedrawEvent)

class AutoviewEvent(BaseEvent):
    __swig_setmethods__ = {}
    for _s in [BaseEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoviewEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoviewEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_AutoviewEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_AutoviewEvent
    __del__ = lambda self : None;
    def io(*args): return _sr_py.AutoviewEvent_io(*args)
    __swig_setmethods__["type_id"] = _sr_py.AutoviewEvent_type_id_set
    __swig_getmethods__["type_id"] = _sr_py.AutoviewEvent_type_id_get
    if _newclass:type_id = _swig_property(_sr_py.AutoviewEvent_type_id_get, _sr_py.AutoviewEvent_type_id_set)
    def is_trail_enabled(*args): return _sr_py.AutoviewEvent_is_trail_enabled(*args)
    def clone(*args): return _sr_py.AutoviewEvent_clone(*args)
AutoviewEvent_swigregister = _sr_py.AutoviewEvent_swigregister
AutoviewEvent_swigregister(AutoviewEvent)

class TMNotifyEvent(BaseEvent):
    __swig_setmethods__ = {}
    for _s in [BaseEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMNotifyEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMNotifyEvent, name)
    __repr__ = _swig_repr
    START_E = _sr_py.TMNotifyEvent_START_E
    STOP_E = _sr_py.TMNotifyEvent_STOP_E
    SUSPEND_E = _sr_py.TMNotifyEvent_SUSPEND_E
    RESUME_E = _sr_py.TMNotifyEvent_RESUME_E
    def __init__(self, *args): 
        this = _sr_py.new_TMNotifyEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_TMNotifyEvent
    __del__ = lambda self : None;
    def io(*args): return _sr_py.TMNotifyEvent_io(*args)
    def clone(*args): return _sr_py.TMNotifyEvent_clone(*args)
    def is_tm_notify_event(*args): return _sr_py.TMNotifyEvent_is_tm_notify_event(*args)
    def get_tool_id(*args): return _sr_py.TMNotifyEvent_get_tool_id(*args)
    def get_tool_mode(*args): return _sr_py.TMNotifyEvent_get_tool_mode(*args)
    def get_notify_state(*args): return _sr_py.TMNotifyEvent_get_notify_state(*args)
    def set_tool_id(*args): return _sr_py.TMNotifyEvent_set_tool_id(*args)
    def set_tool_mode(*args): return _sr_py.TMNotifyEvent_set_tool_mode(*args)
    def set_notify_state(*args): return _sr_py.TMNotifyEvent_set_notify_state(*args)
TMNotifyEvent_swigregister = _sr_py.TMNotifyEvent_swigregister
TMNotifyEvent_swigregister(TMNotifyEvent)

class CommandEvent(BaseEvent):
    __swig_setmethods__ = {}
    for _s in [BaseEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommandEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CommandEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CommandEvent
    __del__ = lambda self : None;
    def io(*args): return _sr_py.CommandEvent_io(*args)
    def clone(*args): return _sr_py.CommandEvent_clone(*args)
    def is_command_event(*args): return _sr_py.CommandEvent_is_command_event(*args)
    def get_command(*args): return _sr_py.CommandEvent_get_command(*args)
    def set_command(*args): return _sr_py.CommandEvent_set_command(*args)
CommandEvent_swigregister = _sr_py.CommandEvent_swigregister
CommandEvent_swigregister(CommandEvent)

class vector_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string, name)
    __repr__ = _swig_repr
    def iterator(*args): return _sr_py.vector_string_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _sr_py.vector_string___nonzero__(*args)
    def __len__(*args): return _sr_py.vector_string___len__(*args)
    def pop(*args): return _sr_py.vector_string_pop(*args)
    def __getslice__(*args): return _sr_py.vector_string___getslice__(*args)
    def __setslice__(*args): return _sr_py.vector_string___setslice__(*args)
    def __delslice__(*args): return _sr_py.vector_string___delslice__(*args)
    def __delitem__(*args): return _sr_py.vector_string___delitem__(*args)
    def __getitem__(*args): return _sr_py.vector_string___getitem__(*args)
    def __setitem__(*args): return _sr_py.vector_string___setitem__(*args)
    def append(*args): return _sr_py.vector_string_append(*args)
    def empty(*args): return _sr_py.vector_string_empty(*args)
    def size(*args): return _sr_py.vector_string_size(*args)
    def clear(*args): return _sr_py.vector_string_clear(*args)
    def swap(*args): return _sr_py.vector_string_swap(*args)
    def get_allocator(*args): return _sr_py.vector_string_get_allocator(*args)
    def begin(*args): return _sr_py.vector_string_begin(*args)
    def end(*args): return _sr_py.vector_string_end(*args)
    def rbegin(*args): return _sr_py.vector_string_rbegin(*args)
    def rend(*args): return _sr_py.vector_string_rend(*args)
    def pop_back(*args): return _sr_py.vector_string_pop_back(*args)
    def erase(*args): return _sr_py.vector_string_erase(*args)
    def __init__(self, *args): 
        this = _sr_py.new_vector_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _sr_py.vector_string_push_back(*args)
    def front(*args): return _sr_py.vector_string_front(*args)
    def back(*args): return _sr_py.vector_string_back(*args)
    def assign(*args): return _sr_py.vector_string_assign(*args)
    def resize(*args): return _sr_py.vector_string_resize(*args)
    def insert(*args): return _sr_py.vector_string_insert(*args)
    def reserve(*args): return _sr_py.vector_string_reserve(*args)
    def capacity(*args): return _sr_py.vector_string_capacity(*args)
    __swig_destroy__ = _sr_py.delete_vector_string
    __del__ = lambda self : None;
vector_string_swigregister = _sr_py.vector_string_swigregister
vector_string_swigregister(vector_string)

class vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_double, name)
    __repr__ = _swig_repr
    def iterator(*args): return _sr_py.vector_double_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _sr_py.vector_double___nonzero__(*args)
    def __len__(*args): return _sr_py.vector_double___len__(*args)
    def pop(*args): return _sr_py.vector_double_pop(*args)
    def __getslice__(*args): return _sr_py.vector_double___getslice__(*args)
    def __setslice__(*args): return _sr_py.vector_double___setslice__(*args)
    def __delslice__(*args): return _sr_py.vector_double___delslice__(*args)
    def __delitem__(*args): return _sr_py.vector_double___delitem__(*args)
    def __getitem__(*args): return _sr_py.vector_double___getitem__(*args)
    def __setitem__(*args): return _sr_py.vector_double___setitem__(*args)
    def append(*args): return _sr_py.vector_double_append(*args)
    def empty(*args): return _sr_py.vector_double_empty(*args)
    def size(*args): return _sr_py.vector_double_size(*args)
    def clear(*args): return _sr_py.vector_double_clear(*args)
    def swap(*args): return _sr_py.vector_double_swap(*args)
    def get_allocator(*args): return _sr_py.vector_double_get_allocator(*args)
    def begin(*args): return _sr_py.vector_double_begin(*args)
    def end(*args): return _sr_py.vector_double_end(*args)
    def rbegin(*args): return _sr_py.vector_double_rbegin(*args)
    def rend(*args): return _sr_py.vector_double_rend(*args)
    def pop_back(*args): return _sr_py.vector_double_pop_back(*args)
    def erase(*args): return _sr_py.vector_double_erase(*args)
    def __init__(self, *args): 
        this = _sr_py.new_vector_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _sr_py.vector_double_push_back(*args)
    def front(*args): return _sr_py.vector_double_front(*args)
    def back(*args): return _sr_py.vector_double_back(*args)
    def assign(*args): return _sr_py.vector_double_assign(*args)
    def resize(*args): return _sr_py.vector_double_resize(*args)
    def insert(*args): return _sr_py.vector_double_insert(*args)
    def reserve(*args): return _sr_py.vector_double_reserve(*args)
    def capacity(*args): return _sr_py.vector_double_capacity(*args)
    __swig_destroy__ = _sr_py.delete_vector_double
    __del__ = lambda self : None;
vector_double_swigregister = _sr_py.vector_double_swigregister
vector_double_swigregister(vector_double)

class vector_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int, name)
    __repr__ = _swig_repr
    def iterator(*args): return _sr_py.vector_int_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _sr_py.vector_int___nonzero__(*args)
    def __len__(*args): return _sr_py.vector_int___len__(*args)
    def pop(*args): return _sr_py.vector_int_pop(*args)
    def __getslice__(*args): return _sr_py.vector_int___getslice__(*args)
    def __setslice__(*args): return _sr_py.vector_int___setslice__(*args)
    def __delslice__(*args): return _sr_py.vector_int___delslice__(*args)
    def __delitem__(*args): return _sr_py.vector_int___delitem__(*args)
    def __getitem__(*args): return _sr_py.vector_int___getitem__(*args)
    def __setitem__(*args): return _sr_py.vector_int___setitem__(*args)
    def append(*args): return _sr_py.vector_int_append(*args)
    def empty(*args): return _sr_py.vector_int_empty(*args)
    def size(*args): return _sr_py.vector_int_size(*args)
    def clear(*args): return _sr_py.vector_int_clear(*args)
    def swap(*args): return _sr_py.vector_int_swap(*args)
    def get_allocator(*args): return _sr_py.vector_int_get_allocator(*args)
    def begin(*args): return _sr_py.vector_int_begin(*args)
    def end(*args): return _sr_py.vector_int_end(*args)
    def rbegin(*args): return _sr_py.vector_int_rbegin(*args)
    def rend(*args): return _sr_py.vector_int_rend(*args)
    def pop_back(*args): return _sr_py.vector_int_pop_back(*args)
    def erase(*args): return _sr_py.vector_int_erase(*args)
    def __init__(self, *args): 
        this = _sr_py.new_vector_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _sr_py.vector_int_push_back(*args)
    def front(*args): return _sr_py.vector_int_front(*args)
    def back(*args): return _sr_py.vector_int_back(*args)
    def assign(*args): return _sr_py.vector_int_assign(*args)
    def resize(*args): return _sr_py.vector_int_resize(*args)
    def insert(*args): return _sr_py.vector_int_insert(*args)
    def reserve(*args): return _sr_py.vector_int_reserve(*args)
    def capacity(*args): return _sr_py.vector_int_capacity(*args)
    __swig_destroy__ = _sr_py.delete_vector_int
    __del__ = lambda self : None;
vector_int_swigregister = _sr_py.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_size_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_size_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_size_t, name)
    __repr__ = _swig_repr
    def iterator(*args): return _sr_py.vector_size_t_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _sr_py.vector_size_t___nonzero__(*args)
    def __len__(*args): return _sr_py.vector_size_t___len__(*args)
    def pop(*args): return _sr_py.vector_size_t_pop(*args)
    def __getslice__(*args): return _sr_py.vector_size_t___getslice__(*args)
    def __setslice__(*args): return _sr_py.vector_size_t___setslice__(*args)
    def __delslice__(*args): return _sr_py.vector_size_t___delslice__(*args)
    def __delitem__(*args): return _sr_py.vector_size_t___delitem__(*args)
    def __getitem__(*args): return _sr_py.vector_size_t___getitem__(*args)
    def __setitem__(*args): return _sr_py.vector_size_t___setitem__(*args)
    def append(*args): return _sr_py.vector_size_t_append(*args)
    def empty(*args): return _sr_py.vector_size_t_empty(*args)
    def size(*args): return _sr_py.vector_size_t_size(*args)
    def clear(*args): return _sr_py.vector_size_t_clear(*args)
    def swap(*args): return _sr_py.vector_size_t_swap(*args)
    def get_allocator(*args): return _sr_py.vector_size_t_get_allocator(*args)
    def begin(*args): return _sr_py.vector_size_t_begin(*args)
    def end(*args): return _sr_py.vector_size_t_end(*args)
    def rbegin(*args): return _sr_py.vector_size_t_rbegin(*args)
    def rend(*args): return _sr_py.vector_size_t_rend(*args)
    def pop_back(*args): return _sr_py.vector_size_t_pop_back(*args)
    def erase(*args): return _sr_py.vector_size_t_erase(*args)
    def __init__(self, *args): 
        this = _sr_py.new_vector_size_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _sr_py.vector_size_t_push_back(*args)
    def front(*args): return _sr_py.vector_size_t_front(*args)
    def back(*args): return _sr_py.vector_size_t_back(*args)
    def assign(*args): return _sr_py.vector_size_t_assign(*args)
    def resize(*args): return _sr_py.vector_size_t_resize(*args)
    def insert(*args): return _sr_py.vector_size_t_insert(*args)
    def reserve(*args): return _sr_py.vector_size_t_reserve(*args)
    def capacity(*args): return _sr_py.vector_size_t_capacity(*args)
    __swig_destroy__ = _sr_py.delete_vector_size_t
    __del__ = lambda self : None;
vector_size_t_swigregister = _sr_py.vector_size_t_swigregister
vector_size_t_swigregister(vector_size_t)

load_field = _sr_py.load_field
toggle_field_visibility = _sr_py.toggle_field_visibility
init_sr_py = _sr_py.init_sr_py
terminate = _sr_py.terminate
test_function = _sr_py.test_function
tetgen_2surf = _sr_py.tetgen_2surf
update_viewer = _sr_py.update_viewer
create_cm2view = _sr_py.create_cm2view
set_cm2view_notify_id = _sr_py.set_cm2view_notify_id
update_cm2view = _sr_py.update_cm2view
add_rectangle_to_cm2view = _sr_py.add_rectangle_to_cm2view
add_triangle_to_cm2view = _sr_py.add_triangle_to_cm2view
add_tm_notify_event = _sr_py.add_tm_notify_event
add_command_event = _sr_py.add_command_event
selection_target_changed = _sr_py.selection_target_changed
read_at_index = _sr_py.read_at_index
class CreateParameterBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateParameterBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateParameterBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateParameterBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateParameterBundleAlg
    __del__ = lambda self : None;
    def get_p_data(*args): return _sr_py.CreateParameterBundleAlg_get_p_data(*args)
    def get_p_new_field_count(*args): return _sr_py.CreateParameterBundleAlg_get_p_new_field_count(*args)
    def get_p_update_all(*args): return _sr_py.CreateParameterBundleAlg_get_p_update_all(*args)
    def get_progress_reporter(*args): return _sr_py.CreateParameterBundleAlg_get_progress_reporter(*args)
    def set_p_data(*args): return _sr_py.CreateParameterBundleAlg_set_p_data(*args)
    def set_p_new_field_count(*args): return _sr_py.CreateParameterBundleAlg_set_p_new_field_count(*args)
    def set_p_update_all(*args): return _sr_py.CreateParameterBundleAlg_set_p_update_all(*args)
    def set_progress_reporter(*args): return _sr_py.CreateParameterBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateParameterBundleAlg_execute(*args)
CreateParameterBundleAlg_swigregister = _sr_py.CreateParameterBundleAlg_swigregister
CreateParameterBundleAlg_swigregister(CreateParameterBundleAlg)
run_viewer_thread = _sr_py.run_viewer_thread
create_viewer = _sr_py.create_viewer
add_pointer_event = _sr_py.add_pointer_event
add_key_event = _sr_py.add_key_event
send_scene = _sr_py.send_scene

get_create_parameter_bundle_alg = _sr_py.get_create_parameter_bundle_alg
class GetBundlesFromBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetBundlesFromBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetBundlesFromBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetBundlesFromBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetBundlesFromBundleAlg
    __del__ = lambda self : None;
    def get_p_bundle1_name(*args): return _sr_py.GetBundlesFromBundleAlg_get_p_bundle1_name(*args)
    def get_p_bundle2_name(*args): return _sr_py.GetBundlesFromBundleAlg_get_p_bundle2_name(*args)
    def get_p_bundle3_name(*args): return _sr_py.GetBundlesFromBundleAlg_get_p_bundle3_name(*args)
    def get_p_bundle4_name(*args): return _sr_py.GetBundlesFromBundleAlg_get_p_bundle4_name(*args)
    def get_p_bundle5_name(*args): return _sr_py.GetBundlesFromBundleAlg_get_p_bundle5_name(*args)
    def get_p_bundle6_name(*args): return _sr_py.GetBundlesFromBundleAlg_get_p_bundle6_name(*args)
    def get_p_bundle_selection(*args): return _sr_py.GetBundlesFromBundleAlg_get_p_bundle_selection(*args)
    def get_progress_reporter(*args): return _sr_py.GetBundlesFromBundleAlg_get_progress_reporter(*args)
    def set_p_bundle1_name(*args): return _sr_py.GetBundlesFromBundleAlg_set_p_bundle1_name(*args)
    def set_p_bundle2_name(*args): return _sr_py.GetBundlesFromBundleAlg_set_p_bundle2_name(*args)
    def set_p_bundle3_name(*args): return _sr_py.GetBundlesFromBundleAlg_set_p_bundle3_name(*args)
    def set_p_bundle4_name(*args): return _sr_py.GetBundlesFromBundleAlg_set_p_bundle4_name(*args)
    def set_p_bundle5_name(*args): return _sr_py.GetBundlesFromBundleAlg_set_p_bundle5_name(*args)
    def set_p_bundle6_name(*args): return _sr_py.GetBundlesFromBundleAlg_set_p_bundle6_name(*args)
    def set_p_bundle_selection(*args): return _sr_py.GetBundlesFromBundleAlg_set_p_bundle_selection(*args)
    def set_progress_reporter(*args): return _sr_py.GetBundlesFromBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetBundlesFromBundleAlg_execute(*args)
GetBundlesFromBundleAlg_swigregister = _sr_py.GetBundlesFromBundleAlg_swigregister
GetBundlesFromBundleAlg_swigregister(GetBundlesFromBundleAlg)

get_get_bundles_from_bundle_alg = _sr_py.get_get_bundles_from_bundle_alg
class GetColorMap2sFromBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetColorMap2sFromBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetColorMap2sFromBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetColorMap2sFromBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetColorMap2sFromBundleAlg
    __del__ = lambda self : None;
    def get_p_colormap21_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_get_p_colormap21_name(*args)
    def get_p_colormap22_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_get_p_colormap22_name(*args)
    def get_p_colormap23_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_get_p_colormap23_name(*args)
    def get_p_colormap24_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_get_p_colormap24_name(*args)
    def get_p_colormap25_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_get_p_colormap25_name(*args)
    def get_p_colormap26_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_get_p_colormap26_name(*args)
    def get_p_colormap2_selection(*args): return _sr_py.GetColorMap2sFromBundleAlg_get_p_colormap2_selection(*args)
    def get_progress_reporter(*args): return _sr_py.GetColorMap2sFromBundleAlg_get_progress_reporter(*args)
    def set_p_colormap21_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_set_p_colormap21_name(*args)
    def set_p_colormap22_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_set_p_colormap22_name(*args)
    def set_p_colormap23_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_set_p_colormap23_name(*args)
    def set_p_colormap24_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_set_p_colormap24_name(*args)
    def set_p_colormap25_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_set_p_colormap25_name(*args)
    def set_p_colormap26_name(*args): return _sr_py.GetColorMap2sFromBundleAlg_set_p_colormap26_name(*args)
    def set_p_colormap2_selection(*args): return _sr_py.GetColorMap2sFromBundleAlg_set_p_colormap2_selection(*args)
    def set_progress_reporter(*args): return _sr_py.GetColorMap2sFromBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetColorMap2sFromBundleAlg_execute(*args)
GetColorMap2sFromBundleAlg_swigregister = _sr_py.GetColorMap2sFromBundleAlg_swigregister
GetColorMap2sFromBundleAlg_swigregister(GetColorMap2sFromBundleAlg)

get_get_colormap2s_from_bundle_alg = _sr_py.get_get_colormap2s_from_bundle_alg
class GetColorMapsFromBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetColorMapsFromBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetColorMapsFromBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetColorMapsFromBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetColorMapsFromBundleAlg
    __del__ = lambda self : None;
    def get_p_colormap1_name(*args): return _sr_py.GetColorMapsFromBundleAlg_get_p_colormap1_name(*args)
    def get_p_colormap2_name(*args): return _sr_py.GetColorMapsFromBundleAlg_get_p_colormap2_name(*args)
    def get_p_colormap3_name(*args): return _sr_py.GetColorMapsFromBundleAlg_get_p_colormap3_name(*args)
    def get_p_colormap4_name(*args): return _sr_py.GetColorMapsFromBundleAlg_get_p_colormap4_name(*args)
    def get_p_colormap5_name(*args): return _sr_py.GetColorMapsFromBundleAlg_get_p_colormap5_name(*args)
    def get_p_colormap6_name(*args): return _sr_py.GetColorMapsFromBundleAlg_get_p_colormap6_name(*args)
    def get_p_colormap_selection(*args): return _sr_py.GetColorMapsFromBundleAlg_get_p_colormap_selection(*args)
    def get_progress_reporter(*args): return _sr_py.GetColorMapsFromBundleAlg_get_progress_reporter(*args)
    def set_p_colormap1_name(*args): return _sr_py.GetColorMapsFromBundleAlg_set_p_colormap1_name(*args)
    def set_p_colormap2_name(*args): return _sr_py.GetColorMapsFromBundleAlg_set_p_colormap2_name(*args)
    def set_p_colormap3_name(*args): return _sr_py.GetColorMapsFromBundleAlg_set_p_colormap3_name(*args)
    def set_p_colormap4_name(*args): return _sr_py.GetColorMapsFromBundleAlg_set_p_colormap4_name(*args)
    def set_p_colormap5_name(*args): return _sr_py.GetColorMapsFromBundleAlg_set_p_colormap5_name(*args)
    def set_p_colormap6_name(*args): return _sr_py.GetColorMapsFromBundleAlg_set_p_colormap6_name(*args)
    def set_p_colormap_selection(*args): return _sr_py.GetColorMapsFromBundleAlg_set_p_colormap_selection(*args)
    def set_progress_reporter(*args): return _sr_py.GetColorMapsFromBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetColorMapsFromBundleAlg_execute(*args)
GetColorMapsFromBundleAlg_swigregister = _sr_py.GetColorMapsFromBundleAlg_swigregister
GetColorMapsFromBundleAlg_swigregister(GetColorMapsFromBundleAlg)

get_get_colormaps_from_bundle_alg = _sr_py.get_get_colormaps_from_bundle_alg
class GetFieldsFromBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetFieldsFromBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetFieldsFromBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetFieldsFromBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetFieldsFromBundleAlg
    __del__ = lambda self : None;
    def get_p_field1_name(*args): return _sr_py.GetFieldsFromBundleAlg_get_p_field1_name(*args)
    def get_p_field2_name(*args): return _sr_py.GetFieldsFromBundleAlg_get_p_field2_name(*args)
    def get_p_field3_name(*args): return _sr_py.GetFieldsFromBundleAlg_get_p_field3_name(*args)
    def get_p_field4_name(*args): return _sr_py.GetFieldsFromBundleAlg_get_p_field4_name(*args)
    def get_p_field5_name(*args): return _sr_py.GetFieldsFromBundleAlg_get_p_field5_name(*args)
    def get_p_field6_name(*args): return _sr_py.GetFieldsFromBundleAlg_get_p_field6_name(*args)
    def get_p_field_selection(*args): return _sr_py.GetFieldsFromBundleAlg_get_p_field_selection(*args)
    def get_progress_reporter(*args): return _sr_py.GetFieldsFromBundleAlg_get_progress_reporter(*args)
    def set_p_field1_name(*args): return _sr_py.GetFieldsFromBundleAlg_set_p_field1_name(*args)
    def set_p_field2_name(*args): return _sr_py.GetFieldsFromBundleAlg_set_p_field2_name(*args)
    def set_p_field3_name(*args): return _sr_py.GetFieldsFromBundleAlg_set_p_field3_name(*args)
    def set_p_field4_name(*args): return _sr_py.GetFieldsFromBundleAlg_set_p_field4_name(*args)
    def set_p_field5_name(*args): return _sr_py.GetFieldsFromBundleAlg_set_p_field5_name(*args)
    def set_p_field6_name(*args): return _sr_py.GetFieldsFromBundleAlg_set_p_field6_name(*args)
    def set_p_field_selection(*args): return _sr_py.GetFieldsFromBundleAlg_set_p_field_selection(*args)
    def set_progress_reporter(*args): return _sr_py.GetFieldsFromBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetFieldsFromBundleAlg_execute(*args)
GetFieldsFromBundleAlg_swigregister = _sr_py.GetFieldsFromBundleAlg_swigregister
GetFieldsFromBundleAlg_swigregister(GetFieldsFromBundleAlg)

get_get_fields_from_bundle_alg = _sr_py.get_get_fields_from_bundle_alg
class GetMatricesFromBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetMatricesFromBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetMatricesFromBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetMatricesFromBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetMatricesFromBundleAlg
    __del__ = lambda self : None;
    def get_p_matrix1_name(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_matrix1_name(*args)
    def get_p_matrix2_name(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_matrix2_name(*args)
    def get_p_matrix3_name(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_matrix3_name(*args)
    def get_p_matrix4_name(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_matrix4_name(*args)
    def get_p_matrix5_name(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_matrix5_name(*args)
    def get_p_matrix6_name(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_matrix6_name(*args)
    def get_p_matrix_selection(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_matrix_selection(*args)
    def get_p_transposenrrd1(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_transposenrrd1(*args)
    def get_p_transposenrrd2(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_transposenrrd2(*args)
    def get_p_transposenrrd3(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_transposenrrd3(*args)
    def get_p_transposenrrd4(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_transposenrrd4(*args)
    def get_p_transposenrrd5(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_transposenrrd5(*args)
    def get_p_transposenrrd6(*args): return _sr_py.GetMatricesFromBundleAlg_get_p_transposenrrd6(*args)
    def get_progress_reporter(*args): return _sr_py.GetMatricesFromBundleAlg_get_progress_reporter(*args)
    def set_p_matrix1_name(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_matrix1_name(*args)
    def set_p_matrix2_name(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_matrix2_name(*args)
    def set_p_matrix3_name(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_matrix3_name(*args)
    def set_p_matrix4_name(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_matrix4_name(*args)
    def set_p_matrix5_name(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_matrix5_name(*args)
    def set_p_matrix6_name(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_matrix6_name(*args)
    def set_p_matrix_selection(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_matrix_selection(*args)
    def set_p_transposenrrd1(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_transposenrrd1(*args)
    def set_p_transposenrrd2(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_transposenrrd2(*args)
    def set_p_transposenrrd3(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_transposenrrd3(*args)
    def set_p_transposenrrd4(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_transposenrrd4(*args)
    def set_p_transposenrrd5(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_transposenrrd5(*args)
    def set_p_transposenrrd6(*args): return _sr_py.GetMatricesFromBundleAlg_set_p_transposenrrd6(*args)
    def set_progress_reporter(*args): return _sr_py.GetMatricesFromBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetMatricesFromBundleAlg_execute(*args)
GetMatricesFromBundleAlg_swigregister = _sr_py.GetMatricesFromBundleAlg_swigregister
GetMatricesFromBundleAlg_swigregister(GetMatricesFromBundleAlg)

get_get_matrices_from_bundle_alg = _sr_py.get_get_matrices_from_bundle_alg
class GetNrrdsFromBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetNrrdsFromBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetNrrdsFromBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetNrrdsFromBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetNrrdsFromBundleAlg
    __del__ = lambda self : None;
    def get_p_nrrd1_name(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_nrrd1_name(*args)
    def get_p_nrrd2_name(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_nrrd2_name(*args)
    def get_p_nrrd3_name(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_nrrd3_name(*args)
    def get_p_nrrd4_name(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_nrrd4_name(*args)
    def get_p_nrrd5_name(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_nrrd5_name(*args)
    def get_p_nrrd6_name(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_nrrd6_name(*args)
    def get_p_nrrd_selection(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_nrrd_selection(*args)
    def get_p_transposenrrd1(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_transposenrrd1(*args)
    def get_p_transposenrrd2(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_transposenrrd2(*args)
    def get_p_transposenrrd3(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_transposenrrd3(*args)
    def get_p_transposenrrd4(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_transposenrrd4(*args)
    def get_p_transposenrrd5(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_transposenrrd5(*args)
    def get_p_transposenrrd6(*args): return _sr_py.GetNrrdsFromBundleAlg_get_p_transposenrrd6(*args)
    def get_progress_reporter(*args): return _sr_py.GetNrrdsFromBundleAlg_get_progress_reporter(*args)
    def set_p_nrrd1_name(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_nrrd1_name(*args)
    def set_p_nrrd2_name(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_nrrd2_name(*args)
    def set_p_nrrd3_name(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_nrrd3_name(*args)
    def set_p_nrrd4_name(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_nrrd4_name(*args)
    def set_p_nrrd5_name(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_nrrd5_name(*args)
    def set_p_nrrd6_name(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_nrrd6_name(*args)
    def set_p_nrrd_selection(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_nrrd_selection(*args)
    def set_p_transposenrrd1(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_transposenrrd1(*args)
    def set_p_transposenrrd2(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_transposenrrd2(*args)
    def set_p_transposenrrd3(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_transposenrrd3(*args)
    def set_p_transposenrrd4(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_transposenrrd4(*args)
    def set_p_transposenrrd5(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_transposenrrd5(*args)
    def set_p_transposenrrd6(*args): return _sr_py.GetNrrdsFromBundleAlg_set_p_transposenrrd6(*args)
    def set_progress_reporter(*args): return _sr_py.GetNrrdsFromBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetNrrdsFromBundleAlg_execute(*args)
GetNrrdsFromBundleAlg_swigregister = _sr_py.GetNrrdsFromBundleAlg_swigregister
GetNrrdsFromBundleAlg_swigregister(GetNrrdsFromBundleAlg)

get_get_nrrds_from_bundle_alg = _sr_py.get_get_nrrds_from_bundle_alg
class GetPathsFromBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetPathsFromBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetPathsFromBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetPathsFromBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetPathsFromBundleAlg
    __del__ = lambda self : None;
    def get_p_path1_name(*args): return _sr_py.GetPathsFromBundleAlg_get_p_path1_name(*args)
    def get_p_path2_name(*args): return _sr_py.GetPathsFromBundleAlg_get_p_path2_name(*args)
    def get_p_path3_name(*args): return _sr_py.GetPathsFromBundleAlg_get_p_path3_name(*args)
    def get_p_path4_name(*args): return _sr_py.GetPathsFromBundleAlg_get_p_path4_name(*args)
    def get_p_path5_name(*args): return _sr_py.GetPathsFromBundleAlg_get_p_path5_name(*args)
    def get_p_path6_name(*args): return _sr_py.GetPathsFromBundleAlg_get_p_path6_name(*args)
    def get_p_path_selection(*args): return _sr_py.GetPathsFromBundleAlg_get_p_path_selection(*args)
    def get_progress_reporter(*args): return _sr_py.GetPathsFromBundleAlg_get_progress_reporter(*args)
    def set_p_path1_name(*args): return _sr_py.GetPathsFromBundleAlg_set_p_path1_name(*args)
    def set_p_path2_name(*args): return _sr_py.GetPathsFromBundleAlg_set_p_path2_name(*args)
    def set_p_path3_name(*args): return _sr_py.GetPathsFromBundleAlg_set_p_path3_name(*args)
    def set_p_path4_name(*args): return _sr_py.GetPathsFromBundleAlg_set_p_path4_name(*args)
    def set_p_path5_name(*args): return _sr_py.GetPathsFromBundleAlg_set_p_path5_name(*args)
    def set_p_path6_name(*args): return _sr_py.GetPathsFromBundleAlg_set_p_path6_name(*args)
    def set_p_path_selection(*args): return _sr_py.GetPathsFromBundleAlg_set_p_path_selection(*args)
    def set_progress_reporter(*args): return _sr_py.GetPathsFromBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetPathsFromBundleAlg_execute(*args)
GetPathsFromBundleAlg_swigregister = _sr_py.GetPathsFromBundleAlg_swigregister
GetPathsFromBundleAlg_swigregister(GetPathsFromBundleAlg)

get_get_paths_from_bundle_alg = _sr_py.get_get_paths_from_bundle_alg
class GetStringsFromBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetStringsFromBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetStringsFromBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetStringsFromBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetStringsFromBundleAlg
    __del__ = lambda self : None;
    def get_p_string1_name(*args): return _sr_py.GetStringsFromBundleAlg_get_p_string1_name(*args)
    def get_p_string2_name(*args): return _sr_py.GetStringsFromBundleAlg_get_p_string2_name(*args)
    def get_p_string3_name(*args): return _sr_py.GetStringsFromBundleAlg_get_p_string3_name(*args)
    def get_p_string4_name(*args): return _sr_py.GetStringsFromBundleAlg_get_p_string4_name(*args)
    def get_p_string5_name(*args): return _sr_py.GetStringsFromBundleAlg_get_p_string5_name(*args)
    def get_p_string6_name(*args): return _sr_py.GetStringsFromBundleAlg_get_p_string6_name(*args)
    def get_p_string_selection(*args): return _sr_py.GetStringsFromBundleAlg_get_p_string_selection(*args)
    def get_progress_reporter(*args): return _sr_py.GetStringsFromBundleAlg_get_progress_reporter(*args)
    def set_p_string1_name(*args): return _sr_py.GetStringsFromBundleAlg_set_p_string1_name(*args)
    def set_p_string2_name(*args): return _sr_py.GetStringsFromBundleAlg_set_p_string2_name(*args)
    def set_p_string3_name(*args): return _sr_py.GetStringsFromBundleAlg_set_p_string3_name(*args)
    def set_p_string4_name(*args): return _sr_py.GetStringsFromBundleAlg_set_p_string4_name(*args)
    def set_p_string5_name(*args): return _sr_py.GetStringsFromBundleAlg_set_p_string5_name(*args)
    def set_p_string6_name(*args): return _sr_py.GetStringsFromBundleAlg_set_p_string6_name(*args)
    def set_p_string_selection(*args): return _sr_py.GetStringsFromBundleAlg_set_p_string_selection(*args)
    def set_progress_reporter(*args): return _sr_py.GetStringsFromBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetStringsFromBundleAlg_execute(*args)
GetStringsFromBundleAlg_swigregister = _sr_py.GetStringsFromBundleAlg_swigregister
GetStringsFromBundleAlg_swigregister(GetStringsFromBundleAlg)

get_get_strings_from_bundle_alg = _sr_py.get_get_strings_from_bundle_alg
class InsertBundlesIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertBundlesIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertBundlesIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertBundlesIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertBundlesIntoBundleAlg
    __del__ = lambda self : None;
    def get_p_bundle1_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_bundle1_name(*args)
    def get_p_bundle2_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_bundle2_name(*args)
    def get_p_bundle3_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_bundle3_name(*args)
    def get_p_bundle4_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_bundle4_name(*args)
    def get_p_bundle5_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_bundle5_name(*args)
    def get_p_bundle6_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_bundle6_name(*args)
    def get_p_bundlename(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_bundlename(*args)
    def get_p_replace1(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_replace1(*args)
    def get_p_replace2(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_replace2(*args)
    def get_p_replace3(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_replace3(*args)
    def get_p_replace4(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_replace4(*args)
    def get_p_replace5(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_replace5(*args)
    def get_p_replace6(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_p_replace6(*args)
    def get_progress_reporter(*args): return _sr_py.InsertBundlesIntoBundleAlg_get_progress_reporter(*args)
    def set_p_bundle1_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_bundle1_name(*args)
    def set_p_bundle2_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_bundle2_name(*args)
    def set_p_bundle3_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_bundle3_name(*args)
    def set_p_bundle4_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_bundle4_name(*args)
    def set_p_bundle5_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_bundle5_name(*args)
    def set_p_bundle6_name(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_bundle6_name(*args)
    def set_p_bundlename(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_bundlename(*args)
    def set_p_replace1(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_replace1(*args)
    def set_p_replace2(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_replace2(*args)
    def set_p_replace3(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_replace3(*args)
    def set_p_replace4(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_replace4(*args)
    def set_p_replace5(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_replace5(*args)
    def set_p_replace6(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_p_replace6(*args)
    def set_progress_reporter(*args): return _sr_py.InsertBundlesIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertBundlesIntoBundleAlg_execute(*args)
InsertBundlesIntoBundleAlg_swigregister = _sr_py.InsertBundlesIntoBundleAlg_swigregister
InsertBundlesIntoBundleAlg_swigregister(InsertBundlesIntoBundleAlg)

get_insert_bundles_into_bundle_alg = _sr_py.get_insert_bundles_into_bundle_alg
class InsertColorMap2sIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertColorMap2sIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertColorMap2sIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertColorMap2sIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertColorMap2sIntoBundleAlg
    __del__ = lambda self : None;
    def get_p_bundlename(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_bundlename(*args)
    def get_p_colormap21_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_colormap21_name(*args)
    def get_p_colormap22_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_colormap22_name(*args)
    def get_p_colormap23_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_colormap23_name(*args)
    def get_p_colormap24_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_colormap24_name(*args)
    def get_p_colormap25_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_colormap25_name(*args)
    def get_p_colormap26_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_colormap26_name(*args)
    def get_p_replace1(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_replace1(*args)
    def get_p_replace2(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_replace2(*args)
    def get_p_replace3(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_replace3(*args)
    def get_p_replace4(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_replace4(*args)
    def get_p_replace5(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_replace5(*args)
    def get_p_replace6(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_p_replace6(*args)
    def get_progress_reporter(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_get_progress_reporter(*args)
    def set_p_bundlename(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_bundlename(*args)
    def set_p_colormap21_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_colormap21_name(*args)
    def set_p_colormap22_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_colormap22_name(*args)
    def set_p_colormap23_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_colormap23_name(*args)
    def set_p_colormap24_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_colormap24_name(*args)
    def set_p_colormap25_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_colormap25_name(*args)
    def set_p_colormap26_name(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_colormap26_name(*args)
    def set_p_replace1(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_replace1(*args)
    def set_p_replace2(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_replace2(*args)
    def set_p_replace3(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_replace3(*args)
    def set_p_replace4(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_replace4(*args)
    def set_p_replace5(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_replace5(*args)
    def set_p_replace6(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_p_replace6(*args)
    def set_progress_reporter(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertColorMap2sIntoBundleAlg_execute(*args)
InsertColorMap2sIntoBundleAlg_swigregister = _sr_py.InsertColorMap2sIntoBundleAlg_swigregister
InsertColorMap2sIntoBundleAlg_swigregister(InsertColorMap2sIntoBundleAlg)

get_insert_colormap2s_into_bundle_alg = _sr_py.get_insert_colormap2s_into_bundle_alg
class InsertColorMapsIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertColorMapsIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertColorMapsIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertColorMapsIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertColorMapsIntoBundleAlg
    __del__ = lambda self : None;
    def get_p_bundlename(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_bundlename(*args)
    def get_p_colormap1_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_colormap1_name(*args)
    def get_p_colormap2_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_colormap2_name(*args)
    def get_p_colormap3_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_colormap3_name(*args)
    def get_p_colormap4_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_colormap4_name(*args)
    def get_p_colormap5_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_colormap5_name(*args)
    def get_p_colormap6_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_colormap6_name(*args)
    def get_p_replace1(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_replace1(*args)
    def get_p_replace2(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_replace2(*args)
    def get_p_replace3(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_replace3(*args)
    def get_p_replace4(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_replace4(*args)
    def get_p_replace5(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_replace5(*args)
    def get_p_replace6(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_p_replace6(*args)
    def get_progress_reporter(*args): return _sr_py.InsertColorMapsIntoBundleAlg_get_progress_reporter(*args)
    def set_p_bundlename(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_bundlename(*args)
    def set_p_colormap1_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_colormap1_name(*args)
    def set_p_colormap2_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_colormap2_name(*args)
    def set_p_colormap3_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_colormap3_name(*args)
    def set_p_colormap4_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_colormap4_name(*args)
    def set_p_colormap5_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_colormap5_name(*args)
    def set_p_colormap6_name(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_colormap6_name(*args)
    def set_p_replace1(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_replace1(*args)
    def set_p_replace2(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_replace2(*args)
    def set_p_replace3(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_replace3(*args)
    def set_p_replace4(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_replace4(*args)
    def set_p_replace5(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_replace5(*args)
    def set_p_replace6(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_p_replace6(*args)
    def set_progress_reporter(*args): return _sr_py.InsertColorMapsIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertColorMapsIntoBundleAlg_execute(*args)
InsertColorMapsIntoBundleAlg_swigregister = _sr_py.InsertColorMapsIntoBundleAlg_swigregister
InsertColorMapsIntoBundleAlg_swigregister(InsertColorMapsIntoBundleAlg)

get_insert_colormaps_into_bundle_alg = _sr_py.get_insert_colormaps_into_bundle_alg
class InsertEnvironmentIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertEnvironmentIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertEnvironmentIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertEnvironmentIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertEnvironmentIntoBundleAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.InsertEnvironmentIntoBundleAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.InsertEnvironmentIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertEnvironmentIntoBundleAlg_execute(*args)
InsertEnvironmentIntoBundleAlg_swigregister = _sr_py.InsertEnvironmentIntoBundleAlg_swigregister
InsertEnvironmentIntoBundleAlg_swigregister(InsertEnvironmentIntoBundleAlg)

get_insert_environment_into_bundle_alg = _sr_py.get_insert_environment_into_bundle_alg
class InsertFieldsIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertFieldsIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertFieldsIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertFieldsIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertFieldsIntoBundleAlg
    __del__ = lambda self : None;
    def get_p_bundlename(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_bundlename(*args)
    def get_p_field1_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_field1_name(*args)
    def get_p_field2_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_field2_name(*args)
    def get_p_field3_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_field3_name(*args)
    def get_p_field4_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_field4_name(*args)
    def get_p_field5_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_field5_name(*args)
    def get_p_field6_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_field6_name(*args)
    def get_p_replace1(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_replace1(*args)
    def get_p_replace2(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_replace2(*args)
    def get_p_replace3(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_replace3(*args)
    def get_p_replace4(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_replace4(*args)
    def get_p_replace5(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_replace5(*args)
    def get_p_replace6(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_p_replace6(*args)
    def get_progress_reporter(*args): return _sr_py.InsertFieldsIntoBundleAlg_get_progress_reporter(*args)
    def set_p_bundlename(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_bundlename(*args)
    def set_p_field1_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_field1_name(*args)
    def set_p_field2_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_field2_name(*args)
    def set_p_field3_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_field3_name(*args)
    def set_p_field4_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_field4_name(*args)
    def set_p_field5_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_field5_name(*args)
    def set_p_field6_name(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_field6_name(*args)
    def set_p_replace1(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_replace1(*args)
    def set_p_replace2(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_replace2(*args)
    def set_p_replace3(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_replace3(*args)
    def set_p_replace4(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_replace4(*args)
    def set_p_replace5(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_replace5(*args)
    def set_p_replace6(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_p_replace6(*args)
    def set_progress_reporter(*args): return _sr_py.InsertFieldsIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertFieldsIntoBundleAlg_execute(*args)
InsertFieldsIntoBundleAlg_swigregister = _sr_py.InsertFieldsIntoBundleAlg_swigregister
InsertFieldsIntoBundleAlg_swigregister(InsertFieldsIntoBundleAlg)

get_insert_fields_into_bundle_alg = _sr_py.get_insert_fields_into_bundle_alg
class InsertMatricesIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertMatricesIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertMatricesIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertMatricesIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertMatricesIntoBundleAlg
    __del__ = lambda self : None;
    def get_p_bundlename(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_bundlename(*args)
    def get_p_matrix1_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_matrix1_name(*args)
    def get_p_matrix2_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_matrix2_name(*args)
    def get_p_matrix3_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_matrix3_name(*args)
    def get_p_matrix4_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_matrix4_name(*args)
    def get_p_matrix5_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_matrix5_name(*args)
    def get_p_matrix6_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_matrix6_name(*args)
    def get_p_replace1(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_replace1(*args)
    def get_p_replace2(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_replace2(*args)
    def get_p_replace3(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_replace3(*args)
    def get_p_replace4(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_replace4(*args)
    def get_p_replace5(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_replace5(*args)
    def get_p_replace6(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_p_replace6(*args)
    def get_progress_reporter(*args): return _sr_py.InsertMatricesIntoBundleAlg_get_progress_reporter(*args)
    def set_p_bundlename(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_bundlename(*args)
    def set_p_matrix1_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_matrix1_name(*args)
    def set_p_matrix2_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_matrix2_name(*args)
    def set_p_matrix3_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_matrix3_name(*args)
    def set_p_matrix4_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_matrix4_name(*args)
    def set_p_matrix5_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_matrix5_name(*args)
    def set_p_matrix6_name(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_matrix6_name(*args)
    def set_p_replace1(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_replace1(*args)
    def set_p_replace2(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_replace2(*args)
    def set_p_replace3(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_replace3(*args)
    def set_p_replace4(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_replace4(*args)
    def set_p_replace5(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_replace5(*args)
    def set_p_replace6(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_p_replace6(*args)
    def set_progress_reporter(*args): return _sr_py.InsertMatricesIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertMatricesIntoBundleAlg_execute(*args)
InsertMatricesIntoBundleAlg_swigregister = _sr_py.InsertMatricesIntoBundleAlg_swigregister
InsertMatricesIntoBundleAlg_swigregister(InsertMatricesIntoBundleAlg)

get_insert_matrices_into_bundle_alg = _sr_py.get_insert_matrices_into_bundle_alg
class InsertNrrdsIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertNrrdsIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertNrrdsIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertNrrdsIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertNrrdsIntoBundleAlg
    __del__ = lambda self : None;
    def get_p_bundlename(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_bundlename(*args)
    def get_p_nrrd1_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_nrrd1_name(*args)
    def get_p_nrrd2_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_nrrd2_name(*args)
    def get_p_nrrd3_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_nrrd3_name(*args)
    def get_p_nrrd4_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_nrrd4_name(*args)
    def get_p_nrrd5_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_nrrd5_name(*args)
    def get_p_nrrd6_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_nrrd6_name(*args)
    def get_p_replace1(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_replace1(*args)
    def get_p_replace2(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_replace2(*args)
    def get_p_replace3(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_replace3(*args)
    def get_p_replace4(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_replace4(*args)
    def get_p_replace5(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_replace5(*args)
    def get_p_replace6(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_p_replace6(*args)
    def get_progress_reporter(*args): return _sr_py.InsertNrrdsIntoBundleAlg_get_progress_reporter(*args)
    def set_p_bundlename(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_bundlename(*args)
    def set_p_nrrd1_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_nrrd1_name(*args)
    def set_p_nrrd2_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_nrrd2_name(*args)
    def set_p_nrrd3_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_nrrd3_name(*args)
    def set_p_nrrd4_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_nrrd4_name(*args)
    def set_p_nrrd5_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_nrrd5_name(*args)
    def set_p_nrrd6_name(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_nrrd6_name(*args)
    def set_p_replace1(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_replace1(*args)
    def set_p_replace2(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_replace2(*args)
    def set_p_replace3(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_replace3(*args)
    def set_p_replace4(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_replace4(*args)
    def set_p_replace5(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_replace5(*args)
    def set_p_replace6(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_p_replace6(*args)
    def set_progress_reporter(*args): return _sr_py.InsertNrrdsIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertNrrdsIntoBundleAlg_execute(*args)
InsertNrrdsIntoBundleAlg_swigregister = _sr_py.InsertNrrdsIntoBundleAlg_swigregister
InsertNrrdsIntoBundleAlg_swigregister(InsertNrrdsIntoBundleAlg)

get_insert_nrrds_into_bundle_alg = _sr_py.get_insert_nrrds_into_bundle_alg
class InsertPathsIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertPathsIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertPathsIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertPathsIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertPathsIntoBundleAlg
    __del__ = lambda self : None;
    def get_p_bundlename(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_bundlename(*args)
    def get_p_path1_name(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_path1_name(*args)
    def get_p_path2_name(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_path2_name(*args)
    def get_p_path3_name(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_path3_name(*args)
    def get_p_path4_name(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_path4_name(*args)
    def get_p_path5_name(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_path5_name(*args)
    def get_p_path6_name(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_path6_name(*args)
    def get_p_replace1(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_replace1(*args)
    def get_p_replace2(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_replace2(*args)
    def get_p_replace3(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_replace3(*args)
    def get_p_replace4(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_replace4(*args)
    def get_p_replace5(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_replace5(*args)
    def get_p_replace6(*args): return _sr_py.InsertPathsIntoBundleAlg_get_p_replace6(*args)
    def get_progress_reporter(*args): return _sr_py.InsertPathsIntoBundleAlg_get_progress_reporter(*args)
    def set_p_bundlename(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_bundlename(*args)
    def set_p_path1_name(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_path1_name(*args)
    def set_p_path2_name(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_path2_name(*args)
    def set_p_path3_name(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_path3_name(*args)
    def set_p_path4_name(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_path4_name(*args)
    def set_p_path5_name(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_path5_name(*args)
    def set_p_path6_name(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_path6_name(*args)
    def set_p_replace1(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_replace1(*args)
    def set_p_replace2(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_replace2(*args)
    def set_p_replace3(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_replace3(*args)
    def set_p_replace4(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_replace4(*args)
    def set_p_replace5(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_replace5(*args)
    def set_p_replace6(*args): return _sr_py.InsertPathsIntoBundleAlg_set_p_replace6(*args)
    def set_progress_reporter(*args): return _sr_py.InsertPathsIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertPathsIntoBundleAlg_execute(*args)
InsertPathsIntoBundleAlg_swigregister = _sr_py.InsertPathsIntoBundleAlg_swigregister
InsertPathsIntoBundleAlg_swigregister(InsertPathsIntoBundleAlg)

get_insert_paths_into_bundle_alg = _sr_py.get_insert_paths_into_bundle_alg
class InsertStringsIntoBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertStringsIntoBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertStringsIntoBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertStringsIntoBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertStringsIntoBundleAlg
    __del__ = lambda self : None;
    def get_p_replace1(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_replace1(*args)
    def get_p_replace2(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_replace2(*args)
    def get_p_replace3(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_replace3(*args)
    def get_p_replace4(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_replace4(*args)
    def get_p_replace5(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_replace5(*args)
    def get_p_replace6(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_replace6(*args)
    def get_p_string1_name(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_string1_name(*args)
    def get_p_string2_name(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_string2_name(*args)
    def get_p_string3_name(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_string3_name(*args)
    def get_p_string4_name(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_string4_name(*args)
    def get_p_string5_name(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_string5_name(*args)
    def get_p_string6_name(*args): return _sr_py.InsertStringsIntoBundleAlg_get_p_string6_name(*args)
    def get_progress_reporter(*args): return _sr_py.InsertStringsIntoBundleAlg_get_progress_reporter(*args)
    def set_p_replace1(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_replace1(*args)
    def set_p_replace2(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_replace2(*args)
    def set_p_replace3(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_replace3(*args)
    def set_p_replace4(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_replace4(*args)
    def set_p_replace5(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_replace5(*args)
    def set_p_replace6(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_replace6(*args)
    def set_p_string1_name(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_string1_name(*args)
    def set_p_string2_name(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_string2_name(*args)
    def set_p_string3_name(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_string3_name(*args)
    def set_p_string4_name(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_string4_name(*args)
    def set_p_string5_name(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_string5_name(*args)
    def set_p_string6_name(*args): return _sr_py.InsertStringsIntoBundleAlg_set_p_string6_name(*args)
    def set_progress_reporter(*args): return _sr_py.InsertStringsIntoBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertStringsIntoBundleAlg_execute(*args)
InsertStringsIntoBundleAlg_swigregister = _sr_py.InsertStringsIntoBundleAlg_swigregister
InsertStringsIntoBundleAlg_swigregister(InsertStringsIntoBundleAlg)

get_insert_strings_into_bundle_alg = _sr_py.get_insert_strings_into_bundle_alg
class JoinBundlesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JoinBundlesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JoinBundlesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_JoinBundlesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_JoinBundlesAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.JoinBundlesAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.JoinBundlesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.JoinBundlesAlg_execute(*args)
JoinBundlesAlg_swigregister = _sr_py.JoinBundlesAlg_swigregister
JoinBundlesAlg_swigregister(JoinBundlesAlg)

get_join_bundles_alg = _sr_py.get_join_bundles_alg
class ReportBundleInfoAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportBundleInfoAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportBundleInfoAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportBundleInfoAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportBundleInfoAlg
    __del__ = lambda self : None;
    def get_p_tclinfostring(*args): return _sr_py.ReportBundleInfoAlg_get_p_tclinfostring(*args)
    def get_progress_reporter(*args): return _sr_py.ReportBundleInfoAlg_get_progress_reporter(*args)
    def set_p_tclinfostring(*args): return _sr_py.ReportBundleInfoAlg_set_p_tclinfostring(*args)
    def set_progress_reporter(*args): return _sr_py.ReportBundleInfoAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportBundleInfoAlg_execute(*args)
ReportBundleInfoAlg_swigregister = _sr_py.ReportBundleInfoAlg_swigregister
ReportBundleInfoAlg_swigregister(ReportBundleInfoAlg)

get_report_bundle_info_alg = _sr_py.get_report_bundle_info_alg
class ApplyFilterToFieldDataAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplyFilterToFieldDataAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplyFilterToFieldDataAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ApplyFilterToFieldDataAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ApplyFilterToFieldDataAlg
    __del__ = lambda self : None;
    def get_p_ed_iterations(*args): return _sr_py.ApplyFilterToFieldDataAlg_get_p_ed_iterations(*args)
    def get_p_ed_method(*args): return _sr_py.ApplyFilterToFieldDataAlg_get_p_ed_method(*args)
    def get_p_method(*args): return _sr_py.ApplyFilterToFieldDataAlg_get_p_method(*args)
    def get_progress_reporter(*args): return _sr_py.ApplyFilterToFieldDataAlg_get_progress_reporter(*args)
    def set_p_ed_iterations(*args): return _sr_py.ApplyFilterToFieldDataAlg_set_p_ed_iterations(*args)
    def set_p_ed_method(*args): return _sr_py.ApplyFilterToFieldDataAlg_set_p_ed_method(*args)
    def set_p_method(*args): return _sr_py.ApplyFilterToFieldDataAlg_set_p_method(*args)
    def set_progress_reporter(*args): return _sr_py.ApplyFilterToFieldDataAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ApplyFilterToFieldDataAlg_execute(*args)
ApplyFilterToFieldDataAlg_swigregister = _sr_py.ApplyFilterToFieldDataAlg_swigregister
ApplyFilterToFieldDataAlg_swigregister(ApplyFilterToFieldDataAlg)

get_apply_filter_to_field_data_alg = _sr_py.get_apply_filter_to_field_data_alg
class ApplyMappingMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplyMappingMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplyMappingMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ApplyMappingMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ApplyMappingMatrixAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ApplyMappingMatrixAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ApplyMappingMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ApplyMappingMatrixAlg_execute(*args)
ApplyMappingMatrixAlg_swigregister = _sr_py.ApplyMappingMatrixAlg_swigregister
ApplyMappingMatrixAlg_swigregister(ApplyMappingMatrixAlg)

get_apply_mapping_matrix_alg = _sr_py.get_apply_mapping_matrix_alg
class CalculateDistanceToFieldBoundaryAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateDistanceToFieldBoundaryAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateDistanceToFieldBoundaryAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateDistanceToFieldBoundaryAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateDistanceToFieldBoundaryAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CalculateDistanceToFieldBoundaryAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateDistanceToFieldBoundaryAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateDistanceToFieldBoundaryAlg_execute(*args)
CalculateDistanceToFieldBoundaryAlg_swigregister = _sr_py.CalculateDistanceToFieldBoundaryAlg_swigregister
CalculateDistanceToFieldBoundaryAlg_swigregister(CalculateDistanceToFieldBoundaryAlg)

get_calculate_distance_to_field_boundary_alg = _sr_py.get_calculate_distance_to_field_boundary_alg
class CalculateDistanceToFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateDistanceToFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateDistanceToFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateDistanceToFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateDistanceToFieldAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CalculateDistanceToFieldAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateDistanceToFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateDistanceToFieldAlg_execute(*args)
CalculateDistanceToFieldAlg_swigregister = _sr_py.CalculateDistanceToFieldAlg_swigregister
CalculateDistanceToFieldAlg_swigregister(CalculateDistanceToFieldAlg)

get_calculate_distance_to_field_alg = _sr_py.get_calculate_distance_to_field_alg
class CalculateFieldData2Alg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateFieldData2Alg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateFieldData2Alg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateFieldData2Alg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateFieldData2Alg
    __del__ = lambda self : None;
    def get_p_format(*args): return _sr_py.CalculateFieldData2Alg_get_p_format(*args)
    def get_p_function(*args): return _sr_py.CalculateFieldData2Alg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.CalculateFieldData2Alg_get_progress_reporter(*args)
    def set_p_format(*args): return _sr_py.CalculateFieldData2Alg_set_p_format(*args)
    def set_p_function(*args): return _sr_py.CalculateFieldData2Alg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateFieldData2Alg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateFieldData2Alg_execute(*args)
CalculateFieldData2Alg_swigregister = _sr_py.CalculateFieldData2Alg_swigregister
CalculateFieldData2Alg_swigregister(CalculateFieldData2Alg)

get_calculate_field_data2_alg = _sr_py.get_calculate_field_data2_alg
class CalculateFieldData3Alg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateFieldData3Alg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateFieldData3Alg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateFieldData3Alg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateFieldData3Alg
    __del__ = lambda self : None;
    def get_p_format(*args): return _sr_py.CalculateFieldData3Alg_get_p_format(*args)
    def get_p_function(*args): return _sr_py.CalculateFieldData3Alg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.CalculateFieldData3Alg_get_progress_reporter(*args)
    def set_p_format(*args): return _sr_py.CalculateFieldData3Alg_set_p_format(*args)
    def set_p_function(*args): return _sr_py.CalculateFieldData3Alg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateFieldData3Alg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateFieldData3Alg_execute(*args)
CalculateFieldData3Alg_swigregister = _sr_py.CalculateFieldData3Alg_swigregister
CalculateFieldData3Alg_swigregister(CalculateFieldData3Alg)

get_calculate_field_data3_alg = _sr_py.get_calculate_field_data3_alg
class CalculateFieldDataCompiledAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateFieldDataCompiledAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateFieldDataCompiledAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateFieldDataCompiledAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateFieldDataCompiledAlg
    __del__ = lambda self : None;
    def get_p_cache(*args): return _sr_py.CalculateFieldDataCompiledAlg_get_p_cache(*args)
    def get_p_function(*args): return _sr_py.CalculateFieldDataCompiledAlg_get_p_function(*args)
    def get_p_outputdatatype(*args): return _sr_py.CalculateFieldDataCompiledAlg_get_p_outputdatatype(*args)
    def get_progress_reporter(*args): return _sr_py.CalculateFieldDataCompiledAlg_get_progress_reporter(*args)
    def set_p_cache(*args): return _sr_py.CalculateFieldDataCompiledAlg_set_p_cache(*args)
    def set_p_function(*args): return _sr_py.CalculateFieldDataCompiledAlg_set_p_function(*args)
    def set_p_outputdatatype(*args): return _sr_py.CalculateFieldDataCompiledAlg_set_p_outputdatatype(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateFieldDataCompiledAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateFieldDataCompiledAlg_execute(*args)
CalculateFieldDataCompiledAlg_swigregister = _sr_py.CalculateFieldDataCompiledAlg_swigregister
CalculateFieldDataCompiledAlg_swigregister(CalculateFieldDataCompiledAlg)

get_calculate_field_data_compiled_alg = _sr_py.get_calculate_field_data_compiled_alg
class CalculateFieldDataAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateFieldDataAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateFieldDataAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateFieldDataAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateFieldDataAlg
    __del__ = lambda self : None;
    def get_p_format(*args): return _sr_py.CalculateFieldDataAlg_get_p_format(*args)
    def get_p_function(*args): return _sr_py.CalculateFieldDataAlg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.CalculateFieldDataAlg_get_progress_reporter(*args)
    def set_p_format(*args): return _sr_py.CalculateFieldDataAlg_set_p_format(*args)
    def set_p_function(*args): return _sr_py.CalculateFieldDataAlg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateFieldDataAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateFieldDataAlg_execute(*args)
CalculateFieldDataAlg_swigregister = _sr_py.CalculateFieldDataAlg_swigregister
CalculateFieldDataAlg_swigregister(CalculateFieldDataAlg)

get_calculate_field_data_alg = _sr_py.get_calculate_field_data_alg
class CalculateGradientsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateGradientsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateGradientsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateGradientsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateGradientsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CalculateGradientsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateGradientsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateGradientsAlg_execute(*args)
CalculateGradientsAlg_swigregister = _sr_py.CalculateGradientsAlg_swigregister
CalculateGradientsAlg_swigregister(CalculateGradientsAlg)

get_calculate_gradients_alg = _sr_py.get_calculate_gradients_alg
class CalculateInsideWhichFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateInsideWhichFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateInsideWhichFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateInsideWhichFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateInsideWhichFieldAlg
    __del__ = lambda self : None;
    def get_p_outputbasis(*args): return _sr_py.CalculateInsideWhichFieldAlg_get_p_outputbasis(*args)
    def get_p_outputtype(*args): return _sr_py.CalculateInsideWhichFieldAlg_get_p_outputtype(*args)
    def get_progress_reporter(*args): return _sr_py.CalculateInsideWhichFieldAlg_get_progress_reporter(*args)
    def set_p_outputbasis(*args): return _sr_py.CalculateInsideWhichFieldAlg_set_p_outputbasis(*args)
    def set_p_outputtype(*args): return _sr_py.CalculateInsideWhichFieldAlg_set_p_outputtype(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateInsideWhichFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateInsideWhichFieldAlg_execute(*args)
CalculateInsideWhichFieldAlg_swigregister = _sr_py.CalculateInsideWhichFieldAlg_swigregister
CalculateInsideWhichFieldAlg_swigregister(CalculateInsideWhichFieldAlg)

get_calculate_inside_which_field_alg = _sr_py.get_calculate_inside_which_field_alg
class CalculateIsInsideFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateIsInsideFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateIsInsideFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateIsInsideFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateIsInsideFieldAlg
    __del__ = lambda self : None;
    def get_p_inval(*args): return _sr_py.CalculateIsInsideFieldAlg_get_p_inval(*args)
    def get_p_outputtype(*args): return _sr_py.CalculateIsInsideFieldAlg_get_p_outputtype(*args)
    def get_p_outval(*args): return _sr_py.CalculateIsInsideFieldAlg_get_p_outval(*args)
    def get_progress_reporter(*args): return _sr_py.CalculateIsInsideFieldAlg_get_progress_reporter(*args)
    def set_p_inval(*args): return _sr_py.CalculateIsInsideFieldAlg_set_p_inval(*args)
    def set_p_outputtype(*args): return _sr_py.CalculateIsInsideFieldAlg_set_p_outputtype(*args)
    def set_p_outval(*args): return _sr_py.CalculateIsInsideFieldAlg_set_p_outval(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateIsInsideFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateIsInsideFieldAlg_execute(*args)
CalculateIsInsideFieldAlg_swigregister = _sr_py.CalculateIsInsideFieldAlg_swigregister
CalculateIsInsideFieldAlg_swigregister(CalculateIsInsideFieldAlg)

get_calculate_is_inside_field_alg = _sr_py.get_calculate_is_inside_field_alg
class CalculateLatVolGradientsAtNodesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateLatVolGradientsAtNodesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateLatVolGradientsAtNodesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateLatVolGradientsAtNodesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateLatVolGradientsAtNodesAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CalculateLatVolGradientsAtNodesAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateLatVolGradientsAtNodesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateLatVolGradientsAtNodesAlg_execute(*args)
CalculateLatVolGradientsAtNodesAlg_swigregister = _sr_py.CalculateLatVolGradientsAtNodesAlg_swigregister
CalculateLatVolGradientsAtNodesAlg_swigregister(CalculateLatVolGradientsAtNodesAlg)

get_calculate_lat_vol_gradients_at_nodes_alg = _sr_py.get_calculate_lat_vol_gradients_at_nodes_alg
class CalculateNodeNormalsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateNodeNormalsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateNodeNormalsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateNodeNormalsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateNodeNormalsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CalculateNodeNormalsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateNodeNormalsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateNodeNormalsAlg_execute(*args)
CalculateNodeNormalsAlg_swigregister = _sr_py.CalculateNodeNormalsAlg_swigregister
CalculateNodeNormalsAlg_swigregister(CalculateNodeNormalsAlg)

get_calculate_node_normals_alg = _sr_py.get_calculate_node_normals_alg
class CalculateSignedDistanceToFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateSignedDistanceToFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateSignedDistanceToFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateSignedDistanceToFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateSignedDistanceToFieldAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CalculateSignedDistanceToFieldAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateSignedDistanceToFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateSignedDistanceToFieldAlg_execute(*args)
CalculateSignedDistanceToFieldAlg_swigregister = _sr_py.CalculateSignedDistanceToFieldAlg_swigregister
CalculateSignedDistanceToFieldAlg_swigregister(CalculateSignedDistanceToFieldAlg)

get_calculate_signed_distance_to_field_alg = _sr_py.get_calculate_signed_distance_to_field_alg
class CalculateVectorMagnitudesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateVectorMagnitudesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateVectorMagnitudesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateVectorMagnitudesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateVectorMagnitudesAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CalculateVectorMagnitudesAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateVectorMagnitudesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateVectorMagnitudesAlg_execute(*args)
CalculateVectorMagnitudesAlg_swigregister = _sr_py.CalculateVectorMagnitudesAlg_swigregister
CalculateVectorMagnitudesAlg_swigregister(CalculateVectorMagnitudesAlg)

get_calculate_vector_magnitudes_alg = _sr_py.get_calculate_vector_magnitudes_alg
class ConvertFieldBasisAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertFieldBasisAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertFieldBasisAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertFieldBasisAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertFieldBasisAlg
    __del__ = lambda self : None;
    def get_p_output_basis(*args): return _sr_py.ConvertFieldBasisAlg_get_p_output_basis(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertFieldBasisAlg_get_progress_reporter(*args)
    def set_p_output_basis(*args): return _sr_py.ConvertFieldBasisAlg_set_p_output_basis(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertFieldBasisAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertFieldBasisAlg_execute(*args)
ConvertFieldBasisAlg_swigregister = _sr_py.ConvertFieldBasisAlg_swigregister
ConvertFieldBasisAlg_swigregister(ConvertFieldBasisAlg)

get_convert_field_basis_alg = _sr_py.get_convert_field_basis_alg
class ConvertFieldDataTypeAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertFieldDataTypeAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertFieldDataTypeAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertFieldDataTypeAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertFieldDataTypeAlg
    __del__ = lambda self : None;
    def get_p_outputdatatype(*args): return _sr_py.ConvertFieldDataTypeAlg_get_p_outputdatatype(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertFieldDataTypeAlg_get_progress_reporter(*args)
    def set_p_outputdatatype(*args): return _sr_py.ConvertFieldDataTypeAlg_set_p_outputdatatype(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertFieldDataTypeAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertFieldDataTypeAlg_execute(*args)
ConvertFieldDataTypeAlg_swigregister = _sr_py.ConvertFieldDataTypeAlg_swigregister
ConvertFieldDataTypeAlg_swigregister(ConvertFieldDataTypeAlg)

get_convert_field_data_type_alg = _sr_py.get_convert_field_data_type_alg
class ConvertIndicesToFieldDataAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertIndicesToFieldDataAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertIndicesToFieldDataAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertIndicesToFieldDataAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertIndicesToFieldDataAlg
    __del__ = lambda self : None;
    def get_p_outputtype(*args): return _sr_py.ConvertIndicesToFieldDataAlg_get_p_outputtype(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertIndicesToFieldDataAlg_get_progress_reporter(*args)
    def set_p_outputtype(*args): return _sr_py.ConvertIndicesToFieldDataAlg_set_p_outputtype(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertIndicesToFieldDataAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertIndicesToFieldDataAlg_execute(*args)
ConvertIndicesToFieldDataAlg_swigregister = _sr_py.ConvertIndicesToFieldDataAlg_swigregister
ConvertIndicesToFieldDataAlg_swigregister(ConvertIndicesToFieldDataAlg)

get_convert_indices_to_field_data_alg = _sr_py.get_convert_indices_to_field_data_alg
class ConvertLatVolDataFromElemToNodeAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertLatVolDataFromElemToNodeAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertLatVolDataFromElemToNodeAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertLatVolDataFromElemToNodeAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertLatVolDataFromElemToNodeAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertLatVolDataFromElemToNodeAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertLatVolDataFromElemToNodeAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertLatVolDataFromElemToNodeAlg_execute(*args)
ConvertLatVolDataFromElemToNodeAlg_swigregister = _sr_py.ConvertLatVolDataFromElemToNodeAlg_swigregister
ConvertLatVolDataFromElemToNodeAlg_swigregister(ConvertLatVolDataFromElemToNodeAlg)

get_convert_lat_vol_data_from_elem_to_node_alg = _sr_py.get_convert_lat_vol_data_from_elem_to_node_alg
class ConvertLatVolDataFromNodeToElemAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertLatVolDataFromNodeToElemAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertLatVolDataFromNodeToElemAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertLatVolDataFromNodeToElemAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertLatVolDataFromNodeToElemAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertLatVolDataFromNodeToElemAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertLatVolDataFromNodeToElemAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertLatVolDataFromNodeToElemAlg_execute(*args)
ConvertLatVolDataFromNodeToElemAlg_swigregister = _sr_py.ConvertLatVolDataFromNodeToElemAlg_swigregister
ConvertLatVolDataFromNodeToElemAlg_swigregister(ConvertLatVolDataFromNodeToElemAlg)

get_convert_lat_vol_data_from_node_to_elem_alg = _sr_py.get_convert_lat_vol_data_from_node_to_elem_alg
class CreateFieldDataAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateFieldDataAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateFieldDataAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateFieldDataAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateFieldDataAlg
    __del__ = lambda self : None;
    def get_p_basis(*args): return _sr_py.CreateFieldDataAlg_get_p_basis(*args)
    def get_p_format(*args): return _sr_py.CreateFieldDataAlg_get_p_format(*args)
    def get_p_function(*args): return _sr_py.CreateFieldDataAlg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.CreateFieldDataAlg_get_progress_reporter(*args)
    def set_p_basis(*args): return _sr_py.CreateFieldDataAlg_set_p_basis(*args)
    def set_p_format(*args): return _sr_py.CreateFieldDataAlg_set_p_format(*args)
    def set_p_function(*args): return _sr_py.CreateFieldDataAlg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.CreateFieldDataAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateFieldDataAlg_execute(*args)
CreateFieldDataAlg_swigregister = _sr_py.CreateFieldDataAlg_swigregister
CreateFieldDataAlg_swigregister(CreateFieldDataAlg)

get_create_field_data_alg = _sr_py.get_create_field_data_alg
class GetFieldDataAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetFieldDataAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetFieldDataAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetFieldDataAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetFieldDataAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.GetFieldDataAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.GetFieldDataAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetFieldDataAlg_execute(*args)
GetFieldDataAlg_swigregister = _sr_py.GetFieldDataAlg_swigregister
GetFieldDataAlg_swigregister(GetFieldDataAlg)

get_get_field_data_alg = _sr_py.get_get_field_data_alg
class MapFieldDataFromElemToNodeAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapFieldDataFromElemToNodeAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapFieldDataFromElemToNodeAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_MapFieldDataFromElemToNodeAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_MapFieldDataFromElemToNodeAlg
    __del__ = lambda self : None;
    def get_p_method(*args): return _sr_py.MapFieldDataFromElemToNodeAlg_get_p_method(*args)
    def get_progress_reporter(*args): return _sr_py.MapFieldDataFromElemToNodeAlg_get_progress_reporter(*args)
    def set_p_method(*args): return _sr_py.MapFieldDataFromElemToNodeAlg_set_p_method(*args)
    def set_progress_reporter(*args): return _sr_py.MapFieldDataFromElemToNodeAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.MapFieldDataFromElemToNodeAlg_execute(*args)
MapFieldDataFromElemToNodeAlg_swigregister = _sr_py.MapFieldDataFromElemToNodeAlg_swigregister
MapFieldDataFromElemToNodeAlg_swigregister(MapFieldDataFromElemToNodeAlg)

get_map_field_data_from_elem_to_node_alg = _sr_py.get_map_field_data_from_elem_to_node_alg
class MapFieldDataFromNodeToElemAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapFieldDataFromNodeToElemAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapFieldDataFromNodeToElemAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_MapFieldDataFromNodeToElemAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_MapFieldDataFromNodeToElemAlg
    __del__ = lambda self : None;
    def get_p_method(*args): return _sr_py.MapFieldDataFromNodeToElemAlg_get_p_method(*args)
    def get_progress_reporter(*args): return _sr_py.MapFieldDataFromNodeToElemAlg_get_progress_reporter(*args)
    def set_p_method(*args): return _sr_py.MapFieldDataFromNodeToElemAlg_set_p_method(*args)
    def set_progress_reporter(*args): return _sr_py.MapFieldDataFromNodeToElemAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.MapFieldDataFromNodeToElemAlg_execute(*args)
MapFieldDataFromNodeToElemAlg_swigregister = _sr_py.MapFieldDataFromNodeToElemAlg_swigregister
MapFieldDataFromNodeToElemAlg_swigregister(MapFieldDataFromNodeToElemAlg)

get_map_field_data_from_node_to_elem_alg = _sr_py.get_map_field_data_from_node_to_elem_alg
class MapFieldDataFromSourceToDestinationAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapFieldDataFromSourceToDestinationAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapFieldDataFromSourceToDestinationAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_MapFieldDataFromSourceToDestinationAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_MapFieldDataFromSourceToDestinationAlg
    __del__ = lambda self : None;
    def get_p_exhaustive_search(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_get_p_exhaustive_search(*args)
    def get_p_exhaustive_search_max_dist(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_get_p_exhaustive_search_max_dist(*args)
    def get_p_interpolation_basis(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_get_p_interpolation_basis(*args)
    def get_p_map_source_to_single_dest(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_get_p_map_source_to_single_dest(*args)
    def get_p_np(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_get_p_np(*args)
    def get_progress_reporter(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_get_progress_reporter(*args)
    def set_p_exhaustive_search(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_set_p_exhaustive_search(*args)
    def set_p_exhaustive_search_max_dist(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_set_p_exhaustive_search_max_dist(*args)
    def set_p_interpolation_basis(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_set_p_interpolation_basis(*args)
    def set_p_map_source_to_single_dest(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_set_p_map_source_to_single_dest(*args)
    def set_p_np(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_set_p_np(*args)
    def set_progress_reporter(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.MapFieldDataFromSourceToDestinationAlg_execute(*args)
MapFieldDataFromSourceToDestinationAlg_swigregister = _sr_py.MapFieldDataFromSourceToDestinationAlg_swigregister
MapFieldDataFromSourceToDestinationAlg_swigregister(MapFieldDataFromSourceToDestinationAlg)

get_map_field_data_from_source_to_destination_alg = _sr_py.get_map_field_data_from_source_to_destination_alg
class MaskLatVolWithTriSurfAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaskLatVolWithTriSurfAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaskLatVolWithTriSurfAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_MaskLatVolWithTriSurfAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_MaskLatVolWithTriSurfAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.MaskLatVolWithTriSurfAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.MaskLatVolWithTriSurfAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.MaskLatVolWithTriSurfAlg_execute(*args)
MaskLatVolWithTriSurfAlg_swigregister = _sr_py.MaskLatVolWithTriSurfAlg_swigregister
MaskLatVolWithTriSurfAlg_swigregister(MaskLatVolWithTriSurfAlg)

get_mask_lat_vol_with_tri_surf_alg = _sr_py.get_mask_lat_vol_with_tri_surf_alg
class ReportMeshQualityMeasuresAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportMeshQualityMeasuresAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportMeshQualityMeasuresAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportMeshQualityMeasuresAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportMeshQualityMeasuresAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ReportMeshQualityMeasuresAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ReportMeshQualityMeasuresAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportMeshQualityMeasuresAlg_execute(*args)
ReportMeshQualityMeasuresAlg_swigregister = _sr_py.ReportMeshQualityMeasuresAlg_swigregister
ReportMeshQualityMeasuresAlg_swigregister(ReportMeshQualityMeasuresAlg)

get_report_mesh_quality_measures_alg = _sr_py.get_report_mesh_quality_measures_alg
class SelectAndSetFieldData3Alg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SelectAndSetFieldData3Alg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SelectAndSetFieldData3Alg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SelectAndSetFieldData3Alg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SelectAndSetFieldData3Alg
    __del__ = lambda self : None;
    def get_p_format(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_format(*args)
    def get_p_function1(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_function1(*args)
    def get_p_function2(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_function2(*args)
    def get_p_function3(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_function3(*args)
    def get_p_function4(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_function4(*args)
    def get_p_functiondef(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_functiondef(*args)
    def get_p_selection1(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_selection1(*args)
    def get_p_selection2(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_selection2(*args)
    def get_p_selection3(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_selection3(*args)
    def get_p_selection4(*args): return _sr_py.SelectAndSetFieldData3Alg_get_p_selection4(*args)
    def get_progress_reporter(*args): return _sr_py.SelectAndSetFieldData3Alg_get_progress_reporter(*args)
    def set_p_format(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_format(*args)
    def set_p_function1(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_function1(*args)
    def set_p_function2(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_function2(*args)
    def set_p_function3(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_function3(*args)
    def set_p_function4(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_function4(*args)
    def set_p_functiondef(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_functiondef(*args)
    def set_p_selection1(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_selection1(*args)
    def set_p_selection2(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_selection2(*args)
    def set_p_selection3(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_selection3(*args)
    def set_p_selection4(*args): return _sr_py.SelectAndSetFieldData3Alg_set_p_selection4(*args)
    def set_progress_reporter(*args): return _sr_py.SelectAndSetFieldData3Alg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SelectAndSetFieldData3Alg_execute(*args)
SelectAndSetFieldData3Alg_swigregister = _sr_py.SelectAndSetFieldData3Alg_swigregister
SelectAndSetFieldData3Alg_swigregister(SelectAndSetFieldData3Alg)

get_select_and_set_field_data3_alg = _sr_py.get_select_and_set_field_data3_alg
class SelectAndSetFieldDataAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SelectAndSetFieldDataAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SelectAndSetFieldDataAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SelectAndSetFieldDataAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SelectAndSetFieldDataAlg
    __del__ = lambda self : None;
    def get_p_format(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_format(*args)
    def get_p_function1(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_function1(*args)
    def get_p_function2(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_function2(*args)
    def get_p_function3(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_function3(*args)
    def get_p_function4(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_function4(*args)
    def get_p_functiondef(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_functiondef(*args)
    def get_p_selection1(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_selection1(*args)
    def get_p_selection2(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_selection2(*args)
    def get_p_selection3(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_selection3(*args)
    def get_p_selection4(*args): return _sr_py.SelectAndSetFieldDataAlg_get_p_selection4(*args)
    def get_progress_reporter(*args): return _sr_py.SelectAndSetFieldDataAlg_get_progress_reporter(*args)
    def set_p_format(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_format(*args)
    def set_p_function1(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_function1(*args)
    def set_p_function2(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_function2(*args)
    def set_p_function3(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_function3(*args)
    def set_p_function4(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_function4(*args)
    def set_p_functiondef(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_functiondef(*args)
    def set_p_selection1(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_selection1(*args)
    def set_p_selection2(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_selection2(*args)
    def set_p_selection3(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_selection3(*args)
    def set_p_selection4(*args): return _sr_py.SelectAndSetFieldDataAlg_set_p_selection4(*args)
    def set_progress_reporter(*args): return _sr_py.SelectAndSetFieldDataAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SelectAndSetFieldDataAlg_execute(*args)
SelectAndSetFieldDataAlg_swigregister = _sr_py.SelectAndSetFieldDataAlg_swigregister
SelectAndSetFieldDataAlg_swigregister(SelectAndSetFieldDataAlg)

get_select_and_set_field_data_alg = _sr_py.get_select_and_set_field_data_alg
class SetFieldDataAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetFieldDataAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetFieldDataAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SetFieldDataAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SetFieldDataAlg
    __del__ = lambda self : None;
    def get_p_keepscalartype(*args): return _sr_py.SetFieldDataAlg_get_p_keepscalartype(*args)
    def get_progress_reporter(*args): return _sr_py.SetFieldDataAlg_get_progress_reporter(*args)
    def set_p_keepscalartype(*args): return _sr_py.SetFieldDataAlg_set_p_keepscalartype(*args)
    def set_progress_reporter(*args): return _sr_py.SetFieldDataAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SetFieldDataAlg_execute(*args)
SetFieldDataAlg_swigregister = _sr_py.SetFieldDataAlg_swigregister
SetFieldDataAlg_swigregister(SetFieldDataAlg)

get_set_field_data_alg = _sr_py.get_set_field_data_alg
class SwapFieldDataWithMatrixEntriesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapFieldDataWithMatrixEntriesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwapFieldDataWithMatrixEntriesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SwapFieldDataWithMatrixEntriesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SwapFieldDataWithMatrixEntriesAlg
    __del__ = lambda self : None;
    def get_p_preserve_scalar_type(*args): return _sr_py.SwapFieldDataWithMatrixEntriesAlg_get_p_preserve_scalar_type(*args)
    def get_progress_reporter(*args): return _sr_py.SwapFieldDataWithMatrixEntriesAlg_get_progress_reporter(*args)
    def set_p_preserve_scalar_type(*args): return _sr_py.SwapFieldDataWithMatrixEntriesAlg_set_p_preserve_scalar_type(*args)
    def set_progress_reporter(*args): return _sr_py.SwapFieldDataWithMatrixEntriesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SwapFieldDataWithMatrixEntriesAlg_execute(*args)
SwapFieldDataWithMatrixEntriesAlg_swigregister = _sr_py.SwapFieldDataWithMatrixEntriesAlg_swigregister
SwapFieldDataWithMatrixEntriesAlg_swigregister(SwapFieldDataWithMatrixEntriesAlg)

get_swap_field_data_with_matrix_entries_alg = _sr_py.get_swap_field_data_with_matrix_entries_alg
class CalculateMeshNodesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateMeshNodesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateMeshNodesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateMeshNodesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateMeshNodesAlg
    __del__ = lambda self : None;
    def get_p_function(*args): return _sr_py.CalculateMeshNodesAlg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.CalculateMeshNodesAlg_get_progress_reporter(*args)
    def set_p_function(*args): return _sr_py.CalculateMeshNodesAlg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateMeshNodesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateMeshNodesAlg_execute(*args)
CalculateMeshNodesAlg_swigregister = _sr_py.CalculateMeshNodesAlg_swigregister
CalculateMeshNodesAlg_swigregister(CalculateMeshNodesAlg)

get_calculate_mesh_nodes_alg = _sr_py.get_calculate_mesh_nodes_alg
class ConvertHexVolToTetVolAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertHexVolToTetVolAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertHexVolToTetVolAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertHexVolToTetVolAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertHexVolToTetVolAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertHexVolToTetVolAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertHexVolToTetVolAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertHexVolToTetVolAlg_execute(*args)
ConvertHexVolToTetVolAlg_swigregister = _sr_py.ConvertHexVolToTetVolAlg_swigregister
ConvertHexVolToTetVolAlg_swigregister(ConvertHexVolToTetVolAlg)

get_convert_hex_vol_to_tet_vol_alg = _sr_py.get_convert_hex_vol_to_tet_vol_alg
class ConvertMeshCoordinateSystemAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMeshCoordinateSystemAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMeshCoordinateSystemAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMeshCoordinateSystemAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMeshCoordinateSystemAlg
    __del__ = lambda self : None;
    def get_p_newsystem(*args): return _sr_py.ConvertMeshCoordinateSystemAlg_get_p_newsystem(*args)
    def get_p_oldsystem(*args): return _sr_py.ConvertMeshCoordinateSystemAlg_get_p_oldsystem(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertMeshCoordinateSystemAlg_get_progress_reporter(*args)
    def set_p_newsystem(*args): return _sr_py.ConvertMeshCoordinateSystemAlg_set_p_newsystem(*args)
    def set_p_oldsystem(*args): return _sr_py.ConvertMeshCoordinateSystemAlg_set_p_oldsystem(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMeshCoordinateSystemAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMeshCoordinateSystemAlg_execute(*args)
ConvertMeshCoordinateSystemAlg_swigregister = _sr_py.ConvertMeshCoordinateSystemAlg_swigregister
ConvertMeshCoordinateSystemAlg_swigregister(ConvertMeshCoordinateSystemAlg)

get_convert_mesh_coordinate_system_alg = _sr_py.get_convert_mesh_coordinate_system_alg
class ConvertMeshToPointCloudAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMeshToPointCloudAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMeshToPointCloudAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMeshToPointCloudAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMeshToPointCloudAlg
    __del__ = lambda self : None;
    def get_p_datalocation(*args): return _sr_py.ConvertMeshToPointCloudAlg_get_p_datalocation(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertMeshToPointCloudAlg_get_progress_reporter(*args)
    def set_p_datalocation(*args): return _sr_py.ConvertMeshToPointCloudAlg_set_p_datalocation(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMeshToPointCloudAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMeshToPointCloudAlg_execute(*args)
ConvertMeshToPointCloudAlg_swigregister = _sr_py.ConvertMeshToPointCloudAlg_swigregister
ConvertMeshToPointCloudAlg_swigregister(ConvertMeshToPointCloudAlg)

get_convert_mesh_to_point_cloud_alg = _sr_py.get_convert_mesh_to_point_cloud_alg
class ConvertMeshToUnstructuredMeshAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMeshToUnstructuredMeshAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMeshToUnstructuredMeshAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMeshToUnstructuredMeshAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMeshToUnstructuredMeshAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertMeshToUnstructuredMeshAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMeshToUnstructuredMeshAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMeshToUnstructuredMeshAlg_execute(*args)
ConvertMeshToUnstructuredMeshAlg_swigregister = _sr_py.ConvertMeshToUnstructuredMeshAlg_swigregister
ConvertMeshToUnstructuredMeshAlg_swigregister(ConvertMeshToUnstructuredMeshAlg)

get_convert_mesh_to_unstructured_mesh_alg = _sr_py.get_convert_mesh_to_unstructured_mesh_alg
class ConvertQuadSurfToTriSurfAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertQuadSurfToTriSurfAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertQuadSurfToTriSurfAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertQuadSurfToTriSurfAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertQuadSurfToTriSurfAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertQuadSurfToTriSurfAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertQuadSurfToTriSurfAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertQuadSurfToTriSurfAlg_execute(*args)
ConvertQuadSurfToTriSurfAlg_swigregister = _sr_py.ConvertQuadSurfToTriSurfAlg_swigregister
ConvertQuadSurfToTriSurfAlg_swigregister(ConvertQuadSurfToTriSurfAlg)

get_convert_quad_surf_to_tri_surf_alg = _sr_py.get_convert_quad_surf_to_tri_surf_alg
class ConvertMeshToIrregularMeshAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMeshToIrregularMeshAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMeshToIrregularMeshAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMeshToIrregularMeshAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMeshToIrregularMeshAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertMeshToIrregularMeshAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMeshToIrregularMeshAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMeshToIrregularMeshAlg_execute(*args)
ConvertMeshToIrregularMeshAlg_swigregister = _sr_py.ConvertMeshToIrregularMeshAlg_swigregister
ConvertMeshToIrregularMeshAlg_swigregister(ConvertMeshToIrregularMeshAlg)

get_convert_mesh_to_irregular_mesh_alg = _sr_py.get_convert_mesh_to_irregular_mesh_alg
class EditMeshBoundingBoxAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EditMeshBoundingBoxAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EditMeshBoundingBoxAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_EditMeshBoundingBoxAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_EditMeshBoundingBoxAlg
    __del__ = lambda self : None;
    def get_p_box_center_x(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_center_x(*args)
    def get_p_box_center_y(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_center_y(*args)
    def get_p_box_center_z(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_center_z(*args)
    def get_p_box_down_x(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_down_x(*args)
    def get_p_box_down_y(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_down_y(*args)
    def get_p_box_down_z(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_down_z(*args)
    def get_p_box_in_x(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_in_x(*args)
    def get_p_box_in_y(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_in_y(*args)
    def get_p_box_in_z(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_in_z(*args)
    def get_p_box_mode(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_mode(*args)
    def get_p_box_real_scale(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_real_scale(*args)
    def get_p_box_right_x(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_right_x(*args)
    def get_p_box_right_y(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_right_y(*args)
    def get_p_box_right_z(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_right_z(*args)
    def get_p_box_scale(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_box_scale(*args)
    def get_p_outputcenterx(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_outputcenterx(*args)
    def get_p_outputcentery(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_outputcentery(*args)
    def get_p_outputcenterz(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_outputcenterz(*args)
    def get_p_outputsizex(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_outputsizex(*args)
    def get_p_outputsizey(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_outputsizey(*args)
    def get_p_outputsizez(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_outputsizez(*args)
    def get_p_useoutputcenter(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_useoutputcenter(*args)
    def get_p_useoutputsize(*args): return _sr_py.EditMeshBoundingBoxAlg_get_p_useoutputsize(*args)
    def get_progress_reporter(*args): return _sr_py.EditMeshBoundingBoxAlg_get_progress_reporter(*args)
    def set_p_box_center_x(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_center_x(*args)
    def set_p_box_center_y(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_center_y(*args)
    def set_p_box_center_z(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_center_z(*args)
    def set_p_box_down_x(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_down_x(*args)
    def set_p_box_down_y(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_down_y(*args)
    def set_p_box_down_z(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_down_z(*args)
    def set_p_box_in_x(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_in_x(*args)
    def set_p_box_in_y(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_in_y(*args)
    def set_p_box_in_z(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_in_z(*args)
    def set_p_box_mode(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_mode(*args)
    def set_p_box_real_scale(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_real_scale(*args)
    def set_p_box_right_x(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_right_x(*args)
    def set_p_box_right_y(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_right_y(*args)
    def set_p_box_right_z(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_right_z(*args)
    def set_p_box_scale(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_box_scale(*args)
    def set_p_outputcenterx(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_outputcenterx(*args)
    def set_p_outputcentery(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_outputcentery(*args)
    def set_p_outputcenterz(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_outputcenterz(*args)
    def set_p_outputsizex(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_outputsizex(*args)
    def set_p_outputsizey(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_outputsizey(*args)
    def set_p_outputsizez(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_outputsizez(*args)
    def set_p_useoutputcenter(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_useoutputcenter(*args)
    def set_p_useoutputsize(*args): return _sr_py.EditMeshBoundingBoxAlg_set_p_useoutputsize(*args)
    def set_progress_reporter(*args): return _sr_py.EditMeshBoundingBoxAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.EditMeshBoundingBoxAlg_execute(*args)
EditMeshBoundingBoxAlg_swigregister = _sr_py.EditMeshBoundingBoxAlg_swigregister
EditMeshBoundingBoxAlg_swigregister(EditMeshBoundingBoxAlg)

get_edit_mesh_bounding_box_alg = _sr_py.get_edit_mesh_bounding_box_alg
class MapFieldDataToNodeCoordinateAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapFieldDataToNodeCoordinateAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapFieldDataToNodeCoordinateAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_MapFieldDataToNodeCoordinateAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_MapFieldDataToNodeCoordinateAlg
    __del__ = lambda self : None;
    def get_p_coord(*args): return _sr_py.MapFieldDataToNodeCoordinateAlg_get_p_coord(*args)
    def get_progress_reporter(*args): return _sr_py.MapFieldDataToNodeCoordinateAlg_get_progress_reporter(*args)
    def set_p_coord(*args): return _sr_py.MapFieldDataToNodeCoordinateAlg_set_p_coord(*args)
    def set_progress_reporter(*args): return _sr_py.MapFieldDataToNodeCoordinateAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.MapFieldDataToNodeCoordinateAlg_execute(*args)
MapFieldDataToNodeCoordinateAlg_swigregister = _sr_py.MapFieldDataToNodeCoordinateAlg_swigregister
MapFieldDataToNodeCoordinateAlg_swigregister(MapFieldDataToNodeCoordinateAlg)

get_map_field_data_to_node_coordinate_alg = _sr_py.get_map_field_data_to_node_coordinate_alg
class ScaleFieldMeshAndDataAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleFieldMeshAndDataAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleFieldMeshAndDataAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ScaleFieldMeshAndDataAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ScaleFieldMeshAndDataAlg
    __del__ = lambda self : None;
    def get_p_datascale(*args): return _sr_py.ScaleFieldMeshAndDataAlg_get_p_datascale(*args)
    def get_p_geomscale(*args): return _sr_py.ScaleFieldMeshAndDataAlg_get_p_geomscale(*args)
    def get_p_usegeomcenter(*args): return _sr_py.ScaleFieldMeshAndDataAlg_get_p_usegeomcenter(*args)
    def get_progress_reporter(*args): return _sr_py.ScaleFieldMeshAndDataAlg_get_progress_reporter(*args)
    def set_p_datascale(*args): return _sr_py.ScaleFieldMeshAndDataAlg_set_p_datascale(*args)
    def set_p_geomscale(*args): return _sr_py.ScaleFieldMeshAndDataAlg_set_p_geomscale(*args)
    def set_p_usegeomcenter(*args): return _sr_py.ScaleFieldMeshAndDataAlg_set_p_usegeomcenter(*args)
    def set_progress_reporter(*args): return _sr_py.ScaleFieldMeshAndDataAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ScaleFieldMeshAndDataAlg_execute(*args)
ScaleFieldMeshAndDataAlg_swigregister = _sr_py.ScaleFieldMeshAndDataAlg_swigregister
ScaleFieldMeshAndDataAlg_swigregister(ScaleFieldMeshAndDataAlg)

get_scale_field_mesh_and_data_alg = _sr_py.get_scale_field_mesh_and_data_alg
class SmoothMeshAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothMeshAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothMeshAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SmoothMeshAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SmoothMeshAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.SmoothMeshAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.SmoothMeshAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SmoothMeshAlg_execute(*args)
SmoothMeshAlg_swigregister = _sr_py.SmoothMeshAlg_swigregister
SmoothMeshAlg_swigregister(SmoothMeshAlg)

get_smooth_mesh_alg = _sr_py.get_smooth_mesh_alg
class SwapNodeLocationsWithMatrixEntriesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapNodeLocationsWithMatrixEntriesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwapNodeLocationsWithMatrixEntriesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SwapNodeLocationsWithMatrixEntriesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SwapNodeLocationsWithMatrixEntriesAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.SwapNodeLocationsWithMatrixEntriesAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.SwapNodeLocationsWithMatrixEntriesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SwapNodeLocationsWithMatrixEntriesAlg_execute(*args)
SwapNodeLocationsWithMatrixEntriesAlg_swigregister = _sr_py.SwapNodeLocationsWithMatrixEntriesAlg_swigregister
SwapNodeLocationsWithMatrixEntriesAlg_swigregister(SwapNodeLocationsWithMatrixEntriesAlg)

get_swap_node_locations_with_matrix_entries_alg = _sr_py.get_swap_node_locations_with_matrix_entries_alg
class TransformMeshWithFunctionAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformMeshWithFunctionAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransformMeshWithFunctionAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_TransformMeshWithFunctionAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_TransformMeshWithFunctionAlg
    __del__ = lambda self : None;
    def get_p_function(*args): return _sr_py.TransformMeshWithFunctionAlg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.TransformMeshWithFunctionAlg_get_progress_reporter(*args)
    def set_p_function(*args): return _sr_py.TransformMeshWithFunctionAlg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.TransformMeshWithFunctionAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.TransformMeshWithFunctionAlg_execute(*args)
TransformMeshWithFunctionAlg_swigregister = _sr_py.TransformMeshWithFunctionAlg_swigregister
TransformMeshWithFunctionAlg_swigregister(TransformMeshWithFunctionAlg)

get_transform_mesh_with_function_alg = _sr_py.get_transform_mesh_with_function_alg
class TransformMeshWithTransformAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformMeshWithTransformAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransformMeshWithTransformAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_TransformMeshWithTransformAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_TransformMeshWithTransformAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.TransformMeshWithTransformAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.TransformMeshWithTransformAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.TransformMeshWithTransformAlg_execute(*args)
TransformMeshWithTransformAlg_swigregister = _sr_py.TransformMeshWithTransformAlg_swigregister
TransformMeshWithTransformAlg_swigregister(TransformMeshWithTransformAlg)

get_transform_mesh_with_transform_alg = _sr_py.get_transform_mesh_with_transform_alg
class TransformPlanarMeshAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformPlanarMeshAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransformPlanarMeshAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_TransformPlanarMeshAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_TransformPlanarMeshAlg
    __del__ = lambda self : None;
    def get_p_axis(*args): return _sr_py.TransformPlanarMeshAlg_get_p_axis(*args)
    def get_p_invert(*args): return _sr_py.TransformPlanarMeshAlg_get_p_invert(*args)
    def get_p_trans_x(*args): return _sr_py.TransformPlanarMeshAlg_get_p_trans_x(*args)
    def get_p_trans_y(*args): return _sr_py.TransformPlanarMeshAlg_get_p_trans_y(*args)
    def get_progress_reporter(*args): return _sr_py.TransformPlanarMeshAlg_get_progress_reporter(*args)
    def set_p_axis(*args): return _sr_py.TransformPlanarMeshAlg_set_p_axis(*args)
    def set_p_invert(*args): return _sr_py.TransformPlanarMeshAlg_set_p_invert(*args)
    def set_p_trans_x(*args): return _sr_py.TransformPlanarMeshAlg_set_p_trans_x(*args)
    def set_p_trans_y(*args): return _sr_py.TransformPlanarMeshAlg_set_p_trans_y(*args)
    def set_progress_reporter(*args): return _sr_py.TransformPlanarMeshAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.TransformPlanarMeshAlg_execute(*args)
TransformPlanarMeshAlg_swigregister = _sr_py.TransformPlanarMeshAlg_swigregister
TransformPlanarMeshAlg_swigregister(TransformPlanarMeshAlg)

get_transform_planar_mesh_alg = _sr_py.get_transform_planar_mesh_alg
class ConvertMatrixToFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMatrixToFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMatrixToFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMatrixToFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMatrixToFieldAlg
    __del__ = lambda self : None;
    def get_p_datalocation(*args): return _sr_py.ConvertMatrixToFieldAlg_get_p_datalocation(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertMatrixToFieldAlg_get_progress_reporter(*args)
    def set_p_datalocation(*args): return _sr_py.ConvertMatrixToFieldAlg_set_p_datalocation(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMatrixToFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMatrixToFieldAlg_execute(*args)
ConvertMatrixToFieldAlg_swigregister = _sr_py.ConvertMatrixToFieldAlg_swigregister
ConvertMatrixToFieldAlg_swigregister(ConvertMatrixToFieldAlg)

get_convert_matrix_to_field_alg = _sr_py.get_convert_matrix_to_field_alg
class ConvertNrrdToFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertNrrdToFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertNrrdToFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertNrrdToFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertNrrdToFieldAlg
    __del__ = lambda self : None;
    def get_p_convertparity(*args): return _sr_py.ConvertNrrdToFieldAlg_get_p_convertparity(*args)
    def get_p_datalocation(*args): return _sr_py.ConvertNrrdToFieldAlg_get_p_datalocation(*args)
    def get_p_fieldtype(*args): return _sr_py.ConvertNrrdToFieldAlg_get_p_fieldtype(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertNrrdToFieldAlg_get_progress_reporter(*args)
    def set_p_convertparity(*args): return _sr_py.ConvertNrrdToFieldAlg_set_p_convertparity(*args)
    def set_p_datalocation(*args): return _sr_py.ConvertNrrdToFieldAlg_set_p_datalocation(*args)
    def set_p_fieldtype(*args): return _sr_py.ConvertNrrdToFieldAlg_set_p_fieldtype(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertNrrdToFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertNrrdToFieldAlg_execute(*args)
ConvertNrrdToFieldAlg_swigregister = _sr_py.ConvertNrrdToFieldAlg_swigregister
ConvertNrrdToFieldAlg_swigregister(ConvertNrrdToFieldAlg)

get_convert_nrrd_to_field_alg = _sr_py.get_convert_nrrd_to_field_alg
class ConvertMatrixToStringAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMatrixToStringAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMatrixToStringAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMatrixToStringAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMatrixToStringAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertMatrixToStringAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMatrixToStringAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMatrixToStringAlg_execute(*args)
ConvertMatrixToStringAlg_swigregister = _sr_py.ConvertMatrixToStringAlg_swigregister
ConvertMatrixToStringAlg_swigregister(ConvertMatrixToStringAlg)

get_convert_matrix_to_string_alg = _sr_py.get_convert_matrix_to_string_alg
class AppendDataArraysAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppendDataArraysAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppendDataArraysAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_AppendDataArraysAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_AppendDataArraysAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.AppendDataArraysAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.AppendDataArraysAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.AppendDataArraysAlg_execute(*args)
AppendDataArraysAlg_swigregister = _sr_py.AppendDataArraysAlg_swigregister
AppendDataArraysAlg_swigregister(AppendDataArraysAlg)

get_append_data_arrays_alg = _sr_py.get_append_data_arrays_alg
class CalculateDataArrayAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculateDataArrayAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculateDataArrayAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CalculateDataArrayAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CalculateDataArrayAlg
    __del__ = lambda self : None;
    def get_p_format(*args): return _sr_py.CalculateDataArrayAlg_get_p_format(*args)
    def get_p_function(*args): return _sr_py.CalculateDataArrayAlg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.CalculateDataArrayAlg_get_progress_reporter(*args)
    def set_p_format(*args): return _sr_py.CalculateDataArrayAlg_set_p_format(*args)
    def set_p_function(*args): return _sr_py.CalculateDataArrayAlg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.CalculateDataArrayAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CalculateDataArrayAlg_execute(*args)
CalculateDataArrayAlg_swigregister = _sr_py.CalculateDataArrayAlg_swigregister
CalculateDataArrayAlg_swigregister(CalculateDataArrayAlg)

get_calculate_data_array_alg = _sr_py.get_calculate_data_array_alg
class CreateDataArrayFromIndicesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateDataArrayFromIndicesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateDataArrayFromIndicesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateDataArrayFromIndicesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateDataArrayFromIndicesAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CreateDataArrayFromIndicesAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CreateDataArrayFromIndicesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateDataArrayFromIndicesAlg_execute(*args)
CreateDataArrayFromIndicesAlg_swigregister = _sr_py.CreateDataArrayFromIndicesAlg_swigregister
CreateDataArrayFromIndicesAlg_swigregister(CreateDataArrayFromIndicesAlg)

get_create_data_array_from_indices_alg = _sr_py.get_create_data_array_from_indices_alg
class CreateDataArrayAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateDataArrayAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateDataArrayAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateDataArrayAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateDataArrayAlg
    __del__ = lambda self : None;
    def get_p_format(*args): return _sr_py.CreateDataArrayAlg_get_p_format(*args)
    def get_p_function(*args): return _sr_py.CreateDataArrayAlg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.CreateDataArrayAlg_get_progress_reporter(*args)
    def set_p_format(*args): return _sr_py.CreateDataArrayAlg_set_p_format(*args)
    def set_p_function(*args): return _sr_py.CreateDataArrayAlg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.CreateDataArrayAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateDataArrayAlg_execute(*args)
CreateDataArrayAlg_swigregister = _sr_py.CreateDataArrayAlg_swigregister
CreateDataArrayAlg_swigregister(CreateDataArrayAlg)

get_create_data_array_alg = _sr_py.get_create_data_array_alg
class CreateTensorArrayAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateTensorArrayAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateTensorArrayAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateTensorArrayAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateTensorArrayAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CreateTensorArrayAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CreateTensorArrayAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateTensorArrayAlg_execute(*args)
CreateTensorArrayAlg_swigregister = _sr_py.CreateTensorArrayAlg_swigregister
CreateTensorArrayAlg_swigregister(CreateTensorArrayAlg)

get_create_tensor_array_alg = _sr_py.get_create_tensor_array_alg
class CreateVectorArrayAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateVectorArrayAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateVectorArrayAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateVectorArrayAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateVectorArrayAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.CreateVectorArrayAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.CreateVectorArrayAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateVectorArrayAlg_execute(*args)
CreateVectorArrayAlg_swigregister = _sr_py.CreateVectorArrayAlg_swigregister
CreateVectorArrayAlg_swigregister(CreateVectorArrayAlg)

get_create_vector_array_alg = _sr_py.get_create_vector_array_alg
class DecomposeTensorArrayIntoEigenVectorsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecomposeTensorArrayIntoEigenVectorsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecomposeTensorArrayIntoEigenVectorsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_DecomposeTensorArrayIntoEigenVectorsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_DecomposeTensorArrayIntoEigenVectorsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.DecomposeTensorArrayIntoEigenVectorsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.DecomposeTensorArrayIntoEigenVectorsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.DecomposeTensorArrayIntoEigenVectorsAlg_execute(*args)
DecomposeTensorArrayIntoEigenVectorsAlg_swigregister = _sr_py.DecomposeTensorArrayIntoEigenVectorsAlg_swigregister
DecomposeTensorArrayIntoEigenVectorsAlg_swigregister(DecomposeTensorArrayIntoEigenVectorsAlg)

get_decompose_tensor_array_into_eigen_vectors_alg = _sr_py.get_decompose_tensor_array_into_eigen_vectors_alg
class ReplicateDataArrayAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplicateDataArrayAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReplicateDataArrayAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReplicateDataArrayAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReplicateDataArrayAlg
    __del__ = lambda self : None;
    def get_p_size(*args): return _sr_py.ReplicateDataArrayAlg_get_p_size(*args)
    def get_progress_reporter(*args): return _sr_py.ReplicateDataArrayAlg_get_progress_reporter(*args)
    def set_p_size(*args): return _sr_py.ReplicateDataArrayAlg_set_p_size(*args)
    def set_progress_reporter(*args): return _sr_py.ReplicateDataArrayAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReplicateDataArrayAlg_execute(*args)
ReplicateDataArrayAlg_swigregister = _sr_py.ReplicateDataArrayAlg_swigregister
ReplicateDataArrayAlg_swigregister(ReplicateDataArrayAlg)

get_replicate_data_array_alg = _sr_py.get_replicate_data_array_alg
class ReportDataArrayInfoAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportDataArrayInfoAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportDataArrayInfoAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportDataArrayInfoAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportDataArrayInfoAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ReportDataArrayInfoAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ReportDataArrayInfoAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportDataArrayInfoAlg_execute(*args)
ReportDataArrayInfoAlg_swigregister = _sr_py.ReportDataArrayInfoAlg_swigregister
ReportDataArrayInfoAlg_swigregister(ReportDataArrayInfoAlg)

get_report_data_array_info_alg = _sr_py.get_report_data_array_info_alg
class ReportDataArrayMeasureAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportDataArrayMeasureAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportDataArrayMeasureAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportDataArrayMeasureAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportDataArrayMeasureAlg
    __del__ = lambda self : None;
    def get_p_measure(*args): return _sr_py.ReportDataArrayMeasureAlg_get_p_measure(*args)
    def get_progress_reporter(*args): return _sr_py.ReportDataArrayMeasureAlg_get_progress_reporter(*args)
    def set_p_measure(*args): return _sr_py.ReportDataArrayMeasureAlg_set_p_measure(*args)
    def set_progress_reporter(*args): return _sr_py.ReportDataArrayMeasureAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportDataArrayMeasureAlg_execute(*args)
ReportDataArrayMeasureAlg_swigregister = _sr_py.ReportDataArrayMeasureAlg_swigregister
ReportDataArrayMeasureAlg_swigregister(ReportDataArrayMeasureAlg)

get_report_data_array_measure_alg = _sr_py.get_report_data_array_measure_alg
class SplitVectorArrayInXYZAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitVectorArrayInXYZAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplitVectorArrayInXYZAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SplitVectorArrayInXYZAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SplitVectorArrayInXYZAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.SplitVectorArrayInXYZAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.SplitVectorArrayInXYZAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SplitVectorArrayInXYZAlg_execute(*args)
SplitVectorArrayInXYZAlg_swigregister = _sr_py.SplitVectorArrayInXYZAlg_swigregister
SplitVectorArrayInXYZAlg_swigregister(SplitVectorArrayInXYZAlg)

get_split_vector_array_in_x_y_z_alg = _sr_py.get_split_vector_array_in_x_y_z_alg
class ReadBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadBundleAlg
    __del__ = lambda self : None;
    def get_p_from_env(*args): return _sr_py.ReadBundleAlg_get_p_from_env(*args)
    def get_p_types(*args): return _sr_py.ReadBundleAlg_get_p_types(*args)
    def get_progress_reporter(*args): return _sr_py.ReadBundleAlg_get_progress_reporter(*args)
    def set_p_from_env(*args): return _sr_py.ReadBundleAlg_set_p_from_env(*args)
    def set_p_types(*args): return _sr_py.ReadBundleAlg_set_p_types(*args)
    def set_progress_reporter(*args): return _sr_py.ReadBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadBundleAlg_execute(*args)
ReadBundleAlg_swigregister = _sr_py.ReadBundleAlg_swigregister
ReadBundleAlg_swigregister(ReadBundleAlg)

get_read_bundle_alg = _sr_py.get_read_bundle_alg
class ReadColorMap2DAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadColorMap2DAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadColorMap2DAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadColorMap2DAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadColorMap2DAlg
    __del__ = lambda self : None;
    def get_p_from_env(*args): return _sr_py.ReadColorMap2DAlg_get_p_from_env(*args)
    def get_progress_reporter(*args): return _sr_py.ReadColorMap2DAlg_get_progress_reporter(*args)
    def set_p_from_env(*args): return _sr_py.ReadColorMap2DAlg_set_p_from_env(*args)
    def set_progress_reporter(*args): return _sr_py.ReadColorMap2DAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadColorMap2DAlg_execute(*args)
ReadColorMap2DAlg_swigregister = _sr_py.ReadColorMap2DAlg_swigregister
ReadColorMap2DAlg_swigregister(ReadColorMap2DAlg)

get_read_colormap2d_alg = _sr_py.get_read_colormap2d_alg
class ReadColorMapAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadColorMapAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadColorMapAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadColorMapAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadColorMapAlg
    __del__ = lambda self : None;
    def get_p_from_env(*args): return _sr_py.ReadColorMapAlg_get_p_from_env(*args)
    def get_progress_reporter(*args): return _sr_py.ReadColorMapAlg_get_progress_reporter(*args)
    def set_p_from_env(*args): return _sr_py.ReadColorMapAlg_set_p_from_env(*args)
    def set_progress_reporter(*args): return _sr_py.ReadColorMapAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadColorMapAlg_execute(*args)
ReadColorMapAlg_swigregister = _sr_py.ReadColorMapAlg_swigregister
ReadColorMapAlg_swigregister(ReadColorMapAlg)

get_read_colormap_alg = _sr_py.get_read_colormap_alg
class ReadFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadFieldAlg
    __del__ = lambda self : None;
    def get_p_from_env(*args): return _sr_py.ReadFieldAlg_get_p_from_env(*args)
    def get_progress_reporter(*args): return _sr_py.ReadFieldAlg_get_progress_reporter(*args)
    def set_p_from_env(*args): return _sr_py.ReadFieldAlg_set_p_from_env(*args)
    def set_progress_reporter(*args): return _sr_py.ReadFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadFieldAlg_execute(*args)
ReadFieldAlg_swigregister = _sr_py.ReadFieldAlg_swigregister
ReadFieldAlg_swigregister(ReadFieldAlg)

get_read_field_alg = _sr_py.get_read_field_alg
class ReadNrrdAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadNrrdAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadNrrdAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadNrrdAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadNrrdAlg
    __del__ = lambda self : None;
    def get_p_from_env(*args): return _sr_py.ReadNrrdAlg_get_p_from_env(*args)
    def get_progress_reporter(*args): return _sr_py.ReadNrrdAlg_get_progress_reporter(*args)
    def set_p_from_env(*args): return _sr_py.ReadNrrdAlg_set_p_from_env(*args)
    def set_progress_reporter(*args): return _sr_py.ReadNrrdAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadNrrdAlg_execute(*args)
ReadNrrdAlg_swigregister = _sr_py.ReadNrrdAlg_swigregister
ReadNrrdAlg_swigregister(ReadNrrdAlg)

get_read_nrrd_alg = _sr_py.get_read_nrrd_alg
class ReadHDF5FileAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadHDF5FileAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadHDF5FileAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadHDF5FileAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadHDF5FileAlg
    __del__ = lambda self : None;
    def get_p_0_count(*args): return _sr_py.ReadHDF5FileAlg_get_p_0_count(*args)
    def get_p_0_count2(*args): return _sr_py.ReadHDF5FileAlg_get_p_0_count2(*args)
    def get_p_0_dim(*args): return _sr_py.ReadHDF5FileAlg_get_p_0_dim(*args)
    def get_p_0_start(*args): return _sr_py.ReadHDF5FileAlg_get_p_0_start(*args)
    def get_p_0_start2(*args): return _sr_py.ReadHDF5FileAlg_get_p_0_start2(*args)
    def get_p_0_stride(*args): return _sr_py.ReadHDF5FileAlg_get_p_0_stride(*args)
    def get_p_0_stride2(*args): return _sr_py.ReadHDF5FileAlg_get_p_0_stride2(*args)
    def get_p_1_count(*args): return _sr_py.ReadHDF5FileAlg_get_p_1_count(*args)
    def get_p_1_count2(*args): return _sr_py.ReadHDF5FileAlg_get_p_1_count2(*args)
    def get_p_1_dim(*args): return _sr_py.ReadHDF5FileAlg_get_p_1_dim(*args)
    def get_p_1_start(*args): return _sr_py.ReadHDF5FileAlg_get_p_1_start(*args)
    def get_p_1_start2(*args): return _sr_py.ReadHDF5FileAlg_get_p_1_start2(*args)
    def get_p_1_stride(*args): return _sr_py.ReadHDF5FileAlg_get_p_1_stride(*args)
    def get_p_1_stride2(*args): return _sr_py.ReadHDF5FileAlg_get_p_1_stride2(*args)
    def get_p_2_count(*args): return _sr_py.ReadHDF5FileAlg_get_p_2_count(*args)
    def get_p_2_count2(*args): return _sr_py.ReadHDF5FileAlg_get_p_2_count2(*args)
    def get_p_2_dim(*args): return _sr_py.ReadHDF5FileAlg_get_p_2_dim(*args)
    def get_p_2_start(*args): return _sr_py.ReadHDF5FileAlg_get_p_2_start(*args)
    def get_p_2_start2(*args): return _sr_py.ReadHDF5FileAlg_get_p_2_start2(*args)
    def get_p_2_stride(*args): return _sr_py.ReadHDF5FileAlg_get_p_2_stride(*args)
    def get_p_2_stride2(*args): return _sr_py.ReadHDF5FileAlg_get_p_2_stride2(*args)
    def get_p_3_count(*args): return _sr_py.ReadHDF5FileAlg_get_p_3_count(*args)
    def get_p_3_count2(*args): return _sr_py.ReadHDF5FileAlg_get_p_3_count2(*args)
    def get_p_3_dim(*args): return _sr_py.ReadHDF5FileAlg_get_p_3_dim(*args)
    def get_p_3_start(*args): return _sr_py.ReadHDF5FileAlg_get_p_3_start(*args)
    def get_p_3_start2(*args): return _sr_py.ReadHDF5FileAlg_get_p_3_start2(*args)
    def get_p_3_stride(*args): return _sr_py.ReadHDF5FileAlg_get_p_3_stride(*args)
    def get_p_3_stride2(*args): return _sr_py.ReadHDF5FileAlg_get_p_3_stride2(*args)
    def get_p_4_count(*args): return _sr_py.ReadHDF5FileAlg_get_p_4_count(*args)
    def get_p_4_count2(*args): return _sr_py.ReadHDF5FileAlg_get_p_4_count2(*args)
    def get_p_4_dim(*args): return _sr_py.ReadHDF5FileAlg_get_p_4_dim(*args)
    def get_p_4_start(*args): return _sr_py.ReadHDF5FileAlg_get_p_4_start(*args)
    def get_p_4_start2(*args): return _sr_py.ReadHDF5FileAlg_get_p_4_start2(*args)
    def get_p_4_stride(*args): return _sr_py.ReadHDF5FileAlg_get_p_4_stride(*args)
    def get_p_4_stride2(*args): return _sr_py.ReadHDF5FileAlg_get_p_4_stride2(*args)
    def get_p_5_count(*args): return _sr_py.ReadHDF5FileAlg_get_p_5_count(*args)
    def get_p_5_count2(*args): return _sr_py.ReadHDF5FileAlg_get_p_5_count2(*args)
    def get_p_5_dim(*args): return _sr_py.ReadHDF5FileAlg_get_p_5_dim(*args)
    def get_p_5_start(*args): return _sr_py.ReadHDF5FileAlg_get_p_5_start(*args)
    def get_p_5_start2(*args): return _sr_py.ReadHDF5FileAlg_get_p_5_start2(*args)
    def get_p_5_stride(*args): return _sr_py.ReadHDF5FileAlg_get_p_5_stride(*args)
    def get_p_5_stride2(*args): return _sr_py.ReadHDF5FileAlg_get_p_5_stride2(*args)
    def get_p_allow_selection(*args): return _sr_py.ReadHDF5FileAlg_get_p_allow_selection(*args)
    def get_p_animate(*args): return _sr_py.ReadHDF5FileAlg_get_p_animate(*args)
    def get_p_animate_tab(*args): return _sr_py.ReadHDF5FileAlg_get_p_animate_tab(*args)
    def get_p_assumeSVT(*args): return _sr_py.ReadHDF5FileAlg_get_p_assumeSVT(*args)
    def get_p_basic_tab(*args): return _sr_py.ReadHDF5FileAlg_get_p_basic_tab(*args)
    def get_p_continuous(*args): return _sr_py.ReadHDF5FileAlg_get_p_continuous(*args)
    def get_p_current(*args): return _sr_py.ReadHDF5FileAlg_get_p_current(*args)
    def get_p_datasets(*args): return _sr_py.ReadHDF5FileAlg_get_p_datasets(*args)
    def get_p_delay(*args): return _sr_py.ReadHDF5FileAlg_get_p_delay(*args)
    def get_p_dumpname(*args): return _sr_py.ReadHDF5FileAlg_get_p_dumpname(*args)
    def get_p_execmode(*args): return _sr_py.ReadHDF5FileAlg_get_p_execmode(*args)
    def get_p_extended_tab(*args): return _sr_py.ReadHDF5FileAlg_get_p_extended_tab(*args)
    def get_p_have_HDF5(*args): return _sr_py.ReadHDF5FileAlg_get_p_have_HDF5(*args)
    def get_p_have_attributes(*args): return _sr_py.ReadHDF5FileAlg_get_p_have_attributes(*args)
    def get_p_have_datasets(*args): return _sr_py.ReadHDF5FileAlg_get_p_have_datasets(*args)
    def get_p_have_group(*args): return _sr_py.ReadHDF5FileAlg_get_p_have_group(*args)
    def get_p_inc_amount(*args): return _sr_py.ReadHDF5FileAlg_get_p_inc_amount(*args)
    def get_p_max_dims(*args): return _sr_py.ReadHDF5FileAlg_get_p_max_dims(*args)
    def get_p_mergeData(*args): return _sr_py.ReadHDF5FileAlg_get_p_mergeData(*args)
    def get_p_ndims(*args): return _sr_py.ReadHDF5FileAlg_get_p_ndims(*args)
    def get_p_playmode(*args): return _sr_py.ReadHDF5FileAlg_get_p_playmode(*args)
    def get_p_playmode_tab(*args): return _sr_py.ReadHDF5FileAlg_get_p_playmode_tab(*args)
    def get_p_ports(*args): return _sr_py.ReadHDF5FileAlg_get_p_ports(*args)
    def get_p_power_app(*args): return _sr_py.ReadHDF5FileAlg_get_p_power_app(*args)
    def get_p_range_max(*args): return _sr_py.ReadHDF5FileAlg_get_p_range_max(*args)
    def get_p_range_min(*args): return _sr_py.ReadHDF5FileAlg_get_p_range_min(*args)
    def get_p_read_error(*args): return _sr_py.ReadHDF5FileAlg_get_p_read_error(*args)
    def get_p_regexp(*args): return _sr_py.ReadHDF5FileAlg_get_p_regexp(*args)
    def get_p_selectable_inc(*args): return _sr_py.ReadHDF5FileAlg_get_p_selectable_inc(*args)
    def get_p_selectable_max(*args): return _sr_py.ReadHDF5FileAlg_get_p_selectable_max(*args)
    def get_p_selectable_min(*args): return _sr_py.ReadHDF5FileAlg_get_p_selectable_min(*args)
    def get_p_selectionString(*args): return _sr_py.ReadHDF5FileAlg_get_p_selectionString(*args)
    def get_p_update_type(*args): return _sr_py.ReadHDF5FileAlg_get_p_update_type(*args)
    def get_progress_reporter(*args): return _sr_py.ReadHDF5FileAlg_get_progress_reporter(*args)
    def set_p_0_count(*args): return _sr_py.ReadHDF5FileAlg_set_p_0_count(*args)
    def set_p_0_count2(*args): return _sr_py.ReadHDF5FileAlg_set_p_0_count2(*args)
    def set_p_0_dim(*args): return _sr_py.ReadHDF5FileAlg_set_p_0_dim(*args)
    def set_p_0_start(*args): return _sr_py.ReadHDF5FileAlg_set_p_0_start(*args)
    def set_p_0_start2(*args): return _sr_py.ReadHDF5FileAlg_set_p_0_start2(*args)
    def set_p_0_stride(*args): return _sr_py.ReadHDF5FileAlg_set_p_0_stride(*args)
    def set_p_0_stride2(*args): return _sr_py.ReadHDF5FileAlg_set_p_0_stride2(*args)
    def set_p_1_count(*args): return _sr_py.ReadHDF5FileAlg_set_p_1_count(*args)
    def set_p_1_count2(*args): return _sr_py.ReadHDF5FileAlg_set_p_1_count2(*args)
    def set_p_1_dim(*args): return _sr_py.ReadHDF5FileAlg_set_p_1_dim(*args)
    def set_p_1_start(*args): return _sr_py.ReadHDF5FileAlg_set_p_1_start(*args)
    def set_p_1_start2(*args): return _sr_py.ReadHDF5FileAlg_set_p_1_start2(*args)
    def set_p_1_stride(*args): return _sr_py.ReadHDF5FileAlg_set_p_1_stride(*args)
    def set_p_1_stride2(*args): return _sr_py.ReadHDF5FileAlg_set_p_1_stride2(*args)
    def set_p_2_count(*args): return _sr_py.ReadHDF5FileAlg_set_p_2_count(*args)
    def set_p_2_count2(*args): return _sr_py.ReadHDF5FileAlg_set_p_2_count2(*args)
    def set_p_2_dim(*args): return _sr_py.ReadHDF5FileAlg_set_p_2_dim(*args)
    def set_p_2_start(*args): return _sr_py.ReadHDF5FileAlg_set_p_2_start(*args)
    def set_p_2_start2(*args): return _sr_py.ReadHDF5FileAlg_set_p_2_start2(*args)
    def set_p_2_stride(*args): return _sr_py.ReadHDF5FileAlg_set_p_2_stride(*args)
    def set_p_2_stride2(*args): return _sr_py.ReadHDF5FileAlg_set_p_2_stride2(*args)
    def set_p_3_count(*args): return _sr_py.ReadHDF5FileAlg_set_p_3_count(*args)
    def set_p_3_count2(*args): return _sr_py.ReadHDF5FileAlg_set_p_3_count2(*args)
    def set_p_3_dim(*args): return _sr_py.ReadHDF5FileAlg_set_p_3_dim(*args)
    def set_p_3_start(*args): return _sr_py.ReadHDF5FileAlg_set_p_3_start(*args)
    def set_p_3_start2(*args): return _sr_py.ReadHDF5FileAlg_set_p_3_start2(*args)
    def set_p_3_stride(*args): return _sr_py.ReadHDF5FileAlg_set_p_3_stride(*args)
    def set_p_3_stride2(*args): return _sr_py.ReadHDF5FileAlg_set_p_3_stride2(*args)
    def set_p_4_count(*args): return _sr_py.ReadHDF5FileAlg_set_p_4_count(*args)
    def set_p_4_count2(*args): return _sr_py.ReadHDF5FileAlg_set_p_4_count2(*args)
    def set_p_4_dim(*args): return _sr_py.ReadHDF5FileAlg_set_p_4_dim(*args)
    def set_p_4_start(*args): return _sr_py.ReadHDF5FileAlg_set_p_4_start(*args)
    def set_p_4_start2(*args): return _sr_py.ReadHDF5FileAlg_set_p_4_start2(*args)
    def set_p_4_stride(*args): return _sr_py.ReadHDF5FileAlg_set_p_4_stride(*args)
    def set_p_4_stride2(*args): return _sr_py.ReadHDF5FileAlg_set_p_4_stride2(*args)
    def set_p_5_count(*args): return _sr_py.ReadHDF5FileAlg_set_p_5_count(*args)
    def set_p_5_count2(*args): return _sr_py.ReadHDF5FileAlg_set_p_5_count2(*args)
    def set_p_5_dim(*args): return _sr_py.ReadHDF5FileAlg_set_p_5_dim(*args)
    def set_p_5_start(*args): return _sr_py.ReadHDF5FileAlg_set_p_5_start(*args)
    def set_p_5_start2(*args): return _sr_py.ReadHDF5FileAlg_set_p_5_start2(*args)
    def set_p_5_stride(*args): return _sr_py.ReadHDF5FileAlg_set_p_5_stride(*args)
    def set_p_5_stride2(*args): return _sr_py.ReadHDF5FileAlg_set_p_5_stride2(*args)
    def set_p_allow_selection(*args): return _sr_py.ReadHDF5FileAlg_set_p_allow_selection(*args)
    def set_p_animate(*args): return _sr_py.ReadHDF5FileAlg_set_p_animate(*args)
    def set_p_animate_tab(*args): return _sr_py.ReadHDF5FileAlg_set_p_animate_tab(*args)
    def set_p_assumeSVT(*args): return _sr_py.ReadHDF5FileAlg_set_p_assumeSVT(*args)
    def set_p_basic_tab(*args): return _sr_py.ReadHDF5FileAlg_set_p_basic_tab(*args)
    def set_p_continuous(*args): return _sr_py.ReadHDF5FileAlg_set_p_continuous(*args)
    def set_p_current(*args): return _sr_py.ReadHDF5FileAlg_set_p_current(*args)
    def set_p_datasets(*args): return _sr_py.ReadHDF5FileAlg_set_p_datasets(*args)
    def set_p_delay(*args): return _sr_py.ReadHDF5FileAlg_set_p_delay(*args)
    def set_p_dumpname(*args): return _sr_py.ReadHDF5FileAlg_set_p_dumpname(*args)
    def set_p_execmode(*args): return _sr_py.ReadHDF5FileAlg_set_p_execmode(*args)
    def set_p_extended_tab(*args): return _sr_py.ReadHDF5FileAlg_set_p_extended_tab(*args)
    def set_p_have_HDF5(*args): return _sr_py.ReadHDF5FileAlg_set_p_have_HDF5(*args)
    def set_p_have_attributes(*args): return _sr_py.ReadHDF5FileAlg_set_p_have_attributes(*args)
    def set_p_have_datasets(*args): return _sr_py.ReadHDF5FileAlg_set_p_have_datasets(*args)
    def set_p_have_group(*args): return _sr_py.ReadHDF5FileAlg_set_p_have_group(*args)
    def set_p_inc_amount(*args): return _sr_py.ReadHDF5FileAlg_set_p_inc_amount(*args)
    def set_p_max_dims(*args): return _sr_py.ReadHDF5FileAlg_set_p_max_dims(*args)
    def set_p_mergeData(*args): return _sr_py.ReadHDF5FileAlg_set_p_mergeData(*args)
    def set_p_ndims(*args): return _sr_py.ReadHDF5FileAlg_set_p_ndims(*args)
    def set_p_playmode(*args): return _sr_py.ReadHDF5FileAlg_set_p_playmode(*args)
    def set_p_playmode_tab(*args): return _sr_py.ReadHDF5FileAlg_set_p_playmode_tab(*args)
    def set_p_ports(*args): return _sr_py.ReadHDF5FileAlg_set_p_ports(*args)
    def set_p_power_app(*args): return _sr_py.ReadHDF5FileAlg_set_p_power_app(*args)
    def set_p_range_max(*args): return _sr_py.ReadHDF5FileAlg_set_p_range_max(*args)
    def set_p_range_min(*args): return _sr_py.ReadHDF5FileAlg_set_p_range_min(*args)
    def set_p_read_error(*args): return _sr_py.ReadHDF5FileAlg_set_p_read_error(*args)
    def set_p_regexp(*args): return _sr_py.ReadHDF5FileAlg_set_p_regexp(*args)
    def set_p_selectable_inc(*args): return _sr_py.ReadHDF5FileAlg_set_p_selectable_inc(*args)
    def set_p_selectable_max(*args): return _sr_py.ReadHDF5FileAlg_set_p_selectable_max(*args)
    def set_p_selectable_min(*args): return _sr_py.ReadHDF5FileAlg_set_p_selectable_min(*args)
    def set_p_selectionString(*args): return _sr_py.ReadHDF5FileAlg_set_p_selectionString(*args)
    def set_p_update_type(*args): return _sr_py.ReadHDF5FileAlg_set_p_update_type(*args)
    def set_progress_reporter(*args): return _sr_py.ReadHDF5FileAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadHDF5FileAlg_execute(*args)
ReadHDF5FileAlg_swigregister = _sr_py.ReadHDF5FileAlg_swigregister
ReadHDF5FileAlg_swigregister(ReadHDF5FileAlg)

get_read_h_d_f5_file_alg = _sr_py.get_read_h_d_f5_file_alg
class ReadMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadMatrixAlg
    __del__ = lambda self : None;
    def get_p_from_env(*args): return _sr_py.ReadMatrixAlg_get_p_from_env(*args)
    def get_progress_reporter(*args): return _sr_py.ReadMatrixAlg_get_progress_reporter(*args)
    def set_p_from_env(*args): return _sr_py.ReadMatrixAlg_set_p_from_env(*args)
    def set_progress_reporter(*args): return _sr_py.ReadMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadMatrixAlg_execute(*args)
ReadMatrixAlg_swigregister = _sr_py.ReadMatrixAlg_swigregister
ReadMatrixAlg_swigregister(ReadMatrixAlg)

get_read_matrix_alg = _sr_py.get_read_matrix_alg
class ReadPathAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadPathAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadPathAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadPathAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadPathAlg
    __del__ = lambda self : None;
    def get_p_from_env(*args): return _sr_py.ReadPathAlg_get_p_from_env(*args)
    def get_progress_reporter(*args): return _sr_py.ReadPathAlg_get_progress_reporter(*args)
    def set_p_from_env(*args): return _sr_py.ReadPathAlg_set_p_from_env(*args)
    def set_progress_reporter(*args): return _sr_py.ReadPathAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadPathAlg_execute(*args)
ReadPathAlg_swigregister = _sr_py.ReadPathAlg_swigregister
ReadPathAlg_swigregister(ReadPathAlg)

get_read_path_alg = _sr_py.get_read_path_alg
class ReadStringAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadStringAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadStringAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReadStringAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReadStringAlg
    __del__ = lambda self : None;
    def get_p_from_env(*args): return _sr_py.ReadStringAlg_get_p_from_env(*args)
    def get_progress_reporter(*args): return _sr_py.ReadStringAlg_get_progress_reporter(*args)
    def set_p_from_env(*args): return _sr_py.ReadStringAlg_set_p_from_env(*args)
    def set_progress_reporter(*args): return _sr_py.ReadStringAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReadStringAlg_execute(*args)
ReadStringAlg_swigregister = _sr_py.ReadStringAlg_swigregister
ReadStringAlg_swigregister(ReadStringAlg)

get_read_string_alg = _sr_py.get_read_string_alg
class StreamMatrixFromDiskAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamMatrixFromDiskAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamMatrixFromDiskAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_StreamMatrixFromDiskAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_StreamMatrixFromDiskAlg
    __del__ = lambda self : None;
    def get_p_current(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_current(*args)
    def get_p_delay(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_delay(*args)
    def get_p_execmode(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_execmode(*args)
    def get_p_inc_amount(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_inc_amount(*args)
    def get_p_playmode(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_playmode(*args)
    def get_p_range_max(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_range_max(*args)
    def get_p_range_min(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_range_min(*args)
    def get_p_row_or_col(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_row_or_col(*args)
    def get_p_send_amount(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_send_amount(*args)
    def get_p_slider_max(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_slider_max(*args)
    def get_p_slider_min(*args): return _sr_py.StreamMatrixFromDiskAlg_get_p_slider_min(*args)
    def get_progress_reporter(*args): return _sr_py.StreamMatrixFromDiskAlg_get_progress_reporter(*args)
    def set_p_current(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_current(*args)
    def set_p_delay(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_delay(*args)
    def set_p_execmode(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_execmode(*args)
    def set_p_inc_amount(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_inc_amount(*args)
    def set_p_playmode(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_playmode(*args)
    def set_p_range_max(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_range_max(*args)
    def set_p_range_min(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_range_min(*args)
    def set_p_row_or_col(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_row_or_col(*args)
    def set_p_send_amount(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_send_amount(*args)
    def set_p_slider_max(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_slider_max(*args)
    def set_p_slider_min(*args): return _sr_py.StreamMatrixFromDiskAlg_set_p_slider_min(*args)
    def set_progress_reporter(*args): return _sr_py.StreamMatrixFromDiskAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.StreamMatrixFromDiskAlg_execute(*args)
StreamMatrixFromDiskAlg_swigregister = _sr_py.StreamMatrixFromDiskAlg_swigregister
StreamMatrixFromDiskAlg_swigregister(StreamMatrixFromDiskAlg)

get_stream_matrix_from_disk_alg = _sr_py.get_stream_matrix_from_disk_alg
class WriteBundleAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteBundleAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteBundleAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_WriteBundleAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_WriteBundleAlg
    __del__ = lambda self : None;
    def get_p_confirm(*args): return _sr_py.WriteBundleAlg_get_p_confirm(*args)
    def get_p_confirm_once(*args): return _sr_py.WriteBundleAlg_get_p_confirm_once(*args)
    def get_p_filetype(*args): return _sr_py.WriteBundleAlg_get_p_filetype(*args)
    def get_progress_reporter(*args): return _sr_py.WriteBundleAlg_get_progress_reporter(*args)
    def set_p_confirm(*args): return _sr_py.WriteBundleAlg_set_p_confirm(*args)
    def set_p_confirm_once(*args): return _sr_py.WriteBundleAlg_set_p_confirm_once(*args)
    def set_p_filetype(*args): return _sr_py.WriteBundleAlg_set_p_filetype(*args)
    def set_progress_reporter(*args): return _sr_py.WriteBundleAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.WriteBundleAlg_execute(*args)
WriteBundleAlg_swigregister = _sr_py.WriteBundleAlg_swigregister
WriteBundleAlg_swigregister(WriteBundleAlg)

get_write_bundle_alg = _sr_py.get_write_bundle_alg
class WriteColorMap2DAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteColorMap2DAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteColorMap2DAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_WriteColorMap2DAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_WriteColorMap2DAlg
    __del__ = lambda self : None;
    def get_p_confirm(*args): return _sr_py.WriteColorMap2DAlg_get_p_confirm(*args)
    def get_p_confirm_once(*args): return _sr_py.WriteColorMap2DAlg_get_p_confirm_once(*args)
    def get_p_exporttype(*args): return _sr_py.WriteColorMap2DAlg_get_p_exporttype(*args)
    def get_p_filetype(*args): return _sr_py.WriteColorMap2DAlg_get_p_filetype(*args)
    def get_progress_reporter(*args): return _sr_py.WriteColorMap2DAlg_get_progress_reporter(*args)
    def set_p_confirm(*args): return _sr_py.WriteColorMap2DAlg_set_p_confirm(*args)
    def set_p_confirm_once(*args): return _sr_py.WriteColorMap2DAlg_set_p_confirm_once(*args)
    def set_p_exporttype(*args): return _sr_py.WriteColorMap2DAlg_set_p_exporttype(*args)
    def set_p_filetype(*args): return _sr_py.WriteColorMap2DAlg_set_p_filetype(*args)
    def set_progress_reporter(*args): return _sr_py.WriteColorMap2DAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.WriteColorMap2DAlg_execute(*args)
WriteColorMap2DAlg_swigregister = _sr_py.WriteColorMap2DAlg_swigregister
WriteColorMap2DAlg_swigregister(WriteColorMap2DAlg)

get_write_colormap2d_alg = _sr_py.get_write_colormap2d_alg
class WriteColorMapAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteColorMapAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteColorMapAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_WriteColorMapAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_WriteColorMapAlg
    __del__ = lambda self : None;
    def get_p_confirm(*args): return _sr_py.WriteColorMapAlg_get_p_confirm(*args)
    def get_p_confirm_once(*args): return _sr_py.WriteColorMapAlg_get_p_confirm_once(*args)
    def get_p_exporttype(*args): return _sr_py.WriteColorMapAlg_get_p_exporttype(*args)
    def get_p_filetype(*args): return _sr_py.WriteColorMapAlg_get_p_filetype(*args)
    def get_progress_reporter(*args): return _sr_py.WriteColorMapAlg_get_progress_reporter(*args)
    def set_p_confirm(*args): return _sr_py.WriteColorMapAlg_set_p_confirm(*args)
    def set_p_confirm_once(*args): return _sr_py.WriteColorMapAlg_set_p_confirm_once(*args)
    def set_p_exporttype(*args): return _sr_py.WriteColorMapAlg_set_p_exporttype(*args)
    def set_p_filetype(*args): return _sr_py.WriteColorMapAlg_set_p_filetype(*args)
    def set_progress_reporter(*args): return _sr_py.WriteColorMapAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.WriteColorMapAlg_execute(*args)
WriteColorMapAlg_swigregister = _sr_py.WriteColorMapAlg_swigregister
WriteColorMapAlg_swigregister(WriteColorMapAlg)

get_write_colormap_alg = _sr_py.get_write_colormap_alg
class WriteFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_WriteFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_WriteFieldAlg
    __del__ = lambda self : None;
    def get_p_confirm(*args): return _sr_py.WriteFieldAlg_get_p_confirm(*args)
    def get_p_confirm_once(*args): return _sr_py.WriteFieldAlg_get_p_confirm_once(*args)
    def get_p_current(*args): return _sr_py.WriteFieldAlg_get_p_current(*args)
    def get_p_exporttype(*args): return _sr_py.WriteFieldAlg_get_p_exporttype(*args)
    def get_p_filetype(*args): return _sr_py.WriteFieldAlg_get_p_filetype(*args)
    def get_p_increment(*args): return _sr_py.WriteFieldAlg_get_p_increment(*args)
    def get_progress_reporter(*args): return _sr_py.WriteFieldAlg_get_progress_reporter(*args)
    def set_p_confirm(*args): return _sr_py.WriteFieldAlg_set_p_confirm(*args)
    def set_p_confirm_once(*args): return _sr_py.WriteFieldAlg_set_p_confirm_once(*args)
    def set_p_current(*args): return _sr_py.WriteFieldAlg_set_p_current(*args)
    def set_p_exporttype(*args): return _sr_py.WriteFieldAlg_set_p_exporttype(*args)
    def set_p_filetype(*args): return _sr_py.WriteFieldAlg_set_p_filetype(*args)
    def set_p_increment(*args): return _sr_py.WriteFieldAlg_set_p_increment(*args)
    def set_progress_reporter(*args): return _sr_py.WriteFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.WriteFieldAlg_execute(*args)
WriteFieldAlg_swigregister = _sr_py.WriteFieldAlg_swigregister
WriteFieldAlg_swigregister(WriteFieldAlg)

get_write_field_alg = _sr_py.get_write_field_alg
class WriteMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_WriteMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_WriteMatrixAlg
    __del__ = lambda self : None;
    def get_p_confirm(*args): return _sr_py.WriteMatrixAlg_get_p_confirm(*args)
    def get_p_confirm_once(*args): return _sr_py.WriteMatrixAlg_get_p_confirm_once(*args)
    def get_p_exporttype(*args): return _sr_py.WriteMatrixAlg_get_p_exporttype(*args)
    def get_p_filetype(*args): return _sr_py.WriteMatrixAlg_get_p_filetype(*args)
    def get_p_split(*args): return _sr_py.WriteMatrixAlg_get_p_split(*args)
    def get_progress_reporter(*args): return _sr_py.WriteMatrixAlg_get_progress_reporter(*args)
    def set_p_confirm(*args): return _sr_py.WriteMatrixAlg_set_p_confirm(*args)
    def set_p_confirm_once(*args): return _sr_py.WriteMatrixAlg_set_p_confirm_once(*args)
    def set_p_exporttype(*args): return _sr_py.WriteMatrixAlg_set_p_exporttype(*args)
    def set_p_filetype(*args): return _sr_py.WriteMatrixAlg_set_p_filetype(*args)
    def set_p_split(*args): return _sr_py.WriteMatrixAlg_set_p_split(*args)
    def set_progress_reporter(*args): return _sr_py.WriteMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.WriteMatrixAlg_execute(*args)
WriteMatrixAlg_swigregister = _sr_py.WriteMatrixAlg_swigregister
WriteMatrixAlg_swigregister(WriteMatrixAlg)

get_write_matrix_alg = _sr_py.get_write_matrix_alg
class WritePathAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WritePathAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WritePathAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_WritePathAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_WritePathAlg
    __del__ = lambda self : None;
    def get_p_confirm(*args): return _sr_py.WritePathAlg_get_p_confirm(*args)
    def get_p_confirm_once(*args): return _sr_py.WritePathAlg_get_p_confirm_once(*args)
    def get_p_filetype(*args): return _sr_py.WritePathAlg_get_p_filetype(*args)
    def get_progress_reporter(*args): return _sr_py.WritePathAlg_get_progress_reporter(*args)
    def set_p_confirm(*args): return _sr_py.WritePathAlg_set_p_confirm(*args)
    def set_p_confirm_once(*args): return _sr_py.WritePathAlg_set_p_confirm_once(*args)
    def set_p_filetype(*args): return _sr_py.WritePathAlg_set_p_filetype(*args)
    def set_progress_reporter(*args): return _sr_py.WritePathAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.WritePathAlg_execute(*args)
WritePathAlg_swigregister = _sr_py.WritePathAlg_swigregister
WritePathAlg_swigregister(WritePathAlg)

get_write_path_alg = _sr_py.get_write_path_alg
class WriteStringAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteStringAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteStringAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_WriteStringAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_WriteStringAlg
    __del__ = lambda self : None;
    def get_p_current(*args): return _sr_py.WriteStringAlg_get_p_current(*args)
    def get_p_increment(*args): return _sr_py.WriteStringAlg_get_p_increment(*args)
    def get_progress_reporter(*args): return _sr_py.WriteStringAlg_get_progress_reporter(*args)
    def set_p_current(*args): return _sr_py.WriteStringAlg_set_p_current(*args)
    def set_p_increment(*args): return _sr_py.WriteStringAlg_set_p_increment(*args)
    def set_progress_reporter(*args): return _sr_py.WriteStringAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.WriteStringAlg_execute(*args)
WriteStringAlg_swigregister = _sr_py.WriteStringAlg_swigregister
WriteStringAlg_swigregister(WriteStringAlg)

get_write_string_alg = _sr_py.get_write_string_alg
class AppendMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppendMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppendMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_AppendMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_AppendMatrixAlg
    __del__ = lambda self : None;
    def get_p_row_or_column(*args): return _sr_py.AppendMatrixAlg_get_p_row_or_column(*args)
    def get_progress_reporter(*args): return _sr_py.AppendMatrixAlg_get_progress_reporter(*args)
    def set_p_row_or_column(*args): return _sr_py.AppendMatrixAlg_set_p_row_or_column(*args)
    def set_progress_reporter(*args): return _sr_py.AppendMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.AppendMatrixAlg_execute(*args)
AppendMatrixAlg_swigregister = _sr_py.AppendMatrixAlg_swigregister
AppendMatrixAlg_swigregister(AppendMatrixAlg)

get_append_matrix_alg = _sr_py.get_append_matrix_alg
class BuildNoiseColumnMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildNoiseColumnMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuildNoiseColumnMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_BuildNoiseColumnMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_BuildNoiseColumnMatrixAlg
    __del__ = lambda self : None;
    def get_p_snr(*args): return _sr_py.BuildNoiseColumnMatrixAlg_get_p_snr(*args)
    def get_progress_reporter(*args): return _sr_py.BuildNoiseColumnMatrixAlg_get_progress_reporter(*args)
    def set_p_snr(*args): return _sr_py.BuildNoiseColumnMatrixAlg_set_p_snr(*args)
    def set_progress_reporter(*args): return _sr_py.BuildNoiseColumnMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.BuildNoiseColumnMatrixAlg_execute(*args)
BuildNoiseColumnMatrixAlg_swigregister = _sr_py.BuildNoiseColumnMatrixAlg_swigregister
BuildNoiseColumnMatrixAlg_swigregister(BuildNoiseColumnMatrixAlg)

get_build_noise_column_matrix_alg = _sr_py.get_build_noise_column_matrix_alg
class ChooseMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChooseMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChooseMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ChooseMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ChooseMatrixAlg
    __del__ = lambda self : None;
    def get_p_port_selected_index(*args): return _sr_py.ChooseMatrixAlg_get_p_port_selected_index(*args)
    def get_p_port_valid_index(*args): return _sr_py.ChooseMatrixAlg_get_p_port_valid_index(*args)
    def get_p_use_first_valid(*args): return _sr_py.ChooseMatrixAlg_get_p_use_first_valid(*args)
    def get_progress_reporter(*args): return _sr_py.ChooseMatrixAlg_get_progress_reporter(*args)
    def set_p_port_selected_index(*args): return _sr_py.ChooseMatrixAlg_set_p_port_selected_index(*args)
    def set_p_port_valid_index(*args): return _sr_py.ChooseMatrixAlg_set_p_port_valid_index(*args)
    def set_p_use_first_valid(*args): return _sr_py.ChooseMatrixAlg_set_p_use_first_valid(*args)
    def set_progress_reporter(*args): return _sr_py.ChooseMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ChooseMatrixAlg_execute(*args)
ChooseMatrixAlg_swigregister = _sr_py.ChooseMatrixAlg_swigregister
ChooseMatrixAlg_swigregister(ChooseMatrixAlg)

get_choose_matrix_alg = _sr_py.get_choose_matrix_alg
class CollectMatricesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectMatricesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectMatricesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CollectMatricesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CollectMatricesAlg
    __del__ = lambda self : None;
    def get_p_append(*args): return _sr_py.CollectMatricesAlg_get_p_append(*args)
    def get_p_front(*args): return _sr_py.CollectMatricesAlg_get_p_front(*args)
    def get_p_row(*args): return _sr_py.CollectMatricesAlg_get_p_row(*args)
    def get_progress_reporter(*args): return _sr_py.CollectMatricesAlg_get_progress_reporter(*args)
    def set_p_append(*args): return _sr_py.CollectMatricesAlg_set_p_append(*args)
    def set_p_front(*args): return _sr_py.CollectMatricesAlg_set_p_front(*args)
    def set_p_row(*args): return _sr_py.CollectMatricesAlg_set_p_row(*args)
    def set_progress_reporter(*args): return _sr_py.CollectMatricesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CollectMatricesAlg_execute(*args)
CollectMatricesAlg_swigregister = _sr_py.CollectMatricesAlg_swigregister
CollectMatricesAlg_swigregister(CollectMatricesAlg)

get_collect_matrices_alg = _sr_py.get_collect_matrices_alg
class ConvertMappingMatrixToMaskVectorAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMappingMatrixToMaskVectorAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMappingMatrixToMaskVectorAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMappingMatrixToMaskVectorAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMappingMatrixToMaskVectorAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertMappingMatrixToMaskVectorAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMappingMatrixToMaskVectorAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMappingMatrixToMaskVectorAlg_execute(*args)
ConvertMappingMatrixToMaskVectorAlg_swigregister = _sr_py.ConvertMappingMatrixToMaskVectorAlg_swigregister
ConvertMappingMatrixToMaskVectorAlg_swigregister(ConvertMappingMatrixToMaskVectorAlg)

get_convert_mapping_matrix_to_mask_vector_alg = _sr_py.get_convert_mapping_matrix_to_mask_vector_alg
class ConvertMaskVectorToMappingMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMaskVectorToMappingMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMaskVectorToMappingMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMaskVectorToMappingMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMaskVectorToMappingMatrixAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ConvertMaskVectorToMappingMatrixAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMaskVectorToMappingMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMaskVectorToMappingMatrixAlg_execute(*args)
ConvertMaskVectorToMappingMatrixAlg_swigregister = _sr_py.ConvertMaskVectorToMappingMatrixAlg_swigregister
ConvertMaskVectorToMappingMatrixAlg_swigregister(ConvertMaskVectorToMappingMatrixAlg)

get_convert_mask_vector_to_mapping_matrix_alg = _sr_py.get_convert_mask_vector_to_mapping_matrix_alg
class ConvertMatrixTypeAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMatrixTypeAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMatrixTypeAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMatrixTypeAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMatrixTypeAlg
    __del__ = lambda self : None;
    def get_p_ncol(*args): return _sr_py.ConvertMatrixTypeAlg_get_p_ncol(*args)
    def get_p_newtype(*args): return _sr_py.ConvertMatrixTypeAlg_get_p_newtype(*args)
    def get_p_nrow(*args): return _sr_py.ConvertMatrixTypeAlg_get_p_nrow(*args)
    def get_p_oldtype(*args): return _sr_py.ConvertMatrixTypeAlg_get_p_oldtype(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertMatrixTypeAlg_get_progress_reporter(*args)
    def set_p_ncol(*args): return _sr_py.ConvertMatrixTypeAlg_set_p_ncol(*args)
    def set_p_newtype(*args): return _sr_py.ConvertMatrixTypeAlg_set_p_newtype(*args)
    def set_p_nrow(*args): return _sr_py.ConvertMatrixTypeAlg_set_p_nrow(*args)
    def set_p_oldtype(*args): return _sr_py.ConvertMatrixTypeAlg_set_p_oldtype(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMatrixTypeAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMatrixTypeAlg_execute(*args)
ConvertMatrixTypeAlg_swigregister = _sr_py.ConvertMatrixTypeAlg_swigregister
ConvertMatrixTypeAlg_swigregister(ConvertMatrixTypeAlg)

get_convert_matrix_type_alg = _sr_py.get_convert_matrix_type_alg
class CreateGeometricTransformAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateGeometricTransformAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateGeometricTransformAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateGeometricTransformAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateGeometricTransformAlg
    __del__ = lambda self : None;
    def get_p_ignoring_widget_changes(*args): return _sr_py.CreateGeometricTransformAlg_get_p_ignoring_widget_changes(*args)
    def get_p_permute_x(*args): return _sr_py.CreateGeometricTransformAlg_get_p_permute_x(*args)
    def get_p_permute_y(*args): return _sr_py.CreateGeometricTransformAlg_get_p_permute_y(*args)
    def get_p_permute_z(*args): return _sr_py.CreateGeometricTransformAlg_get_p_permute_z(*args)
    def get_p_pre_transform(*args): return _sr_py.CreateGeometricTransformAlg_get_p_pre_transform(*args)
    def get_p_rotate_theta(*args): return _sr_py.CreateGeometricTransformAlg_get_p_rotate_theta(*args)
    def get_p_rotate_x(*args): return _sr_py.CreateGeometricTransformAlg_get_p_rotate_x(*args)
    def get_p_rotate_y(*args): return _sr_py.CreateGeometricTransformAlg_get_p_rotate_y(*args)
    def get_p_rotate_z(*args): return _sr_py.CreateGeometricTransformAlg_get_p_rotate_z(*args)
    def get_p_scale_uniform(*args): return _sr_py.CreateGeometricTransformAlg_get_p_scale_uniform(*args)
    def get_p_scale_x(*args): return _sr_py.CreateGeometricTransformAlg_get_p_scale_x(*args)
    def get_p_scale_y(*args): return _sr_py.CreateGeometricTransformAlg_get_p_scale_y(*args)
    def get_p_scale_z(*args): return _sr_py.CreateGeometricTransformAlg_get_p_scale_z(*args)
    def get_p_shear_plane_a(*args): return _sr_py.CreateGeometricTransformAlg_get_p_shear_plane_a(*args)
    def get_p_shear_plane_b(*args): return _sr_py.CreateGeometricTransformAlg_get_p_shear_plane_b(*args)
    def get_p_shear_plane_c(*args): return _sr_py.CreateGeometricTransformAlg_get_p_shear_plane_c(*args)
    def get_p_translate_x(*args): return _sr_py.CreateGeometricTransformAlg_get_p_translate_x(*args)
    def get_p_translate_y(*args): return _sr_py.CreateGeometricTransformAlg_get_p_translate_y(*args)
    def get_p_translate_z(*args): return _sr_py.CreateGeometricTransformAlg_get_p_translate_z(*args)
    def get_p_which_transform(*args): return _sr_py.CreateGeometricTransformAlg_get_p_which_transform(*args)
    def get_p_widget_resizable(*args): return _sr_py.CreateGeometricTransformAlg_get_p_widget_resizable(*args)
    def get_p_widget_scale(*args): return _sr_py.CreateGeometricTransformAlg_get_p_widget_scale(*args)
    def get_progress_reporter(*args): return _sr_py.CreateGeometricTransformAlg_get_progress_reporter(*args)
    def set_p_ignoring_widget_changes(*args): return _sr_py.CreateGeometricTransformAlg_set_p_ignoring_widget_changes(*args)
    def set_p_permute_x(*args): return _sr_py.CreateGeometricTransformAlg_set_p_permute_x(*args)
    def set_p_permute_y(*args): return _sr_py.CreateGeometricTransformAlg_set_p_permute_y(*args)
    def set_p_permute_z(*args): return _sr_py.CreateGeometricTransformAlg_set_p_permute_z(*args)
    def set_p_pre_transform(*args): return _sr_py.CreateGeometricTransformAlg_set_p_pre_transform(*args)
    def set_p_rotate_theta(*args): return _sr_py.CreateGeometricTransformAlg_set_p_rotate_theta(*args)
    def set_p_rotate_x(*args): return _sr_py.CreateGeometricTransformAlg_set_p_rotate_x(*args)
    def set_p_rotate_y(*args): return _sr_py.CreateGeometricTransformAlg_set_p_rotate_y(*args)
    def set_p_rotate_z(*args): return _sr_py.CreateGeometricTransformAlg_set_p_rotate_z(*args)
    def set_p_scale_uniform(*args): return _sr_py.CreateGeometricTransformAlg_set_p_scale_uniform(*args)
    def set_p_scale_x(*args): return _sr_py.CreateGeometricTransformAlg_set_p_scale_x(*args)
    def set_p_scale_y(*args): return _sr_py.CreateGeometricTransformAlg_set_p_scale_y(*args)
    def set_p_scale_z(*args): return _sr_py.CreateGeometricTransformAlg_set_p_scale_z(*args)
    def set_p_shear_plane_a(*args): return _sr_py.CreateGeometricTransformAlg_set_p_shear_plane_a(*args)
    def set_p_shear_plane_b(*args): return _sr_py.CreateGeometricTransformAlg_set_p_shear_plane_b(*args)
    def set_p_shear_plane_c(*args): return _sr_py.CreateGeometricTransformAlg_set_p_shear_plane_c(*args)
    def set_p_translate_x(*args): return _sr_py.CreateGeometricTransformAlg_set_p_translate_x(*args)
    def set_p_translate_y(*args): return _sr_py.CreateGeometricTransformAlg_set_p_translate_y(*args)
    def set_p_translate_z(*args): return _sr_py.CreateGeometricTransformAlg_set_p_translate_z(*args)
    def set_p_which_transform(*args): return _sr_py.CreateGeometricTransformAlg_set_p_which_transform(*args)
    def set_p_widget_resizable(*args): return _sr_py.CreateGeometricTransformAlg_set_p_widget_resizable(*args)
    def set_p_widget_scale(*args): return _sr_py.CreateGeometricTransformAlg_set_p_widget_scale(*args)
    def set_progress_reporter(*args): return _sr_py.CreateGeometricTransformAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateGeometricTransformAlg_execute(*args)
CreateGeometricTransformAlg_swigregister = _sr_py.CreateGeometricTransformAlg_swigregister
CreateGeometricTransformAlg_swigregister(CreateGeometricTransformAlg)

get_create_geometric_transform_alg = _sr_py.get_create_geometric_transform_alg
class CreateMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateMatrixAlg
    __del__ = lambda self : None;
    def get_p_clabel(*args): return _sr_py.CreateMatrixAlg_get_p_clabel(*args)
    def get_p_cols(*args): return _sr_py.CreateMatrixAlg_get_p_cols(*args)
    def get_p_data(*args): return _sr_py.CreateMatrixAlg_get_p_data(*args)
    def get_p_rlabel(*args): return _sr_py.CreateMatrixAlg_get_p_rlabel(*args)
    def get_p_rows(*args): return _sr_py.CreateMatrixAlg_get_p_rows(*args)
    def get_progress_reporter(*args): return _sr_py.CreateMatrixAlg_get_progress_reporter(*args)
    def set_p_clabel(*args): return _sr_py.CreateMatrixAlg_set_p_clabel(*args)
    def set_p_cols(*args): return _sr_py.CreateMatrixAlg_set_p_cols(*args)
    def set_p_data(*args): return _sr_py.CreateMatrixAlg_set_p_data(*args)
    def set_p_rlabel(*args): return _sr_py.CreateMatrixAlg_set_p_rlabel(*args)
    def set_p_rows(*args): return _sr_py.CreateMatrixAlg_set_p_rows(*args)
    def set_progress_reporter(*args): return _sr_py.CreateMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateMatrixAlg_execute(*args)
CreateMatrixAlg_swigregister = _sr_py.CreateMatrixAlg_swigregister
CreateMatrixAlg_swigregister(CreateMatrixAlg)

get_create_matrix_alg = _sr_py.get_create_matrix_alg
class EvaluateLinAlgBinaryAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EvaluateLinAlgBinaryAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EvaluateLinAlgBinaryAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_EvaluateLinAlgBinaryAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_EvaluateLinAlgBinaryAlg
    __del__ = lambda self : None;
    def get_p_function(*args): return _sr_py.EvaluateLinAlgBinaryAlg_get_p_function(*args)
    def get_p_op(*args): return _sr_py.EvaluateLinAlgBinaryAlg_get_p_op(*args)
    def get_progress_reporter(*args): return _sr_py.EvaluateLinAlgBinaryAlg_get_progress_reporter(*args)
    def set_p_function(*args): return _sr_py.EvaluateLinAlgBinaryAlg_set_p_function(*args)
    def set_p_op(*args): return _sr_py.EvaluateLinAlgBinaryAlg_set_p_op(*args)
    def set_progress_reporter(*args): return _sr_py.EvaluateLinAlgBinaryAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.EvaluateLinAlgBinaryAlg_execute(*args)
EvaluateLinAlgBinaryAlg_swigregister = _sr_py.EvaluateLinAlgBinaryAlg_swigregister
EvaluateLinAlgBinaryAlg_swigregister(EvaluateLinAlgBinaryAlg)

get_evaluate_lin_alg_binary_alg = _sr_py.get_evaluate_lin_alg_binary_alg
class EvaluateLinAlgGeneralAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EvaluateLinAlgGeneralAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EvaluateLinAlgGeneralAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_EvaluateLinAlgGeneralAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_EvaluateLinAlgGeneralAlg
    __del__ = lambda self : None;
    def get_p_function(*args): return _sr_py.EvaluateLinAlgGeneralAlg_get_p_function(*args)
    def get_progress_reporter(*args): return _sr_py.EvaluateLinAlgGeneralAlg_get_progress_reporter(*args)
    def set_p_function(*args): return _sr_py.EvaluateLinAlgGeneralAlg_set_p_function(*args)
    def set_progress_reporter(*args): return _sr_py.EvaluateLinAlgGeneralAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.EvaluateLinAlgGeneralAlg_execute(*args)
EvaluateLinAlgGeneralAlg_swigregister = _sr_py.EvaluateLinAlgGeneralAlg_swigregister
EvaluateLinAlgGeneralAlg_swigregister(EvaluateLinAlgGeneralAlg)

get_evaluate_lin_alg_general_alg = _sr_py.get_evaluate_lin_alg_general_alg
class EvaluateLinAlgUnaryAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EvaluateLinAlgUnaryAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EvaluateLinAlgUnaryAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_EvaluateLinAlgUnaryAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_EvaluateLinAlgUnaryAlg
    __del__ = lambda self : None;
    def get_p_function(*args): return _sr_py.EvaluateLinAlgUnaryAlg_get_p_function(*args)
    def get_p_op(*args): return _sr_py.EvaluateLinAlgUnaryAlg_get_p_op(*args)
    def get_progress_reporter(*args): return _sr_py.EvaluateLinAlgUnaryAlg_get_progress_reporter(*args)
    def set_p_function(*args): return _sr_py.EvaluateLinAlgUnaryAlg_set_p_function(*args)
    def set_p_op(*args): return _sr_py.EvaluateLinAlgUnaryAlg_set_p_op(*args)
    def set_progress_reporter(*args): return _sr_py.EvaluateLinAlgUnaryAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.EvaluateLinAlgUnaryAlg_execute(*args)
EvaluateLinAlgUnaryAlg_swigregister = _sr_py.EvaluateLinAlgUnaryAlg_swigregister
EvaluateLinAlgUnaryAlg_swigregister(EvaluateLinAlgUnaryAlg)

get_evaluate_lin_alg_unary_alg = _sr_py.get_evaluate_lin_alg_unary_alg
class GetColumnOrRowFromMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetColumnOrRowFromMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetColumnOrRowFromMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetColumnOrRowFromMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetColumnOrRowFromMatrixAlg
    __del__ = lambda self : None;
    def get_p_current(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_current(*args)
    def get_p_data_series_done(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_data_series_done(*args)
    def get_p_delay(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_delay(*args)
    def get_p_execmode(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_execmode(*args)
    def get_p_inc_amount(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_inc_amount(*args)
    def get_p_playmode(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_playmode(*args)
    def get_p_range_max(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_range_max(*args)
    def get_p_range_min(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_range_min(*args)
    def get_p_row_or_col(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_row_or_col(*args)
    def get_p_selectable_inc(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_selectable_inc(*args)
    def get_p_selectable_max(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_selectable_max(*args)
    def get_p_selectable_min(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_selectable_min(*args)
    def get_p_selectable_units(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_selectable_units(*args)
    def get_p_send_amount(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_p_send_amount(*args)
    def get_progress_reporter(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_get_progress_reporter(*args)
    def set_p_current(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_current(*args)
    def set_p_data_series_done(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_data_series_done(*args)
    def set_p_delay(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_delay(*args)
    def set_p_execmode(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_execmode(*args)
    def set_p_inc_amount(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_inc_amount(*args)
    def set_p_playmode(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_playmode(*args)
    def set_p_range_max(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_range_max(*args)
    def set_p_range_min(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_range_min(*args)
    def set_p_row_or_col(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_row_or_col(*args)
    def set_p_selectable_inc(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_selectable_inc(*args)
    def set_p_selectable_max(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_selectable_max(*args)
    def set_p_selectable_min(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_selectable_min(*args)
    def set_p_selectable_units(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_selectable_units(*args)
    def set_p_send_amount(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_p_send_amount(*args)
    def set_progress_reporter(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetColumnOrRowFromMatrixAlg_execute(*args)
GetColumnOrRowFromMatrixAlg_swigregister = _sr_py.GetColumnOrRowFromMatrixAlg_swigregister
GetColumnOrRowFromMatrixAlg_swigregister(GetColumnOrRowFromMatrixAlg)

get_get_column_or_row_from_matrix_alg = _sr_py.get_get_column_or_row_from_matrix_alg
class GetSubmatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetSubmatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetSubmatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetSubmatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetSubmatrixAlg
    __del__ = lambda self : None;
    def get_p_maxcol(*args): return _sr_py.GetSubmatrixAlg_get_p_maxcol(*args)
    def get_p_maxrow(*args): return _sr_py.GetSubmatrixAlg_get_p_maxrow(*args)
    def get_p_mincol(*args): return _sr_py.GetSubmatrixAlg_get_p_mincol(*args)
    def get_p_minrow(*args): return _sr_py.GetSubmatrixAlg_get_p_minrow(*args)
    def get_p_ncol(*args): return _sr_py.GetSubmatrixAlg_get_p_ncol(*args)
    def get_p_nrow(*args): return _sr_py.GetSubmatrixAlg_get_p_nrow(*args)
    def get_progress_reporter(*args): return _sr_py.GetSubmatrixAlg_get_progress_reporter(*args)
    def set_p_maxcol(*args): return _sr_py.GetSubmatrixAlg_set_p_maxcol(*args)
    def set_p_maxrow(*args): return _sr_py.GetSubmatrixAlg_set_p_maxrow(*args)
    def set_p_mincol(*args): return _sr_py.GetSubmatrixAlg_set_p_mincol(*args)
    def set_p_minrow(*args): return _sr_py.GetSubmatrixAlg_set_p_minrow(*args)
    def set_p_ncol(*args): return _sr_py.GetSubmatrixAlg_set_p_ncol(*args)
    def set_p_nrow(*args): return _sr_py.GetSubmatrixAlg_set_p_nrow(*args)
    def set_progress_reporter(*args): return _sr_py.GetSubmatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetSubmatrixAlg_execute(*args)
GetSubmatrixAlg_swigregister = _sr_py.GetSubmatrixAlg_swigregister
GetSubmatrixAlg_swigregister(GetSubmatrixAlg)

get_get_submatrix_alg = _sr_py.get_get_submatrix_alg
class RemoveZeroRowsAndColumnsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoveZeroRowsAndColumnsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RemoveZeroRowsAndColumnsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_RemoveZeroRowsAndColumnsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_RemoveZeroRowsAndColumnsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.RemoveZeroRowsAndColumnsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.RemoveZeroRowsAndColumnsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.RemoveZeroRowsAndColumnsAlg_execute(*args)
RemoveZeroRowsAndColumnsAlg_swigregister = _sr_py.RemoveZeroRowsAndColumnsAlg_swigregister
RemoveZeroRowsAndColumnsAlg_swigregister(RemoveZeroRowsAndColumnsAlg)

get_remove_zero_rows_and_columns_alg = _sr_py.get_remove_zero_rows_and_columns_alg
class RemoveZerosFromMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoveZerosFromMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RemoveZerosFromMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_RemoveZerosFromMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_RemoveZerosFromMatrixAlg
    __del__ = lambda self : None;
    def get_p_row_or_col(*args): return _sr_py.RemoveZerosFromMatrixAlg_get_p_row_or_col(*args)
    def get_progress_reporter(*args): return _sr_py.RemoveZerosFromMatrixAlg_get_progress_reporter(*args)
    def set_p_row_or_col(*args): return _sr_py.RemoveZerosFromMatrixAlg_set_p_row_or_col(*args)
    def set_progress_reporter(*args): return _sr_py.RemoveZerosFromMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.RemoveZerosFromMatrixAlg_execute(*args)
RemoveZerosFromMatrixAlg_swigregister = _sr_py.RemoveZerosFromMatrixAlg_swigregister
RemoveZerosFromMatrixAlg_swigregister(RemoveZerosFromMatrixAlg)

get_remove_zeros_from_matrix_alg = _sr_py.get_remove_zeros_from_matrix_alg
class ReorderMatrixByCuthillMcKeeAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReorderMatrixByCuthillMcKeeAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReorderMatrixByCuthillMcKeeAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReorderMatrixByCuthillMcKeeAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReorderMatrixByCuthillMcKeeAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ReorderMatrixByCuthillMcKeeAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ReorderMatrixByCuthillMcKeeAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReorderMatrixByCuthillMcKeeAlg_execute(*args)
ReorderMatrixByCuthillMcKeeAlg_swigregister = _sr_py.ReorderMatrixByCuthillMcKeeAlg_swigregister
ReorderMatrixByCuthillMcKeeAlg_swigregister(ReorderMatrixByCuthillMcKeeAlg)

get_reorder_matrix_by_cuthill_mc_kee_alg = _sr_py.get_reorder_matrix_by_cuthill_mc_kee_alg
class ReorderMatrixByReverseCuthillMcKeeAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReorderMatrixByReverseCuthillMcKeeAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReorderMatrixByReverseCuthillMcKeeAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReorderMatrixByReverseCuthillMcKeeAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReorderMatrixByReverseCuthillMcKeeAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ReorderMatrixByReverseCuthillMcKeeAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ReorderMatrixByReverseCuthillMcKeeAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReorderMatrixByReverseCuthillMcKeeAlg_execute(*args)
ReorderMatrixByReverseCuthillMcKeeAlg_swigregister = _sr_py.ReorderMatrixByReverseCuthillMcKeeAlg_swigregister
ReorderMatrixByReverseCuthillMcKeeAlg_swigregister(ReorderMatrixByReverseCuthillMcKeeAlg)

get_reorder_matrix_by_reverse_cuthill_mc_kee_alg = _sr_py.get_reorder_matrix_by_reverse_cuthill_mc_kee_alg
class ReportColumnMatrixMisfitAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportColumnMatrixMisfitAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportColumnMatrixMisfitAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportColumnMatrixMisfitAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportColumnMatrixMisfitAlg
    __del__ = lambda self : None;
    def get_p_have_ui(*args): return _sr_py.ReportColumnMatrixMisfitAlg_get_p_have_ui(*args)
    def get_p_methodTCL(*args): return _sr_py.ReportColumnMatrixMisfitAlg_get_p_methodTCL(*args)
    def get_p_pTCL(*args): return _sr_py.ReportColumnMatrixMisfitAlg_get_p_pTCL(*args)
    def get_progress_reporter(*args): return _sr_py.ReportColumnMatrixMisfitAlg_get_progress_reporter(*args)
    def set_p_have_ui(*args): return _sr_py.ReportColumnMatrixMisfitAlg_set_p_have_ui(*args)
    def set_p_methodTCL(*args): return _sr_py.ReportColumnMatrixMisfitAlg_set_p_methodTCL(*args)
    def set_p_pTCL(*args): return _sr_py.ReportColumnMatrixMisfitAlg_set_p_pTCL(*args)
    def set_progress_reporter(*args): return _sr_py.ReportColumnMatrixMisfitAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportColumnMatrixMisfitAlg_execute(*args)
ReportColumnMatrixMisfitAlg_swigregister = _sr_py.ReportColumnMatrixMisfitAlg_swigregister
ReportColumnMatrixMisfitAlg_swigregister(ReportColumnMatrixMisfitAlg)

get_report_column_matrix_misfit_alg = _sr_py.get_report_column_matrix_misfit_alg
class ReportMatrixColumnMeasureAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportMatrixColumnMeasureAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportMatrixColumnMeasureAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportMatrixColumnMeasureAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportMatrixColumnMeasureAlg
    __del__ = lambda self : None;
    def get_p_method(*args): return _sr_py.ReportMatrixColumnMeasureAlg_get_p_method(*args)
    def get_progress_reporter(*args): return _sr_py.ReportMatrixColumnMeasureAlg_get_progress_reporter(*args)
    def set_p_method(*args): return _sr_py.ReportMatrixColumnMeasureAlg_set_p_method(*args)
    def set_progress_reporter(*args): return _sr_py.ReportMatrixColumnMeasureAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportMatrixColumnMeasureAlg_execute(*args)
ReportMatrixColumnMeasureAlg_swigregister = _sr_py.ReportMatrixColumnMeasureAlg_swigregister
ReportMatrixColumnMeasureAlg_swigregister(ReportMatrixColumnMeasureAlg)

get_report_matrix_column_measure_alg = _sr_py.get_report_matrix_column_measure_alg
class ReportMatrixInfoAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportMatrixInfoAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportMatrixInfoAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportMatrixInfoAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportMatrixInfoAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ReportMatrixInfoAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ReportMatrixInfoAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportMatrixInfoAlg_execute(*args)
ReportMatrixInfoAlg_swigregister = _sr_py.ReportMatrixInfoAlg_swigregister
ReportMatrixInfoAlg_swigregister(ReportMatrixInfoAlg)

get_report_matrix_info_alg = _sr_py.get_report_matrix_info_alg
class ReportMatrixRowMeasureAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportMatrixRowMeasureAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportMatrixRowMeasureAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportMatrixRowMeasureAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportMatrixRowMeasureAlg
    __del__ = lambda self : None;
    def get_p_method(*args): return _sr_py.ReportMatrixRowMeasureAlg_get_p_method(*args)
    def get_progress_reporter(*args): return _sr_py.ReportMatrixRowMeasureAlg_get_progress_reporter(*args)
    def set_p_method(*args): return _sr_py.ReportMatrixRowMeasureAlg_set_p_method(*args)
    def set_progress_reporter(*args): return _sr_py.ReportMatrixRowMeasureAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportMatrixRowMeasureAlg_execute(*args)
ReportMatrixRowMeasureAlg_swigregister = _sr_py.ReportMatrixRowMeasureAlg_swigregister
ReportMatrixRowMeasureAlg_swigregister(ReportMatrixRowMeasureAlg)

get_report_matrix_row_measure_alg = _sr_py.get_report_matrix_row_measure_alg
class ResizeMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResizeMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResizeMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ResizeMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ResizeMatrixAlg
    __del__ = lambda self : None;
    def get_p_dim_m(*args): return _sr_py.ResizeMatrixAlg_get_p_dim_m(*args)
    def get_p_dim_n(*args): return _sr_py.ResizeMatrixAlg_get_p_dim_n(*args)
    def get_progress_reporter(*args): return _sr_py.ResizeMatrixAlg_get_progress_reporter(*args)
    def set_p_dim_m(*args): return _sr_py.ResizeMatrixAlg_set_p_dim_m(*args)
    def set_p_dim_n(*args): return _sr_py.ResizeMatrixAlg_set_p_dim_n(*args)
    def set_progress_reporter(*args): return _sr_py.ResizeMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ResizeMatrixAlg_execute(*args)
ResizeMatrixAlg_swigregister = _sr_py.ResizeMatrixAlg_swigregister
ResizeMatrixAlg_swigregister(ResizeMatrixAlg)

get_resize_matrix_alg = _sr_py.get_resize_matrix_alg
class SolveLinearSystemAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolveLinearSystemAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolveLinearSystemAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SolveLinearSystemAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SolveLinearSystemAlg
    __del__ = lambda self : None;
    def get_p_current_error(*args): return _sr_py.SolveLinearSystemAlg_get_p_current_error(*args)
    def get_p_emit_iter(*args): return _sr_py.SolveLinearSystemAlg_get_p_emit_iter(*args)
    def get_p_emit_partial(*args): return _sr_py.SolveLinearSystemAlg_get_p_emit_partial(*args)
    def get_p_floprate(*args): return _sr_py.SolveLinearSystemAlg_get_p_floprate(*args)
    def get_p_flops(*args): return _sr_py.SolveLinearSystemAlg_get_p_flops(*args)
    def get_p_iteration(*args): return _sr_py.SolveLinearSystemAlg_get_p_iteration(*args)
    def get_p_maxiter(*args): return _sr_py.SolveLinearSystemAlg_get_p_maxiter(*args)
    def get_p_memrate(*args): return _sr_py.SolveLinearSystemAlg_get_p_memrate(*args)
    def get_p_memrefs(*args): return _sr_py.SolveLinearSystemAlg_get_p_memrefs(*args)
    def get_p_method(*args): return _sr_py.SolveLinearSystemAlg_get_p_method(*args)
    def get_p_np(*args): return _sr_py.SolveLinearSystemAlg_get_p_np(*args)
    def get_p_orig_error(*args): return _sr_py.SolveLinearSystemAlg_get_p_orig_error(*args)
    def get_p_precond(*args): return _sr_py.SolveLinearSystemAlg_get_p_precond(*args)
    def get_p_status(*args): return _sr_py.SolveLinearSystemAlg_get_p_status(*args)
    def get_p_target_error(*args): return _sr_py.SolveLinearSystemAlg_get_p_target_error(*args)
    def get_p_use_previous_soln(*args): return _sr_py.SolveLinearSystemAlg_get_p_use_previous_soln(*args)
    def get_progress_reporter(*args): return _sr_py.SolveLinearSystemAlg_get_progress_reporter(*args)
    def set_p_current_error(*args): return _sr_py.SolveLinearSystemAlg_set_p_current_error(*args)
    def set_p_emit_iter(*args): return _sr_py.SolveLinearSystemAlg_set_p_emit_iter(*args)
    def set_p_emit_partial(*args): return _sr_py.SolveLinearSystemAlg_set_p_emit_partial(*args)
    def set_p_floprate(*args): return _sr_py.SolveLinearSystemAlg_set_p_floprate(*args)
    def set_p_flops(*args): return _sr_py.SolveLinearSystemAlg_set_p_flops(*args)
    def set_p_iteration(*args): return _sr_py.SolveLinearSystemAlg_set_p_iteration(*args)
    def set_p_maxiter(*args): return _sr_py.SolveLinearSystemAlg_set_p_maxiter(*args)
    def set_p_memrate(*args): return _sr_py.SolveLinearSystemAlg_set_p_memrate(*args)
    def set_p_memrefs(*args): return _sr_py.SolveLinearSystemAlg_set_p_memrefs(*args)
    def set_p_method(*args): return _sr_py.SolveLinearSystemAlg_set_p_method(*args)
    def set_p_np(*args): return _sr_py.SolveLinearSystemAlg_set_p_np(*args)
    def set_p_orig_error(*args): return _sr_py.SolveLinearSystemAlg_set_p_orig_error(*args)
    def set_p_precond(*args): return _sr_py.SolveLinearSystemAlg_set_p_precond(*args)
    def set_p_status(*args): return _sr_py.SolveLinearSystemAlg_set_p_status(*args)
    def set_p_target_error(*args): return _sr_py.SolveLinearSystemAlg_set_p_target_error(*args)
    def set_p_use_previous_soln(*args): return _sr_py.SolveLinearSystemAlg_set_p_use_previous_soln(*args)
    def set_progress_reporter(*args): return _sr_py.SolveLinearSystemAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SolveLinearSystemAlg_execute(*args)
SolveLinearSystemAlg_swigregister = _sr_py.SolveLinearSystemAlg_swigregister
SolveLinearSystemAlg_swigregister(SolveLinearSystemAlg)

get_solve_linear_system_alg = _sr_py.get_solve_linear_system_alg
class SolveMinNormLeastSqSystemAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolveMinNormLeastSqSystemAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolveMinNormLeastSqSystemAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SolveMinNormLeastSqSystemAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SolveMinNormLeastSqSystemAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.SolveMinNormLeastSqSystemAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.SolveMinNormLeastSqSystemAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SolveMinNormLeastSqSystemAlg_execute(*args)
SolveMinNormLeastSqSystemAlg_swigregister = _sr_py.SolveMinNormLeastSqSystemAlg_swigregister
SolveMinNormLeastSqSystemAlg_swigregister(SolveMinNormLeastSqSystemAlg)

get_solve_min_norm_least_sq_system_alg = _sr_py.get_solve_min_norm_least_sq_system_alg
class SortMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SortMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SortMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SortMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SortMatrixAlg
    __del__ = lambda self : None;
    def get_p_row_or_col(*args): return _sr_py.SortMatrixAlg_get_p_row_or_col(*args)
    def get_progress_reporter(*args): return _sr_py.SortMatrixAlg_get_progress_reporter(*args)
    def set_p_row_or_col(*args): return _sr_py.SortMatrixAlg_set_p_row_or_col(*args)
    def set_progress_reporter(*args): return _sr_py.SortMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SortMatrixAlg_execute(*args)
SortMatrixAlg_swigregister = _sr_py.SortMatrixAlg_swigregister
SortMatrixAlg_swigregister(SortMatrixAlg)

get_sort_matrix_alg = _sr_py.get_sort_matrix_alg
class BuildMappingMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildMappingMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuildMappingMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_BuildMappingMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_BuildMappingMatrixAlg
    __del__ = lambda self : None;
    def get_p_exhaustive_search(*args): return _sr_py.BuildMappingMatrixAlg_get_p_exhaustive_search(*args)
    def get_p_exhaustive_search_max_dist(*args): return _sr_py.BuildMappingMatrixAlg_get_p_exhaustive_search_max_dist(*args)
    def get_p_interpolation_basis(*args): return _sr_py.BuildMappingMatrixAlg_get_p_interpolation_basis(*args)
    def get_p_map_source_to_single_dest(*args): return _sr_py.BuildMappingMatrixAlg_get_p_map_source_to_single_dest(*args)
    def get_p_np(*args): return _sr_py.BuildMappingMatrixAlg_get_p_np(*args)
    def get_progress_reporter(*args): return _sr_py.BuildMappingMatrixAlg_get_progress_reporter(*args)
    def set_p_exhaustive_search(*args): return _sr_py.BuildMappingMatrixAlg_set_p_exhaustive_search(*args)
    def set_p_exhaustive_search_max_dist(*args): return _sr_py.BuildMappingMatrixAlg_set_p_exhaustive_search_max_dist(*args)
    def set_p_interpolation_basis(*args): return _sr_py.BuildMappingMatrixAlg_set_p_interpolation_basis(*args)
    def set_p_map_source_to_single_dest(*args): return _sr_py.BuildMappingMatrixAlg_set_p_map_source_to_single_dest(*args)
    def set_p_np(*args): return _sr_py.BuildMappingMatrixAlg_set_p_np(*args)
    def set_progress_reporter(*args): return _sr_py.BuildMappingMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.BuildMappingMatrixAlg_execute(*args)
BuildMappingMatrixAlg_swigregister = _sr_py.BuildMappingMatrixAlg_swigregister
BuildMappingMatrixAlg_swigregister(BuildMappingMatrixAlg)

get_build_mapping_matrix_alg = _sr_py.get_build_mapping_matrix_alg
class BuildMatrixOfSurfaceNormalsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildMatrixOfSurfaceNormalsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuildMatrixOfSurfaceNormalsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_BuildMatrixOfSurfaceNormalsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_BuildMatrixOfSurfaceNormalsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.BuildMatrixOfSurfaceNormalsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.BuildMatrixOfSurfaceNormalsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.BuildMatrixOfSurfaceNormalsAlg_execute(*args)
BuildMatrixOfSurfaceNormalsAlg_swigregister = _sr_py.BuildMatrixOfSurfaceNormalsAlg_swigregister
BuildMatrixOfSurfaceNormalsAlg_swigregister(BuildMatrixOfSurfaceNormalsAlg)

get_build_matrix_of_surface_normals_alg = _sr_py.get_build_matrix_of_surface_normals_alg
class BuildPointCloudToLatVolMappingMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildPointCloudToLatVolMappingMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuildPointCloudToLatVolMappingMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_BuildPointCloudToLatVolMappingMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_BuildPointCloudToLatVolMappingMatrixAlg
    __del__ = lambda self : None;
    def get_p_epsilon(*args): return _sr_py.BuildPointCloudToLatVolMappingMatrixAlg_get_p_epsilon(*args)
    def get_progress_reporter(*args): return _sr_py.BuildPointCloudToLatVolMappingMatrixAlg_get_progress_reporter(*args)
    def set_p_epsilon(*args): return _sr_py.BuildPointCloudToLatVolMappingMatrixAlg_set_p_epsilon(*args)
    def set_progress_reporter(*args): return _sr_py.BuildPointCloudToLatVolMappingMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.BuildPointCloudToLatVolMappingMatrixAlg_execute(*args)
BuildPointCloudToLatVolMappingMatrixAlg_swigregister = _sr_py.BuildPointCloudToLatVolMappingMatrixAlg_swigregister
BuildPointCloudToLatVolMappingMatrixAlg_swigregister(BuildPointCloudToLatVolMappingMatrixAlg)

get_build_point_cloud_to_lat_vol_mapping_matrix_alg = _sr_py.get_build_point_cloud_to_lat_vol_mapping_matrix_alg
class ChooseFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChooseFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChooseFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ChooseFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ChooseFieldAlg
    __del__ = lambda self : None;
    def get_p_port_selected_index(*args): return _sr_py.ChooseFieldAlg_get_p_port_selected_index(*args)
    def get_p_port_valid_index(*args): return _sr_py.ChooseFieldAlg_get_p_port_valid_index(*args)
    def get_p_use_first_valid(*args): return _sr_py.ChooseFieldAlg_get_p_use_first_valid(*args)
    def get_progress_reporter(*args): return _sr_py.ChooseFieldAlg_get_progress_reporter(*args)
    def set_p_port_selected_index(*args): return _sr_py.ChooseFieldAlg_set_p_port_selected_index(*args)
    def set_p_port_valid_index(*args): return _sr_py.ChooseFieldAlg_set_p_port_valid_index(*args)
    def set_p_use_first_valid(*args): return _sr_py.ChooseFieldAlg_set_p_use_first_valid(*args)
    def set_progress_reporter(*args): return _sr_py.ChooseFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ChooseFieldAlg_execute(*args)
ChooseFieldAlg_swigregister = _sr_py.ChooseFieldAlg_swigregister
ChooseFieldAlg_swigregister(ChooseFieldAlg)

get_choose_field_alg = _sr_py.get_choose_field_alg
class CollectPointCloudsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectPointCloudsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectPointCloudsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CollectPointCloudsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CollectPointCloudsAlg
    __del__ = lambda self : None;
    def get_p_num_fields(*args): return _sr_py.CollectPointCloudsAlg_get_p_num_fields(*args)
    def get_progress_reporter(*args): return _sr_py.CollectPointCloudsAlg_get_progress_reporter(*args)
    def set_p_num_fields(*args): return _sr_py.CollectPointCloudsAlg_set_p_num_fields(*args)
    def set_progress_reporter(*args): return _sr_py.CollectPointCloudsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CollectPointCloudsAlg_execute(*args)
CollectPointCloudsAlg_swigregister = _sr_py.CollectPointCloudsAlg_swigregister
CollectPointCloudsAlg_swigregister(CollectPointCloudsAlg)

get_collect_point_clouds_alg = _sr_py.get_collect_point_clouds_alg
class CoregisterPointCloudsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoregisterPointCloudsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoregisterPointCloudsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CoregisterPointCloudsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CoregisterPointCloudsAlg
    __del__ = lambda self : None;
    def get_p_allowRotate(*args): return _sr_py.CoregisterPointCloudsAlg_get_p_allowRotate(*args)
    def get_p_allowScale(*args): return _sr_py.CoregisterPointCloudsAlg_get_p_allowScale(*args)
    def get_p_allowTranslate(*args): return _sr_py.CoregisterPointCloudsAlg_get_p_allowTranslate(*args)
    def get_p_iters(*args): return _sr_py.CoregisterPointCloudsAlg_get_p_iters(*args)
    def get_p_method(*args): return _sr_py.CoregisterPointCloudsAlg_get_p_method(*args)
    def get_p_misfitTol(*args): return _sr_py.CoregisterPointCloudsAlg_get_p_misfitTol(*args)
    def get_p_seed(*args): return _sr_py.CoregisterPointCloudsAlg_get_p_seed(*args)
    def get_progress_reporter(*args): return _sr_py.CoregisterPointCloudsAlg_get_progress_reporter(*args)
    def set_p_allowRotate(*args): return _sr_py.CoregisterPointCloudsAlg_set_p_allowRotate(*args)
    def set_p_allowScale(*args): return _sr_py.CoregisterPointCloudsAlg_set_p_allowScale(*args)
    def set_p_allowTranslate(*args): return _sr_py.CoregisterPointCloudsAlg_set_p_allowTranslate(*args)
    def set_p_iters(*args): return _sr_py.CoregisterPointCloudsAlg_set_p_iters(*args)
    def set_p_method(*args): return _sr_py.CoregisterPointCloudsAlg_set_p_method(*args)
    def set_p_misfitTol(*args): return _sr_py.CoregisterPointCloudsAlg_set_p_misfitTol(*args)
    def set_p_seed(*args): return _sr_py.CoregisterPointCloudsAlg_set_p_seed(*args)
    def set_progress_reporter(*args): return _sr_py.CoregisterPointCloudsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CoregisterPointCloudsAlg_execute(*args)
CoregisterPointCloudsAlg_swigregister = _sr_py.CoregisterPointCloudsAlg_swigregister
CoregisterPointCloudsAlg_swigregister(CoregisterPointCloudsAlg)

get_coregister_point_clouds_alg = _sr_py.get_coregister_point_clouds_alg
class ManageFieldSeriesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ManageFieldSeriesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ManageFieldSeriesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ManageFieldSeriesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ManageFieldSeriesAlg
    __del__ = lambda self : None;
    def get_p_num_ports(*args): return _sr_py.ManageFieldSeriesAlg_get_p_num_ports(*args)
    def get_progress_reporter(*args): return _sr_py.ManageFieldSeriesAlg_get_progress_reporter(*args)
    def set_p_num_ports(*args): return _sr_py.ManageFieldSeriesAlg_set_p_num_ports(*args)
    def set_progress_reporter(*args): return _sr_py.ManageFieldSeriesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ManageFieldSeriesAlg_execute(*args)
ManageFieldSeriesAlg_swigregister = _sr_py.ManageFieldSeriesAlg_swigregister
ManageFieldSeriesAlg_swigregister(ManageFieldSeriesAlg)

get_manage_field_series_alg = _sr_py.get_manage_field_series_alg
class ReportFieldGeometryMeasuresAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportFieldGeometryMeasuresAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportFieldGeometryMeasuresAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportFieldGeometryMeasuresAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportFieldGeometryMeasuresAlg
    __del__ = lambda self : None;
    def get_p_idxFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_get_p_idxFlag(*args)
    def get_p_normalsFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_get_p_normalsFlag(*args)
    def get_p_simplexString(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_get_p_simplexString(*args)
    def get_p_sizeFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_get_p_sizeFlag(*args)
    def get_p_xFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_get_p_xFlag(*args)
    def get_p_yFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_get_p_yFlag(*args)
    def get_p_zFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_get_p_zFlag(*args)
    def get_progress_reporter(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_get_progress_reporter(*args)
    def set_p_idxFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_set_p_idxFlag(*args)
    def set_p_normalsFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_set_p_normalsFlag(*args)
    def set_p_simplexString(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_set_p_simplexString(*args)
    def set_p_sizeFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_set_p_sizeFlag(*args)
    def set_p_xFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_set_p_xFlag(*args)
    def set_p_yFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_set_p_yFlag(*args)
    def set_p_zFlag(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_set_p_zFlag(*args)
    def set_progress_reporter(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportFieldGeometryMeasuresAlg_execute(*args)
ReportFieldGeometryMeasuresAlg_swigregister = _sr_py.ReportFieldGeometryMeasuresAlg_swigregister
ReportFieldGeometryMeasuresAlg_swigregister(ReportFieldGeometryMeasuresAlg)

get_report_field_geometry_measures_alg = _sr_py.get_report_field_geometry_measures_alg
class ReportFieldInfoAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportFieldInfoAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportFieldInfoAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportFieldInfoAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportFieldInfoAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ReportFieldInfoAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ReportFieldInfoAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportFieldInfoAlg_execute(*args)
ReportFieldInfoAlg_swigregister = _sr_py.ReportFieldInfoAlg_swigregister
ReportFieldInfoAlg_swigregister(ReportFieldInfoAlg)

get_report_field_info_alg = _sr_py.get_report_field_info_alg
class ReportScalarFieldStatsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportScalarFieldStatsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportScalarFieldStatsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportScalarFieldStatsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportScalarFieldStatsAlg
    __del__ = lambda self : None;
    def get_p_is_fixed(*args): return _sr_py.ReportScalarFieldStatsAlg_get_p_is_fixed(*args)
    def get_p_max(*args): return _sr_py.ReportScalarFieldStatsAlg_get_p_max(*args)
    def get_p_mean(*args): return _sr_py.ReportScalarFieldStatsAlg_get_p_mean(*args)
    def get_p_median(*args): return _sr_py.ReportScalarFieldStatsAlg_get_p_median(*args)
    def get_p_min(*args): return _sr_py.ReportScalarFieldStatsAlg_get_p_min(*args)
    def get_p_nbuckets(*args): return _sr_py.ReportScalarFieldStatsAlg_get_p_nbuckets(*args)
    def get_p_sigma(*args): return _sr_py.ReportScalarFieldStatsAlg_get_p_sigma(*args)
    def get_progress_reporter(*args): return _sr_py.ReportScalarFieldStatsAlg_get_progress_reporter(*args)
    def set_p_is_fixed(*args): return _sr_py.ReportScalarFieldStatsAlg_set_p_is_fixed(*args)
    def set_p_max(*args): return _sr_py.ReportScalarFieldStatsAlg_set_p_max(*args)
    def set_p_mean(*args): return _sr_py.ReportScalarFieldStatsAlg_set_p_mean(*args)
    def set_p_median(*args): return _sr_py.ReportScalarFieldStatsAlg_set_p_median(*args)
    def set_p_min(*args): return _sr_py.ReportScalarFieldStatsAlg_set_p_min(*args)
    def set_p_nbuckets(*args): return _sr_py.ReportScalarFieldStatsAlg_set_p_nbuckets(*args)
    def set_p_sigma(*args): return _sr_py.ReportScalarFieldStatsAlg_set_p_sigma(*args)
    def set_progress_reporter(*args): return _sr_py.ReportScalarFieldStatsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportScalarFieldStatsAlg_execute(*args)
ReportScalarFieldStatsAlg_swigregister = _sr_py.ReportScalarFieldStatsAlg_swigregister
ReportScalarFieldStatsAlg_swigregister(ReportScalarFieldStatsAlg)

get_report_scalar_field_stats_alg = _sr_py.get_report_scalar_field_stats_alg
class ReportSearchGridInfoAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportSearchGridInfoAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportSearchGridInfoAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportSearchGridInfoAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportSearchGridInfoAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ReportSearchGridInfoAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ReportSearchGridInfoAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportSearchGridInfoAlg_execute(*args)
ReportSearchGridInfoAlg_swigregister = _sr_py.ReportSearchGridInfoAlg_swigregister
ReportSearchGridInfoAlg_swigregister(ReportSearchGridInfoAlg)

get_report_search_grid_info_alg = _sr_py.get_report_search_grid_info_alg
class SelectFieldROIWithBoxWidgetAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SelectFieldROIWithBoxWidgetAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SelectFieldROIWithBoxWidgetAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SelectFieldROIWithBoxWidgetAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SelectFieldROIWithBoxWidgetAlg
    __del__ = lambda self : None;
    def get_p_runmode(*args): return _sr_py.SelectFieldROIWithBoxWidgetAlg_get_p_runmode(*args)
    def get_p_stampvalue(*args): return _sr_py.SelectFieldROIWithBoxWidgetAlg_get_p_stampvalue(*args)
    def get_progress_reporter(*args): return _sr_py.SelectFieldROIWithBoxWidgetAlg_get_progress_reporter(*args)
    def set_p_runmode(*args): return _sr_py.SelectFieldROIWithBoxWidgetAlg_set_p_runmode(*args)
    def set_p_stampvalue(*args): return _sr_py.SelectFieldROIWithBoxWidgetAlg_set_p_stampvalue(*args)
    def set_progress_reporter(*args): return _sr_py.SelectFieldROIWithBoxWidgetAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SelectFieldROIWithBoxWidgetAlg_execute(*args)
SelectFieldROIWithBoxWidgetAlg_swigregister = _sr_py.SelectFieldROIWithBoxWidgetAlg_swigregister
SelectFieldROIWithBoxWidgetAlg_swigregister(SelectFieldROIWithBoxWidgetAlg)

get_select_field_r_o_i_with_box_widget_alg = _sr_py.get_select_field_r_o_i_with_box_widget_alg
class SetFieldOrMeshStringPropertyAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetFieldOrMeshStringPropertyAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetFieldOrMeshStringPropertyAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SetFieldOrMeshStringPropertyAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SetFieldOrMeshStringPropertyAlg
    __del__ = lambda self : None;
    def get_p_meshprop(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_get_p_meshprop(*args)
    def get_p_prop(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_get_p_prop(*args)
    def get_p_val(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_get_p_val(*args)
    def get_progress_reporter(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_get_progress_reporter(*args)
    def set_p_meshprop(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_set_p_meshprop(*args)
    def set_p_prop(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_set_p_prop(*args)
    def set_p_val(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_set_p_val(*args)
    def set_progress_reporter(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SetFieldOrMeshStringPropertyAlg_execute(*args)
SetFieldOrMeshStringPropertyAlg_swigregister = _sr_py.SetFieldOrMeshStringPropertyAlg_swigregister
SetFieldOrMeshStringPropertyAlg_swigregister(SetFieldOrMeshStringPropertyAlg)

get_set_field_or_mesh_string_property_alg = _sr_py.get_set_field_or_mesh_string_property_alg
class SetFieldPropertyAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetFieldPropertyAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetFieldPropertyAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SetFieldPropertyAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SetFieldPropertyAlg
    __del__ = lambda self : None;
    def get_p_num_entries(*args): return _sr_py.SetFieldPropertyAlg_get_p_num_entries(*args)
    def get_p_property(*args): return _sr_py.SetFieldPropertyAlg_get_p_property(*args)
    def get_p_readonly(*args): return _sr_py.SetFieldPropertyAlg_get_p_readonly(*args)
    def get_p_type(*args): return _sr_py.SetFieldPropertyAlg_get_p_type(*args)
    def get_p_value(*args): return _sr_py.SetFieldPropertyAlg_get_p_value(*args)
    def get_progress_reporter(*args): return _sr_py.SetFieldPropertyAlg_get_progress_reporter(*args)
    def set_p_num_entries(*args): return _sr_py.SetFieldPropertyAlg_set_p_num_entries(*args)
    def set_p_property(*args): return _sr_py.SetFieldPropertyAlg_set_p_property(*args)
    def set_p_readonly(*args): return _sr_py.SetFieldPropertyAlg_set_p_readonly(*args)
    def set_p_type(*args): return _sr_py.SetFieldPropertyAlg_set_p_type(*args)
    def set_p_value(*args): return _sr_py.SetFieldPropertyAlg_set_p_value(*args)
    def set_progress_reporter(*args): return _sr_py.SetFieldPropertyAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SetFieldPropertyAlg_execute(*args)
SetFieldPropertyAlg_swigregister = _sr_py.SetFieldPropertyAlg_swigregister
SetFieldPropertyAlg_swigregister(SetFieldPropertyAlg)

get_set_field_property_alg = _sr_py.get_set_field_property_alg
class ClipFieldByFunctionAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClipFieldByFunctionAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClipFieldByFunctionAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ClipFieldByFunctionAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ClipFieldByFunctionAlg
    __del__ = lambda self : None;
    def get_p_function(*args): return _sr_py.ClipFieldByFunctionAlg_get_p_function(*args)
    def get_p_mode(*args): return _sr_py.ClipFieldByFunctionAlg_get_p_mode(*args)
    def get_progress_reporter(*args): return _sr_py.ClipFieldByFunctionAlg_get_progress_reporter(*args)
    def set_p_function(*args): return _sr_py.ClipFieldByFunctionAlg_set_p_function(*args)
    def set_p_mode(*args): return _sr_py.ClipFieldByFunctionAlg_set_p_mode(*args)
    def set_progress_reporter(*args): return _sr_py.ClipFieldByFunctionAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ClipFieldByFunctionAlg_execute(*args)
ClipFieldByFunctionAlg_swigregister = _sr_py.ClipFieldByFunctionAlg_swigregister
ClipFieldByFunctionAlg_swigregister(ClipFieldByFunctionAlg)

get_clip_field_by_function_alg = _sr_py.get_clip_field_by_function_alg
class ClipFieldToFieldOrWidgetAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClipFieldToFieldOrWidgetAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClipFieldToFieldOrWidgetAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ClipFieldToFieldOrWidgetAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ClipFieldToFieldOrWidgetAlg
    __del__ = lambda self : None;
    def get_p_autoexecute(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_autoexecute(*args)
    def get_p_autoinvert(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_autoinvert(*args)
    def get_p_center_x(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_center_x(*args)
    def get_p_center_y(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_center_y(*args)
    def get_p_center_z(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_center_z(*args)
    def get_p_clip_location(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_clip_location(*args)
    def get_p_clipmode(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_clipmode(*args)
    def get_p_down_x(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_down_x(*args)
    def get_p_down_y(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_down_y(*args)
    def get_p_down_z(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_down_z(*args)
    def get_p_execmode(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_execmode(*args)
    def get_p_in_x(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_in_x(*args)
    def get_p_in_y(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_in_y(*args)
    def get_p_in_z(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_in_z(*args)
    def get_p_right_x(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_right_x(*args)
    def get_p_right_y(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_right_y(*args)
    def get_p_right_z(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_right_z(*args)
    def get_p_scale(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_p_scale(*args)
    def get_progress_reporter(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_get_progress_reporter(*args)
    def set_p_autoexecute(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_autoexecute(*args)
    def set_p_autoinvert(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_autoinvert(*args)
    def set_p_center_x(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_center_x(*args)
    def set_p_center_y(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_center_y(*args)
    def set_p_center_z(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_center_z(*args)
    def set_p_clip_location(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_clip_location(*args)
    def set_p_clipmode(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_clipmode(*args)
    def set_p_down_x(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_down_x(*args)
    def set_p_down_y(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_down_y(*args)
    def set_p_down_z(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_down_z(*args)
    def set_p_execmode(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_execmode(*args)
    def set_p_in_x(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_in_x(*args)
    def set_p_in_y(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_in_y(*args)
    def set_p_in_z(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_in_z(*args)
    def set_p_right_x(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_right_x(*args)
    def set_p_right_y(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_right_y(*args)
    def set_p_right_z(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_right_z(*args)
    def set_p_scale(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_p_scale(*args)
    def set_progress_reporter(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ClipFieldToFieldOrWidgetAlg_execute(*args)
ClipFieldToFieldOrWidgetAlg_swigregister = _sr_py.ClipFieldToFieldOrWidgetAlg_swigregister
ClipFieldToFieldOrWidgetAlg_swigregister(ClipFieldToFieldOrWidgetAlg)

get_clip_field_to_field_or_widget_alg = _sr_py.get_clip_field_to_field_or_widget_alg
class ClipFieldWithSeedAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClipFieldWithSeedAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClipFieldWithSeedAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ClipFieldWithSeedAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ClipFieldWithSeedAlg
    __del__ = lambda self : None;
    def get_p_function(*args): return _sr_py.ClipFieldWithSeedAlg_get_p_function(*args)
    def get_p_mode(*args): return _sr_py.ClipFieldWithSeedAlg_get_p_mode(*args)
    def get_progress_reporter(*args): return _sr_py.ClipFieldWithSeedAlg_get_progress_reporter(*args)
    def set_p_function(*args): return _sr_py.ClipFieldWithSeedAlg_set_p_function(*args)
    def set_p_mode(*args): return _sr_py.ClipFieldWithSeedAlg_set_p_mode(*args)
    def set_progress_reporter(*args): return _sr_py.ClipFieldWithSeedAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ClipFieldWithSeedAlg_execute(*args)
ClipFieldWithSeedAlg_swigregister = _sr_py.ClipFieldWithSeedAlg_swigregister
ClipFieldWithSeedAlg_swigregister(ClipFieldWithSeedAlg)

get_clip_field_with_seed_alg = _sr_py.get_clip_field_with_seed_alg
class ClipLatVolByIndicesOrWidgetAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClipLatVolByIndicesOrWidgetAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClipLatVolByIndicesOrWidgetAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ClipLatVolByIndicesOrWidgetAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ClipLatVolByIndicesOrWidgetAlg
    __del__ = lambda self : None;
    def get_p_text_max_x(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_get_p_text_max_x(*args)
    def get_p_text_max_y(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_get_p_text_max_y(*args)
    def get_p_text_max_z(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_get_p_text_max_z(*args)
    def get_p_text_min_x(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_get_p_text_min_x(*args)
    def get_p_text_min_y(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_get_p_text_min_y(*args)
    def get_p_text_min_z(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_get_p_text_min_z(*args)
    def get_p_use_text_bbox(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_get_p_use_text_bbox(*args)
    def get_progress_reporter(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_get_progress_reporter(*args)
    def set_p_text_max_x(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_set_p_text_max_x(*args)
    def set_p_text_max_y(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_set_p_text_max_y(*args)
    def set_p_text_max_z(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_set_p_text_max_z(*args)
    def set_p_text_min_x(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_set_p_text_min_x(*args)
    def set_p_text_min_y(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_set_p_text_min_y(*args)
    def set_p_text_min_z(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_set_p_text_min_z(*args)
    def set_p_use_text_bbox(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_set_p_use_text_bbox(*args)
    def set_progress_reporter(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ClipLatVolByIndicesOrWidgetAlg_execute(*args)
ClipLatVolByIndicesOrWidgetAlg_swigregister = _sr_py.ClipLatVolByIndicesOrWidgetAlg_swigregister
ClipLatVolByIndicesOrWidgetAlg_swigregister(ClipLatVolByIndicesOrWidgetAlg)

get_clip_lat_vol_by_indices_or_widget_alg = _sr_py.get_clip_lat_vol_by_indices_or_widget_alg
class ClipVolumeByIsovalueAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClipVolumeByIsovalueAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClipVolumeByIsovalueAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ClipVolumeByIsovalueAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ClipVolumeByIsovalueAlg
    __del__ = lambda self : None;
    def get_p_isoval(*args): return _sr_py.ClipVolumeByIsovalueAlg_get_p_isoval(*args)
    def get_p_isoval_max(*args): return _sr_py.ClipVolumeByIsovalueAlg_get_p_isoval_max(*args)
    def get_p_isoval_min(*args): return _sr_py.ClipVolumeByIsovalueAlg_get_p_isoval_min(*args)
    def get_p_lte(*args): return _sr_py.ClipVolumeByIsovalueAlg_get_p_lte(*args)
    def get_p_update_type(*args): return _sr_py.ClipVolumeByIsovalueAlg_get_p_update_type(*args)
    def get_progress_reporter(*args): return _sr_py.ClipVolumeByIsovalueAlg_get_progress_reporter(*args)
    def set_p_isoval(*args): return _sr_py.ClipVolumeByIsovalueAlg_set_p_isoval(*args)
    def set_p_isoval_max(*args): return _sr_py.ClipVolumeByIsovalueAlg_set_p_isoval_max(*args)
    def set_p_isoval_min(*args): return _sr_py.ClipVolumeByIsovalueAlg_set_p_isoval_min(*args)
    def set_p_lte(*args): return _sr_py.ClipVolumeByIsovalueAlg_set_p_lte(*args)
    def set_p_update_type(*args): return _sr_py.ClipVolumeByIsovalueAlg_set_p_update_type(*args)
    def set_progress_reporter(*args): return _sr_py.ClipVolumeByIsovalueAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ClipVolumeByIsovalueAlg_execute(*args)
ClipVolumeByIsovalueAlg_swigregister = _sr_py.ClipVolumeByIsovalueAlg_swigregister
ClipVolumeByIsovalueAlg_swigregister(ClipVolumeByIsovalueAlg)

get_clip_volume_by_isovalue_alg = _sr_py.get_clip_volume_by_isovalue_alg
class CollectFieldsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectFieldsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectFieldsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CollectFieldsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CollectFieldsAlg
    __del__ = lambda self : None;
    def get_p_buffersize(*args): return _sr_py.CollectFieldsAlg_get_p_buffersize(*args)
    def get_progress_reporter(*args): return _sr_py.CollectFieldsAlg_get_progress_reporter(*args)
    def set_p_buffersize(*args): return _sr_py.CollectFieldsAlg_set_p_buffersize(*args)
    def set_progress_reporter(*args): return _sr_py.CollectFieldsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CollectFieldsAlg_execute(*args)
CollectFieldsAlg_swigregister = _sr_py.CollectFieldsAlg_swigregister
CollectFieldsAlg_swigregister(CollectFieldsAlg)

get_collect_fields_alg = _sr_py.get_collect_fields_alg
class ConvertMatricesToMeshAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertMatricesToMeshAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertMatricesToMeshAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertMatricesToMeshAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertMatricesToMeshAlg
    __del__ = lambda self : None;
    def get_p_datatype(*args): return _sr_py.ConvertMatricesToMeshAlg_get_p_datatype(*args)
    def get_p_fieldbasetype(*args): return _sr_py.ConvertMatricesToMeshAlg_get_p_fieldbasetype(*args)
    def get_p_fieldname(*args): return _sr_py.ConvertMatricesToMeshAlg_get_p_fieldname(*args)
    def get_p_meshname(*args): return _sr_py.ConvertMatricesToMeshAlg_get_p_meshname(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertMatricesToMeshAlg_get_progress_reporter(*args)
    def set_p_datatype(*args): return _sr_py.ConvertMatricesToMeshAlg_set_p_datatype(*args)
    def set_p_fieldbasetype(*args): return _sr_py.ConvertMatricesToMeshAlg_set_p_fieldbasetype(*args)
    def set_p_fieldname(*args): return _sr_py.ConvertMatricesToMeshAlg_set_p_fieldname(*args)
    def set_p_meshname(*args): return _sr_py.ConvertMatricesToMeshAlg_set_p_meshname(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertMatricesToMeshAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertMatricesToMeshAlg_execute(*args)
ConvertMatricesToMeshAlg_swigregister = _sr_py.ConvertMatricesToMeshAlg_swigregister
ConvertMatricesToMeshAlg_swigregister(ConvertMatricesToMeshAlg)

get_convert_matrices_to_mesh_alg = _sr_py.get_convert_matrices_to_mesh_alg
class CreateImageAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateImageAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateImageAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateImageAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateImageAlg
    __del__ = lambda self : None;
    def get_p_auto_size(*args): return _sr_py.CreateImageAlg_get_p_auto_size(*args)
    def get_p_axis(*args): return _sr_py.CreateImageAlg_get_p_axis(*args)
    def get_p_cnormal_x(*args): return _sr_py.CreateImageAlg_get_p_cnormal_x(*args)
    def get_p_cnormal_y(*args): return _sr_py.CreateImageAlg_get_p_cnormal_y(*args)
    def get_p_cnormal_z(*args): return _sr_py.CreateImageAlg_get_p_cnormal_z(*args)
    def get_p_corigin_x(*args): return _sr_py.CreateImageAlg_get_p_corigin_x(*args)
    def get_p_corigin_y(*args): return _sr_py.CreateImageAlg_get_p_corigin_y(*args)
    def get_p_corigin_z(*args): return _sr_py.CreateImageAlg_get_p_corigin_z(*args)
    def get_p_data_at(*args): return _sr_py.CreateImageAlg_get_p_data_at(*args)
    def get_p_padpercent(*args): return _sr_py.CreateImageAlg_get_p_padpercent(*args)
    def get_p_pos(*args): return _sr_py.CreateImageAlg_get_p_pos(*args)
    def get_p_sizex(*args): return _sr_py.CreateImageAlg_get_p_sizex(*args)
    def get_p_sizey(*args): return _sr_py.CreateImageAlg_get_p_sizey(*args)
    def get_p_sizez(*args): return _sr_py.CreateImageAlg_get_p_sizez(*args)
    def get_p_update_type(*args): return _sr_py.CreateImageAlg_get_p_update_type(*args)
    def get_p_z_value(*args): return _sr_py.CreateImageAlg_get_p_z_value(*args)
    def get_progress_reporter(*args): return _sr_py.CreateImageAlg_get_progress_reporter(*args)
    def set_p_auto_size(*args): return _sr_py.CreateImageAlg_set_p_auto_size(*args)
    def set_p_axis(*args): return _sr_py.CreateImageAlg_set_p_axis(*args)
    def set_p_cnormal_x(*args): return _sr_py.CreateImageAlg_set_p_cnormal_x(*args)
    def set_p_cnormal_y(*args): return _sr_py.CreateImageAlg_set_p_cnormal_y(*args)
    def set_p_cnormal_z(*args): return _sr_py.CreateImageAlg_set_p_cnormal_z(*args)
    def set_p_corigin_x(*args): return _sr_py.CreateImageAlg_set_p_corigin_x(*args)
    def set_p_corigin_y(*args): return _sr_py.CreateImageAlg_set_p_corigin_y(*args)
    def set_p_corigin_z(*args): return _sr_py.CreateImageAlg_set_p_corigin_z(*args)
    def set_p_data_at(*args): return _sr_py.CreateImageAlg_set_p_data_at(*args)
    def set_p_padpercent(*args): return _sr_py.CreateImageAlg_set_p_padpercent(*args)
    def set_p_pos(*args): return _sr_py.CreateImageAlg_set_p_pos(*args)
    def set_p_sizex(*args): return _sr_py.CreateImageAlg_set_p_sizex(*args)
    def set_p_sizey(*args): return _sr_py.CreateImageAlg_set_p_sizey(*args)
    def set_p_sizez(*args): return _sr_py.CreateImageAlg_set_p_sizez(*args)
    def set_p_update_type(*args): return _sr_py.CreateImageAlg_set_p_update_type(*args)
    def set_p_z_value(*args): return _sr_py.CreateImageAlg_set_p_z_value(*args)
    def set_progress_reporter(*args): return _sr_py.CreateImageAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateImageAlg_execute(*args)
CreateImageAlg_swigregister = _sr_py.CreateImageAlg_swigregister
CreateImageAlg_swigregister(CreateImageAlg)

get_create_image_alg = _sr_py.get_create_image_alg
class CreateLatVolAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateLatVolAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateLatVolAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateLatVolAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateLatVolAlg
    __del__ = lambda self : None;
    def get_p_data_at(*args): return _sr_py.CreateLatVolAlg_get_p_data_at(*args)
    def get_p_element_size(*args): return _sr_py.CreateLatVolAlg_get_p_element_size(*args)
    def get_p_padpercent(*args): return _sr_py.CreateLatVolAlg_get_p_padpercent(*args)
    def get_p_sizex(*args): return _sr_py.CreateLatVolAlg_get_p_sizex(*args)
    def get_p_sizey(*args): return _sr_py.CreateLatVolAlg_get_p_sizey(*args)
    def get_p_sizez(*args): return _sr_py.CreateLatVolAlg_get_p_sizez(*args)
    def get_progress_reporter(*args): return _sr_py.CreateLatVolAlg_get_progress_reporter(*args)
    def set_p_data_at(*args): return _sr_py.CreateLatVolAlg_set_p_data_at(*args)
    def set_p_element_size(*args): return _sr_py.CreateLatVolAlg_set_p_element_size(*args)
    def set_p_padpercent(*args): return _sr_py.CreateLatVolAlg_set_p_padpercent(*args)
    def set_p_sizex(*args): return _sr_py.CreateLatVolAlg_set_p_sizex(*args)
    def set_p_sizey(*args): return _sr_py.CreateLatVolAlg_set_p_sizey(*args)
    def set_p_sizez(*args): return _sr_py.CreateLatVolAlg_set_p_sizez(*args)
    def set_progress_reporter(*args): return _sr_py.CreateLatVolAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateLatVolAlg_execute(*args)
CreateLatVolAlg_swigregister = _sr_py.CreateLatVolAlg_swigregister
CreateLatVolAlg_swigregister(CreateLatVolAlg)

get_create_lat_vol_alg = _sr_py.get_create_lat_vol_alg
class CreateStructHexAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateStructHexAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateStructHexAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateStructHexAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateStructHexAlg
    __del__ = lambda self : None;
    def get_p_data_at(*args): return _sr_py.CreateStructHexAlg_get_p_data_at(*args)
    def get_p_padpercent(*args): return _sr_py.CreateStructHexAlg_get_p_padpercent(*args)
    def get_p_sizex(*args): return _sr_py.CreateStructHexAlg_get_p_sizex(*args)
    def get_p_sizey(*args): return _sr_py.CreateStructHexAlg_get_p_sizey(*args)
    def get_p_sizez(*args): return _sr_py.CreateStructHexAlg_get_p_sizez(*args)
    def get_progress_reporter(*args): return _sr_py.CreateStructHexAlg_get_progress_reporter(*args)
    def set_p_data_at(*args): return _sr_py.CreateStructHexAlg_set_p_data_at(*args)
    def set_p_padpercent(*args): return _sr_py.CreateStructHexAlg_set_p_padpercent(*args)
    def set_p_sizex(*args): return _sr_py.CreateStructHexAlg_set_p_sizex(*args)
    def set_p_sizey(*args): return _sr_py.CreateStructHexAlg_set_p_sizey(*args)
    def set_p_sizez(*args): return _sr_py.CreateStructHexAlg_set_p_sizez(*args)
    def set_progress_reporter(*args): return _sr_py.CreateStructHexAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateStructHexAlg_execute(*args)
CreateStructHexAlg_swigregister = _sr_py.CreateStructHexAlg_swigregister
CreateStructHexAlg_swigregister(CreateStructHexAlg)

get_create_struct_hex_alg = _sr_py.get_create_struct_hex_alg
class DecimateTriSurfAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecimateTriSurfAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecimateTriSurfAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_DecimateTriSurfAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_DecimateTriSurfAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.DecimateTriSurfAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.DecimateTriSurfAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.DecimateTriSurfAlg_execute(*args)
DecimateTriSurfAlg_swigregister = _sr_py.DecimateTriSurfAlg_swigregister
DecimateTriSurfAlg_swigregister(DecimateTriSurfAlg)

get_decimate_tri_surf_alg = _sr_py.get_decimate_tri_surf_alg
class ExtractIsosurfaceByFunctionAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtractIsosurfaceByFunctionAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtractIsosurfaceByFunctionAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ExtractIsosurfaceByFunctionAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ExtractIsosurfaceByFunctionAlg
    __del__ = lambda self : None;
    def get_p_active_slice_value_selection_tab(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_active_slice_value_selection_tab(*args)
    def get_p_active_tab(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_active_tab(*args)
    def get_p_algorithm(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_algorithm(*args)
    def get_p_function(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_function(*args)
    def get_p_matrix_list(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_matrix_list(*args)
    def get_p_quantity_clusive(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_quantity_clusive(*args)
    def get_p_quantity_list(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_quantity_list(*args)
    def get_p_quantity_max(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_quantity_max(*args)
    def get_p_quantity_min(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_quantity_min(*args)
    def get_p_quantity_range(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_quantity_range(*args)
    def get_p_slice_value(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_slice_value(*args)
    def get_p_slice_value_list(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_slice_value_list(*args)
    def get_p_slice_value_max(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_slice_value_max(*args)
    def get_p_slice_value_min(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_slice_value_min(*args)
    def get_p_slice_value_quantity(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_slice_value_quantity(*args)
    def get_p_slice_value_typed(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_slice_value_typed(*args)
    def get_p_update_type(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_update_type(*args)
    def get_p_zero_checks(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_p_zero_checks(*args)
    def get_progress_reporter(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_get_progress_reporter(*args)
    def set_p_active_slice_value_selection_tab(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_active_slice_value_selection_tab(*args)
    def set_p_active_tab(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_active_tab(*args)
    def set_p_algorithm(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_algorithm(*args)
    def set_p_function(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_function(*args)
    def set_p_matrix_list(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_matrix_list(*args)
    def set_p_quantity_clusive(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_quantity_clusive(*args)
    def set_p_quantity_list(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_quantity_list(*args)
    def set_p_quantity_max(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_quantity_max(*args)
    def set_p_quantity_min(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_quantity_min(*args)
    def set_p_quantity_range(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_quantity_range(*args)
    def set_p_slice_value(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_slice_value(*args)
    def set_p_slice_value_list(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_slice_value_list(*args)
    def set_p_slice_value_max(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_slice_value_max(*args)
    def set_p_slice_value_min(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_slice_value_min(*args)
    def set_p_slice_value_quantity(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_slice_value_quantity(*args)
    def set_p_slice_value_typed(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_slice_value_typed(*args)
    def set_p_update_type(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_update_type(*args)
    def set_p_zero_checks(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_p_zero_checks(*args)
    def set_progress_reporter(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ExtractIsosurfaceByFunctionAlg_execute(*args)
ExtractIsosurfaceByFunctionAlg_swigregister = _sr_py.ExtractIsosurfaceByFunctionAlg_swigregister
ExtractIsosurfaceByFunctionAlg_swigregister(ExtractIsosurfaceByFunctionAlg)

get_extract_isosurface_by_function_alg = _sr_py.get_extract_isosurface_by_function_alg
class FairMeshAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FairMeshAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FairMeshAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_FairMeshAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_FairMeshAlg
    __del__ = lambda self : None;
    def get_p_iterations(*args): return _sr_py.FairMeshAlg_get_p_iterations(*args)
    def get_p_method(*args): return _sr_py.FairMeshAlg_get_p_method(*args)
    def get_progress_reporter(*args): return _sr_py.FairMeshAlg_get_progress_reporter(*args)
    def set_p_iterations(*args): return _sr_py.FairMeshAlg_set_p_iterations(*args)
    def set_p_method(*args): return _sr_py.FairMeshAlg_set_p_method(*args)
    def set_progress_reporter(*args): return _sr_py.FairMeshAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.FairMeshAlg_execute(*args)
FairMeshAlg_swigregister = _sr_py.FairMeshAlg_swigregister
FairMeshAlg_swigregister(FairMeshAlg)

get_fair_mesh_alg = _sr_py.get_fair_mesh_alg
class GeneratePointSamplesFromFieldOrWidgetAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratePointSamplesFromFieldOrWidgetAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneratePointSamplesFromFieldOrWidgetAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GeneratePointSamplesFromFieldOrWidgetAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GeneratePointSamplesFromFieldOrWidgetAlg
    __del__ = lambda self : None;
    def get_p_autoexecute(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_autoexecute(*args)
    def get_p_clamp(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_clamp(*args)
    def get_p_dist(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_dist(*args)
    def get_p_endpoints(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_endpoints(*args)
    def get_p_maxseeds(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_maxseeds(*args)
    def get_p_numseeds(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_numseeds(*args)
    def get_p_rnginc(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_rnginc(*args)
    def get_p_rngseed(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_rngseed(*args)
    def get_p_whichtab(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_whichtab(*args)
    def get_p_wtype(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_p_wtype(*args)
    def get_progress_reporter(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_get_progress_reporter(*args)
    def set_p_autoexecute(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_autoexecute(*args)
    def set_p_clamp(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_clamp(*args)
    def set_p_dist(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_dist(*args)
    def set_p_endpoints(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_endpoints(*args)
    def set_p_maxseeds(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_maxseeds(*args)
    def set_p_numseeds(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_numseeds(*args)
    def set_p_rnginc(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_rnginc(*args)
    def set_p_rngseed(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_rngseed(*args)
    def set_p_whichtab(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_whichtab(*args)
    def set_p_wtype(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_p_wtype(*args)
    def set_progress_reporter(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_execute(*args)
GeneratePointSamplesFromFieldOrWidgetAlg_swigregister = _sr_py.GeneratePointSamplesFromFieldOrWidgetAlg_swigregister
GeneratePointSamplesFromFieldOrWidgetAlg_swigregister(GeneratePointSamplesFromFieldOrWidgetAlg)

get_generate_point_samples_from_field_or_widget_alg = _sr_py.get_generate_point_samples_from_field_or_widget_alg
class GenRayCastMAAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenRayCastMAAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenRayCastMAAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GenRayCastMAAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GenRayCastMAAlg
    __del__ = lambda self : None;
    def get_p_gen_geom_points(*args): return _sr_py.GenRayCastMAAlg_get_p_gen_geom_points(*args)
    def get_p_gen_point_output(*args): return _sr_py.GenRayCastMAAlg_get_p_gen_point_output(*args)
    def get_p_num_threads(*args): return _sr_py.GenRayCastMAAlg_get_p_num_threads(*args)
    def get_p_ptcl_filename(*args): return _sr_py.GenRayCastMAAlg_get_p_ptcl_filename(*args)
    def get_p_reject_ratio(*args): return _sr_py.GenRayCastMAAlg_get_p_reject_ratio(*args)
    def get_p_save_ptcl_file(*args): return _sr_py.GenRayCastMAAlg_get_p_save_ptcl_file(*args)
    def get_progress_reporter(*args): return _sr_py.GenRayCastMAAlg_get_progress_reporter(*args)
    def set_p_gen_geom_points(*args): return _sr_py.GenRayCastMAAlg_set_p_gen_geom_points(*args)
    def set_p_gen_point_output(*args): return _sr_py.GenRayCastMAAlg_set_p_gen_point_output(*args)
    def set_p_num_threads(*args): return _sr_py.GenRayCastMAAlg_set_p_num_threads(*args)
    def set_p_ptcl_filename(*args): return _sr_py.GenRayCastMAAlg_set_p_ptcl_filename(*args)
    def set_p_reject_ratio(*args): return _sr_py.GenRayCastMAAlg_set_p_reject_ratio(*args)
    def set_p_save_ptcl_file(*args): return _sr_py.GenRayCastMAAlg_set_p_save_ptcl_file(*args)
    def set_progress_reporter(*args): return _sr_py.GenRayCastMAAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GenRayCastMAAlg_execute(*args)
GenRayCastMAAlg_swigregister = _sr_py.GenRayCastMAAlg_swigregister
GenRayCastMAAlg_swigregister(GenRayCastMAAlg)

get_gen_ray_cast_m_a_alg = _sr_py.get_gen_ray_cast_m_a_alg
class GeneratePointSamplesFromFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneratePointSamplesFromFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneratePointSamplesFromFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GeneratePointSamplesFromFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GeneratePointSamplesFromFieldAlg
    __del__ = lambda self : None;
    def get_p_auto_execute(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_p_auto_execute(*args)
    def get_p_blue(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_p_blue(*args)
    def get_p_green(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_p_green(*args)
    def get_p_num_seeds(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_p_num_seeds(*args)
    def get_p_probe_scale(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_p_probe_scale(*args)
    def get_p_red(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_p_red(*args)
    def get_p_send(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_p_send(*args)
    def get_p_widget(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_p_widget(*args)
    def get_progress_reporter(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_get_progress_reporter(*args)
    def set_p_auto_execute(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_p_auto_execute(*args)
    def set_p_blue(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_p_blue(*args)
    def set_p_green(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_p_green(*args)
    def set_p_num_seeds(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_p_num_seeds(*args)
    def set_p_probe_scale(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_p_probe_scale(*args)
    def set_p_red(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_p_red(*args)
    def set_p_send(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_p_send(*args)
    def set_p_widget(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_p_widget(*args)
    def set_progress_reporter(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GeneratePointSamplesFromFieldAlg_execute(*args)
GeneratePointSamplesFromFieldAlg_swigregister = _sr_py.GeneratePointSamplesFromFieldAlg_swigregister
GeneratePointSamplesFromFieldAlg_swigregister(GeneratePointSamplesFromFieldAlg)

get_generate_point_samples_from_field_alg = _sr_py.get_generate_point_samples_from_field_alg
class GenerateSinglePointProbeFromFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenerateSinglePointProbeFromFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenerateSinglePointProbeFromFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GenerateSinglePointProbeFromFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GenerateSinglePointProbeFromFieldAlg
    __del__ = lambda self : None;
    def get_p_cell(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_cell(*args)
    def get_p_edge(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_edge(*args)
    def get_p_face(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_face(*args)
    def get_p_locx(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_locx(*args)
    def get_p_locy(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_locy(*args)
    def get_p_locz(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_locz(*args)
    def get_p_main_frame(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_main_frame(*args)
    def get_p_node(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_node(*args)
    def get_p_probe_scale(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_probe_scale(*args)
    def get_p_show_cell(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_show_cell(*args)
    def get_p_show_edge(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_show_edge(*args)
    def get_p_show_face(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_show_face(*args)
    def get_p_show_node(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_show_node(*args)
    def get_p_show_value(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_show_value(*args)
    def get_p_value(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_p_value(*args)
    def get_progress_reporter(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_get_progress_reporter(*args)
    def set_p_cell(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_cell(*args)
    def set_p_edge(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_edge(*args)
    def set_p_face(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_face(*args)
    def set_p_locx(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_locx(*args)
    def set_p_locy(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_locy(*args)
    def set_p_locz(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_locz(*args)
    def set_p_main_frame(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_main_frame(*args)
    def set_p_node(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_node(*args)
    def set_p_probe_scale(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_probe_scale(*args)
    def set_p_show_cell(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_show_cell(*args)
    def set_p_show_edge(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_show_edge(*args)
    def set_p_show_face(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_show_face(*args)
    def set_p_show_node(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_show_node(*args)
    def set_p_show_value(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_show_value(*args)
    def set_p_value(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_p_value(*args)
    def set_progress_reporter(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GenerateSinglePointProbeFromFieldAlg_execute(*args)
GenerateSinglePointProbeFromFieldAlg_swigregister = _sr_py.GenerateSinglePointProbeFromFieldAlg_swigregister
GenerateSinglePointProbeFromFieldAlg_swigregister(GenerateSinglePointProbeFromFieldAlg)

get_generate_single_point_probe_from_field_alg = _sr_py.get_generate_single_point_probe_from_field_alg
class GetAllSegmentationBoundariesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetAllSegmentationBoundariesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetAllSegmentationBoundariesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetAllSegmentationBoundariesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetAllSegmentationBoundariesAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.GetAllSegmentationBoundariesAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.GetAllSegmentationBoundariesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetAllSegmentationBoundariesAlg_execute(*args)
GetAllSegmentationBoundariesAlg_swigregister = _sr_py.GetAllSegmentationBoundariesAlg_swigregister
GetAllSegmentationBoundariesAlg_swigregister(GetAllSegmentationBoundariesAlg)

get_get_all_segmentation_boundaries_alg = _sr_py.get_get_all_segmentation_boundaries_alg
class GetCentroidsFromMeshAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetCentroidsFromMeshAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetCentroidsFromMeshAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetCentroidsFromMeshAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetCentroidsFromMeshAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.GetCentroidsFromMeshAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.GetCentroidsFromMeshAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetCentroidsFromMeshAlg_execute(*args)
GetCentroidsFromMeshAlg_swigregister = _sr_py.GetCentroidsFromMeshAlg_swigregister
GetCentroidsFromMeshAlg_swigregister(GetCentroidsFromMeshAlg)

get_get_centroids_from_mesh_alg = _sr_py.get_get_centroids_from_mesh_alg
class GetDomainBoundaryAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetDomainBoundaryAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetDomainBoundaryAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetDomainBoundaryAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetDomainBoundaryAlg
    __del__ = lambda self : None;
    def get_p_disconnect(*args): return _sr_py.GetDomainBoundaryAlg_get_p_disconnect(*args)
    def get_p_includeouterboundary(*args): return _sr_py.GetDomainBoundaryAlg_get_p_includeouterboundary(*args)
    def get_p_innerboundaryonly(*args): return _sr_py.GetDomainBoundaryAlg_get_p_innerboundaryonly(*args)
    def get_p_maxrange(*args): return _sr_py.GetDomainBoundaryAlg_get_p_maxrange(*args)
    def get_p_minrange(*args): return _sr_py.GetDomainBoundaryAlg_get_p_minrange(*args)
    def get_p_noinnerboundary(*args): return _sr_py.GetDomainBoundaryAlg_get_p_noinnerboundary(*args)
    def get_p_userange(*args): return _sr_py.GetDomainBoundaryAlg_get_p_userange(*args)
    def get_p_usevalue(*args): return _sr_py.GetDomainBoundaryAlg_get_p_usevalue(*args)
    def get_p_value(*args): return _sr_py.GetDomainBoundaryAlg_get_p_value(*args)
    def get_progress_reporter(*args): return _sr_py.GetDomainBoundaryAlg_get_progress_reporter(*args)
    def set_p_disconnect(*args): return _sr_py.GetDomainBoundaryAlg_set_p_disconnect(*args)
    def set_p_includeouterboundary(*args): return _sr_py.GetDomainBoundaryAlg_set_p_includeouterboundary(*args)
    def set_p_innerboundaryonly(*args): return _sr_py.GetDomainBoundaryAlg_set_p_innerboundaryonly(*args)
    def set_p_maxrange(*args): return _sr_py.GetDomainBoundaryAlg_set_p_maxrange(*args)
    def set_p_minrange(*args): return _sr_py.GetDomainBoundaryAlg_set_p_minrange(*args)
    def set_p_noinnerboundary(*args): return _sr_py.GetDomainBoundaryAlg_set_p_noinnerboundary(*args)
    def set_p_userange(*args): return _sr_py.GetDomainBoundaryAlg_set_p_userange(*args)
    def set_p_usevalue(*args): return _sr_py.GetDomainBoundaryAlg_set_p_usevalue(*args)
    def set_p_value(*args): return _sr_py.GetDomainBoundaryAlg_set_p_value(*args)
    def set_progress_reporter(*args): return _sr_py.GetDomainBoundaryAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetDomainBoundaryAlg_execute(*args)
GetDomainBoundaryAlg_swigregister = _sr_py.GetDomainBoundaryAlg_swigregister
GetDomainBoundaryAlg_swigregister(GetDomainBoundaryAlg)

get_get_domain_boundary_alg = _sr_py.get_get_domain_boundary_alg
class GetFieldBoundaryAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetFieldBoundaryAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetFieldBoundaryAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetFieldBoundaryAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetFieldBoundaryAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.GetFieldBoundaryAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.GetFieldBoundaryAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetFieldBoundaryAlg_execute(*args)
GetFieldBoundaryAlg_swigregister = _sr_py.GetFieldBoundaryAlg_swigregister
GetFieldBoundaryAlg_swigregister(GetFieldBoundaryAlg)

get_get_field_boundary_alg = _sr_py.get_get_field_boundary_alg
class GetSliceFromStructuredFieldByIndicesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetSliceFromStructuredFieldByIndicesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetSliceFromStructuredFieldByIndicesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetSliceFromStructuredFieldByIndicesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetSliceFromStructuredFieldByIndicesAlg
    __del__ = lambda self : None;
    def get_p_axis(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_axis(*args)
    def get_p_continuous(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_continuous(*args)
    def get_p_dim_i(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_dim_i(*args)
    def get_p_dim_j(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_dim_j(*args)
    def get_p_dim_k(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_dim_k(*args)
    def get_p_dims(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_dims(*args)
    def get_p_index_i(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_index_i(*args)
    def get_p_index_j(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_index_j(*args)
    def get_p_index_k(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_index_k(*args)
    def get_p_update_type(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_p_update_type(*args)
    def get_progress_reporter(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_get_progress_reporter(*args)
    def set_p_axis(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_axis(*args)
    def set_p_continuous(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_continuous(*args)
    def set_p_dim_i(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_dim_i(*args)
    def set_p_dim_j(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_dim_j(*args)
    def set_p_dim_k(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_dim_k(*args)
    def set_p_dims(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_dims(*args)
    def set_p_index_i(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_index_i(*args)
    def set_p_index_j(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_index_j(*args)
    def set_p_index_k(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_index_k(*args)
    def set_p_update_type(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_p_update_type(*args)
    def set_progress_reporter(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetSliceFromStructuredFieldByIndicesAlg_execute(*args)
GetSliceFromStructuredFieldByIndicesAlg_swigregister = _sr_py.GetSliceFromStructuredFieldByIndicesAlg_swigregister
GetSliceFromStructuredFieldByIndicesAlg_swigregister(GetSliceFromStructuredFieldByIndicesAlg)

get_get_slice_from_structured_field_by_indices_alg = _sr_py.get_get_slice_from_structured_field_by_indices_alg
class InsertHexVolSheetAlongSurfaceAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertHexVolSheetAlongSurfaceAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InsertHexVolSheetAlongSurfaceAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InsertHexVolSheetAlongSurfaceAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InsertHexVolSheetAlongSurfaceAlg
    __del__ = lambda self : None;
    def get_p_addlayer(*args): return _sr_py.InsertHexVolSheetAlongSurfaceAlg_get_p_addlayer(*args)
    def get_p_side(*args): return _sr_py.InsertHexVolSheetAlongSurfaceAlg_get_p_side(*args)
    def get_progress_reporter(*args): return _sr_py.InsertHexVolSheetAlongSurfaceAlg_get_progress_reporter(*args)
    def set_p_addlayer(*args): return _sr_py.InsertHexVolSheetAlongSurfaceAlg_set_p_addlayer(*args)
    def set_p_side(*args): return _sr_py.InsertHexVolSheetAlongSurfaceAlg_set_p_side(*args)
    def set_progress_reporter(*args): return _sr_py.InsertHexVolSheetAlongSurfaceAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InsertHexVolSheetAlongSurfaceAlg_execute(*args)
InsertHexVolSheetAlongSurfaceAlg_swigregister = _sr_py.InsertHexVolSheetAlongSurfaceAlg_swigregister
InsertHexVolSheetAlongSurfaceAlg_swigregister(InsertHexVolSheetAlongSurfaceAlg)

get_insert_hex_vol_sheet_along_surface_alg = _sr_py.get_insert_hex_vol_sheet_along_surface_alg
class InterfaceWithCamalAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterfaceWithCamalAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterfaceWithCamalAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InterfaceWithCamalAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InterfaceWithCamalAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.InterfaceWithCamalAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.InterfaceWithCamalAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InterfaceWithCamalAlg_execute(*args)
InterfaceWithCamalAlg_swigregister = _sr_py.InterfaceWithCamalAlg_swigregister
InterfaceWithCamalAlg_swigregister(InterfaceWithCamalAlg)

get_interface_with_camal_alg = _sr_py.get_interface_with_camal_alg
class InterfaceWithCubitAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterfaceWithCubitAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterfaceWithCubitAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InterfaceWithCubitAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InterfaceWithCubitAlg
    __del__ = lambda self : None;
    def get_p_cubitdir(*args): return _sr_py.InterfaceWithCubitAlg_get_p_cubitdir(*args)
    def get_p_ncdump(*args): return _sr_py.InterfaceWithCubitAlg_get_p_ncdump(*args)
    def get_progress_reporter(*args): return _sr_py.InterfaceWithCubitAlg_get_progress_reporter(*args)
    def set_p_cubitdir(*args): return _sr_py.InterfaceWithCubitAlg_set_p_cubitdir(*args)
    def set_p_ncdump(*args): return _sr_py.InterfaceWithCubitAlg_set_p_ncdump(*args)
    def set_progress_reporter(*args): return _sr_py.InterfaceWithCubitAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InterfaceWithCubitAlg_execute(*args)
InterfaceWithCubitAlg_swigregister = _sr_py.InterfaceWithCubitAlg_swigregister
InterfaceWithCubitAlg_swigregister(InterfaceWithCubitAlg)

get_interface_with_cubit_alg = _sr_py.get_interface_with_cubit_alg
class InterfaceWithTetGenAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterfaceWithTetGenAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterfaceWithTetGenAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_InterfaceWithTetGenAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_InterfaceWithTetGenAlg
    __del__ = lambda self : None;
    def get_p_switch(*args): return _sr_py.InterfaceWithTetGenAlg_get_p_switch(*args)
    def get_progress_reporter(*args): return _sr_py.InterfaceWithTetGenAlg_get_progress_reporter(*args)
    def set_p_switch(*args): return _sr_py.InterfaceWithTetGenAlg_set_p_switch(*args)
    def set_progress_reporter(*args): return _sr_py.InterfaceWithTetGenAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.InterfaceWithTetGenAlg_execute(*args)
InterfaceWithTetGenAlg_swigregister = _sr_py.InterfaceWithTetGenAlg_swigregister
InterfaceWithTetGenAlg_swigregister(InterfaceWithTetGenAlg)

get_interface_with_tet_gen_alg = _sr_py.get_interface_with_tet_gen_alg
class JoinFieldsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JoinFieldsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JoinFieldsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_JoinFieldsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_JoinFieldsAlg
    __del__ = lambda self : None;
    def get_p_force_nodemerge(*args): return _sr_py.JoinFieldsAlg_get_p_force_nodemerge(*args)
    def get_p_force_pointcloud(*args): return _sr_py.JoinFieldsAlg_get_p_force_pointcloud(*args)
    def get_p_matchval(*args): return _sr_py.JoinFieldsAlg_get_p_matchval(*args)
    def get_p_meshonly(*args): return _sr_py.JoinFieldsAlg_get_p_meshonly(*args)
    def get_p_tolerance(*args): return _sr_py.JoinFieldsAlg_get_p_tolerance(*args)
    def get_progress_reporter(*args): return _sr_py.JoinFieldsAlg_get_progress_reporter(*args)
    def set_p_force_nodemerge(*args): return _sr_py.JoinFieldsAlg_set_p_force_nodemerge(*args)
    def set_p_force_pointcloud(*args): return _sr_py.JoinFieldsAlg_set_p_force_pointcloud(*args)
    def set_p_matchval(*args): return _sr_py.JoinFieldsAlg_set_p_matchval(*args)
    def set_p_meshonly(*args): return _sr_py.JoinFieldsAlg_set_p_meshonly(*args)
    def set_p_tolerance(*args): return _sr_py.JoinFieldsAlg_set_p_tolerance(*args)
    def set_progress_reporter(*args): return _sr_py.JoinFieldsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.JoinFieldsAlg_execute(*args)
JoinFieldsAlg_swigregister = _sr_py.JoinFieldsAlg_swigregister
JoinFieldsAlg_swigregister(JoinFieldsAlg)

get_join_fields_alg = _sr_py.get_join_fields_alg
class MergeFieldsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergeFieldsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MergeFieldsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_MergeFieldsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_MergeFieldsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.MergeFieldsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.MergeFieldsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.MergeFieldsAlg_execute(*args)
MergeFieldsAlg_swigregister = _sr_py.MergeFieldsAlg_swigregister
MergeFieldsAlg_swigregister(MergeFieldsAlg)

get_merge_fields_alg = _sr_py.get_merge_fields_alg
class MergeTriSurfsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergeTriSurfsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MergeTriSurfsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_MergeTriSurfsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_MergeTriSurfsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.MergeTriSurfsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.MergeTriSurfsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.MergeTriSurfsAlg_execute(*args)
MergeTriSurfsAlg_swigregister = _sr_py.MergeTriSurfsAlg_swigregister
MergeTriSurfsAlg_swigregister(MergeTriSurfsAlg)

get_merge_tri_surfs_alg = _sr_py.get_merge_tri_surfs_alg
class RefineMeshByIsovalue2Alg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefineMeshByIsovalue2Alg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefineMeshByIsovalue2Alg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_RefineMeshByIsovalue2Alg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_RefineMeshByIsovalue2Alg
    __del__ = lambda self : None;
    def get_p_isoval(*args): return _sr_py.RefineMeshByIsovalue2Alg_get_p_isoval(*args)
    def get_p_lte(*args): return _sr_py.RefineMeshByIsovalue2Alg_get_p_lte(*args)
    def get_progress_reporter(*args): return _sr_py.RefineMeshByIsovalue2Alg_get_progress_reporter(*args)
    def set_p_isoval(*args): return _sr_py.RefineMeshByIsovalue2Alg_set_p_isoval(*args)
    def set_p_lte(*args): return _sr_py.RefineMeshByIsovalue2Alg_set_p_lte(*args)
    def set_progress_reporter(*args): return _sr_py.RefineMeshByIsovalue2Alg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.RefineMeshByIsovalue2Alg_execute(*args)
RefineMeshByIsovalue2Alg_swigregister = _sr_py.RefineMeshByIsovalue2Alg_swigregister
RefineMeshByIsovalue2Alg_swigregister(RefineMeshByIsovalue2Alg)

get_refine_mesh_by_isovalue2_alg = _sr_py.get_refine_mesh_by_isovalue2_alg
class RefineMeshByIsovalueAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefineMeshByIsovalueAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefineMeshByIsovalueAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_RefineMeshByIsovalueAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_RefineMeshByIsovalueAlg
    __del__ = lambda self : None;
    def get_p_isoval(*args): return _sr_py.RefineMeshByIsovalueAlg_get_p_isoval(*args)
    def get_p_lte(*args): return _sr_py.RefineMeshByIsovalueAlg_get_p_lte(*args)
    def get_progress_reporter(*args): return _sr_py.RefineMeshByIsovalueAlg_get_progress_reporter(*args)
    def set_p_isoval(*args): return _sr_py.RefineMeshByIsovalueAlg_set_p_isoval(*args)
    def set_p_lte(*args): return _sr_py.RefineMeshByIsovalueAlg_set_p_lte(*args)
    def set_progress_reporter(*args): return _sr_py.RefineMeshByIsovalueAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.RefineMeshByIsovalueAlg_execute(*args)
RefineMeshByIsovalueAlg_swigregister = _sr_py.RefineMeshByIsovalueAlg_swigregister
RefineMeshByIsovalueAlg_swigregister(RefineMeshByIsovalueAlg)

get_refine_mesh_by_isovalue_alg = _sr_py.get_refine_mesh_by_isovalue_alg
class RefineMeshAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefineMeshAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefineMeshAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_RefineMeshAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_RefineMeshAlg
    __del__ = lambda self : None;
    def get_p_isoval(*args): return _sr_py.RefineMeshAlg_get_p_isoval(*args)
    def get_p_method(*args): return _sr_py.RefineMeshAlg_get_p_method(*args)
    def get_p_select(*args): return _sr_py.RefineMeshAlg_get_p_select(*args)
    def get_progress_reporter(*args): return _sr_py.RefineMeshAlg_get_progress_reporter(*args)
    def set_p_isoval(*args): return _sr_py.RefineMeshAlg_set_p_isoval(*args)
    def set_p_method(*args): return _sr_py.RefineMeshAlg_set_p_method(*args)
    def set_p_select(*args): return _sr_py.RefineMeshAlg_set_p_select(*args)
    def set_progress_reporter(*args): return _sr_py.RefineMeshAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.RefineMeshAlg_execute(*args)
RefineMeshAlg_swigregister = _sr_py.RefineMeshAlg_swigregister
RefineMeshAlg_swigregister(RefineMeshAlg)

get_refine_mesh_alg = _sr_py.get_refine_mesh_alg
class RemoveHexVolSheetAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RemoveHexVolSheetAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RemoveHexVolSheetAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_RemoveHexVolSheetAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_RemoveHexVolSheetAlg
    __del__ = lambda self : None;
    def get_p_edge_list(*args): return _sr_py.RemoveHexVolSheetAlg_get_p_edge_list(*args)
    def get_progress_reporter(*args): return _sr_py.RemoveHexVolSheetAlg_get_progress_reporter(*args)
    def set_p_edge_list(*args): return _sr_py.RemoveHexVolSheetAlg_set_p_edge_list(*args)
    def set_progress_reporter(*args): return _sr_py.RemoveHexVolSheetAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.RemoveHexVolSheetAlg_execute(*args)
RemoveHexVolSheetAlg_swigregister = _sr_py.RemoveHexVolSheetAlg_swigregister
RemoveHexVolSheetAlg_swigregister(RemoveHexVolSheetAlg)

get_remove_hex_vol_sheet_alg = _sr_py.get_remove_hex_vol_sheet_alg
class SplitNodesByDomainAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitNodesByDomainAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplitNodesByDomainAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SplitNodesByDomainAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SplitNodesByDomainAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.SplitNodesByDomainAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.SplitNodesByDomainAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SplitNodesByDomainAlg_execute(*args)
SplitNodesByDomainAlg_swigregister = _sr_py.SplitNodesByDomainAlg_swigregister
SplitNodesByDomainAlg_swigregister(SplitNodesByDomainAlg)

get_split_nodes_by_domain_alg = _sr_py.get_split_nodes_by_domain_alg
class SubsampleStructuredFieldByIndicesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubsampleStructuredFieldByIndicesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubsampleStructuredFieldByIndicesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SubsampleStructuredFieldByIndicesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SubsampleStructuredFieldByIndicesAlg
    __del__ = lambda self : None;
    def get_p_dim_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_dim_i(*args)
    def get_p_dim_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_dim_j(*args)
    def get_p_dim_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_dim_k(*args)
    def get_p_dims(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_dims(*args)
    def get_p_power_app(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_power_app(*args)
    def get_p_start_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_start_i(*args)
    def get_p_start_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_start_j(*args)
    def get_p_start_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_start_k(*args)
    def get_p_stop_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_stop_i(*args)
    def get_p_stop_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_stop_j(*args)
    def get_p_stop_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_stop_k(*args)
    def get_p_stride_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_stride_i(*args)
    def get_p_stride_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_stride_j(*args)
    def get_p_stride_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_stride_k(*args)
    def get_p_wrap(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_wrap(*args)
    def get_p_wrap_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_wrap_i(*args)
    def get_p_wrap_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_wrap_j(*args)
    def get_p_wrap_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_p_wrap_k(*args)
    def get_progress_reporter(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_get_progress_reporter(*args)
    def set_p_dim_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_dim_i(*args)
    def set_p_dim_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_dim_j(*args)
    def set_p_dim_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_dim_k(*args)
    def set_p_dims(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_dims(*args)
    def set_p_power_app(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_power_app(*args)
    def set_p_start_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_start_i(*args)
    def set_p_start_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_start_j(*args)
    def set_p_start_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_start_k(*args)
    def set_p_stop_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_stop_i(*args)
    def set_p_stop_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_stop_j(*args)
    def set_p_stop_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_stop_k(*args)
    def set_p_stride_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_stride_i(*args)
    def set_p_stride_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_stride_j(*args)
    def set_p_stride_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_stride_k(*args)
    def set_p_wrap(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_wrap(*args)
    def set_p_wrap_i(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_wrap_i(*args)
    def set_p_wrap_j(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_wrap_j(*args)
    def set_p_wrap_k(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_p_wrap_k(*args)
    def set_progress_reporter(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SubsampleStructuredFieldByIndicesAlg_execute(*args)
SubsampleStructuredFieldByIndicesAlg_swigregister = _sr_py.SubsampleStructuredFieldByIndicesAlg_swigregister
SubsampleStructuredFieldByIndicesAlg_swigregister(SubsampleStructuredFieldByIndicesAlg)

get_subsample_structured_field_by_indices_alg = _sr_py.get_subsample_structured_field_by_indices_alg
class SeedIntersectionsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeedIntersectionsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SeedIntersectionsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SeedIntersectionsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SeedIntersectionsAlg
    __del__ = lambda self : None;
    def get_p_gen_field(*args): return _sr_py.SeedIntersectionsAlg_get_p_gen_field(*args)
    def get_p_gen_scene_graph(*args): return _sr_py.SeedIntersectionsAlg_get_p_gen_scene_graph(*args)
    def get_p_ptcl_path(*args): return _sr_py.SeedIntersectionsAlg_get_p_ptcl_path(*args)
    def get_p_save_ptcl_files(*args): return _sr_py.SeedIntersectionsAlg_get_p_save_ptcl_files(*args)
    def get_progress_reporter(*args): return _sr_py.SeedIntersectionsAlg_get_progress_reporter(*args)
    def set_p_gen_field(*args): return _sr_py.SeedIntersectionsAlg_set_p_gen_field(*args)
    def set_p_gen_scene_graph(*args): return _sr_py.SeedIntersectionsAlg_set_p_gen_scene_graph(*args)
    def set_p_ptcl_path(*args): return _sr_py.SeedIntersectionsAlg_set_p_ptcl_path(*args)
    def set_p_save_ptcl_files(*args): return _sr_py.SeedIntersectionsAlg_set_p_save_ptcl_files(*args)
    def set_progress_reporter(*args): return _sr_py.SeedIntersectionsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SeedIntersectionsAlg_execute(*args)
SeedIntersectionsAlg_swigregister = _sr_py.SeedIntersectionsAlg_swigregister
SeedIntersectionsAlg_swigregister(SeedIntersectionsAlg)

get_seed_intersections_alg = _sr_py.get_seed_intersections_alg
class CreateStringAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateStringAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateStringAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateStringAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateStringAlg
    __del__ = lambda self : None;
    def get_p_inputstring(*args): return _sr_py.CreateStringAlg_get_p_inputstring(*args)
    def get_progress_reporter(*args): return _sr_py.CreateStringAlg_get_progress_reporter(*args)
    def set_p_inputstring(*args): return _sr_py.CreateStringAlg_set_p_inputstring(*args)
    def set_progress_reporter(*args): return _sr_py.CreateStringAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateStringAlg_execute(*args)
CreateStringAlg_swigregister = _sr_py.CreateStringAlg_swigregister
CreateStringAlg_swigregister(CreateStringAlg)

get_create_string_alg = _sr_py.get_create_string_alg
class GetFileNameAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetFileNameAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetFileNameAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetFileNameAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetFileNameAlg
    __del__ = lambda self : None;
    def get_p_delay(*args): return _sr_py.GetFileNameAlg_get_p_delay(*args)
    def get_p_filename_base(*args): return _sr_py.GetFileNameAlg_get_p_filename_base(*args)
    def get_p_pinned(*args): return _sr_py.GetFileNameAlg_get_p_pinned(*args)
    def get_progress_reporter(*args): return _sr_py.GetFileNameAlg_get_progress_reporter(*args)
    def set_p_delay(*args): return _sr_py.GetFileNameAlg_set_p_delay(*args)
    def set_p_filename_base(*args): return _sr_py.GetFileNameAlg_set_p_filename_base(*args)
    def set_p_pinned(*args): return _sr_py.GetFileNameAlg_set_p_pinned(*args)
    def set_progress_reporter(*args): return _sr_py.GetFileNameAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetFileNameAlg_execute(*args)
GetFileNameAlg_swigregister = _sr_py.GetFileNameAlg_swigregister
GetFileNameAlg_swigregister(GetFileNameAlg)

get_get_file_name_alg = _sr_py.get_get_file_name_alg
class GetNetworkFileNameAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetNetworkFileNameAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GetNetworkFileNameAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GetNetworkFileNameAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GetNetworkFileNameAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.GetNetworkFileNameAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.GetNetworkFileNameAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GetNetworkFileNameAlg_execute(*args)
GetNetworkFileNameAlg_swigregister = _sr_py.GetNetworkFileNameAlg_swigregister
GetNetworkFileNameAlg_swigregister(GetNetworkFileNameAlg)

get_get_network_file_name_alg = _sr_py.get_get_network_file_name_alg
class JoinStringsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JoinStringsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JoinStringsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_JoinStringsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_JoinStringsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.JoinStringsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.JoinStringsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.JoinStringsAlg_execute(*args)
JoinStringsAlg_swigregister = _sr_py.JoinStringsAlg_swigregister
JoinStringsAlg_swigregister(JoinStringsAlg)

get_join_strings_alg = _sr_py.get_join_strings_alg
class PrintMatrixIntoStringAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrintMatrixIntoStringAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrintMatrixIntoStringAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_PrintMatrixIntoStringAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_PrintMatrixIntoStringAlg
    __del__ = lambda self : None;
    def get_p_formatstring(*args): return _sr_py.PrintMatrixIntoStringAlg_get_p_formatstring(*args)
    def get_progress_reporter(*args): return _sr_py.PrintMatrixIntoStringAlg_get_progress_reporter(*args)
    def set_p_formatstring(*args): return _sr_py.PrintMatrixIntoStringAlg_set_p_formatstring(*args)
    def set_progress_reporter(*args): return _sr_py.PrintMatrixIntoStringAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.PrintMatrixIntoStringAlg_execute(*args)
PrintMatrixIntoStringAlg_swigregister = _sr_py.PrintMatrixIntoStringAlg_swigregister
PrintMatrixIntoStringAlg_swigregister(PrintMatrixIntoStringAlg)

get_print_matrix_into_string_alg = _sr_py.get_print_matrix_into_string_alg
class PrintStringIntoStringAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrintStringIntoStringAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrintStringIntoStringAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_PrintStringIntoStringAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_PrintStringIntoStringAlg
    __del__ = lambda self : None;
    def get_p_formatstring(*args): return _sr_py.PrintStringIntoStringAlg_get_p_formatstring(*args)
    def get_progress_reporter(*args): return _sr_py.PrintStringIntoStringAlg_get_progress_reporter(*args)
    def set_p_formatstring(*args): return _sr_py.PrintStringIntoStringAlg_set_p_formatstring(*args)
    def set_progress_reporter(*args): return _sr_py.PrintStringIntoStringAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.PrintStringIntoStringAlg_execute(*args)
PrintStringIntoStringAlg_swigregister = _sr_py.PrintStringIntoStringAlg_swigregister
PrintStringIntoStringAlg_swigregister(PrintStringIntoStringAlg)

get_print_string_into_string_alg = _sr_py.get_print_string_into_string_alg
class ReportStringInfoAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportStringInfoAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportStringInfoAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ReportStringInfoAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ReportStringInfoAlg
    __del__ = lambda self : None;
    def get_p_inputstring(*args): return _sr_py.ReportStringInfoAlg_get_p_inputstring(*args)
    def get_progress_reporter(*args): return _sr_py.ReportStringInfoAlg_get_progress_reporter(*args)
    def set_p_inputstring(*args): return _sr_py.ReportStringInfoAlg_set_p_inputstring(*args)
    def set_progress_reporter(*args): return _sr_py.ReportStringInfoAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ReportStringInfoAlg_execute(*args)
ReportStringInfoAlg_swigregister = _sr_py.ReportStringInfoAlg_swigregister
ReportStringInfoAlg_swigregister(ReportStringInfoAlg)

get_report_string_info_alg = _sr_py.get_report_string_info_alg
class SplitFileNameAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplitFileNameAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplitFileNameAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_SplitFileNameAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_SplitFileNameAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.SplitFileNameAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.SplitFileNameAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.SplitFileNameAlg_execute(*args)
SplitFileNameAlg_swigregister = _sr_py.SplitFileNameAlg_swigregister
SplitFileNameAlg_swigregister(SplitFileNameAlg)

get_split_file_name_alg = _sr_py.get_split_file_name_alg
class TimeControlsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeControlsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeControlsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_TimeControlsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_TimeControlsAlg
    __del__ = lambda self : None;
    def get_p_execmode(*args): return _sr_py.TimeControlsAlg_get_p_execmode(*args)
    def get_p_scale_factor(*args): return _sr_py.TimeControlsAlg_get_p_scale_factor(*args)
    def get_progress_reporter(*args): return _sr_py.TimeControlsAlg_get_progress_reporter(*args)
    def set_p_execmode(*args): return _sr_py.TimeControlsAlg_set_p_execmode(*args)
    def set_p_scale_factor(*args): return _sr_py.TimeControlsAlg_set_p_scale_factor(*args)
    def set_progress_reporter(*args): return _sr_py.TimeControlsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.TimeControlsAlg_execute(*args)
TimeControlsAlg_swigregister = _sr_py.TimeControlsAlg_swigregister
TimeControlsAlg_swigregister(TimeControlsAlg)

get_time_controls_alg = _sr_py.get_time_controls_alg
class ChooseColorMapAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChooseColorMapAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChooseColorMapAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ChooseColorMapAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ChooseColorMapAlg
    __del__ = lambda self : None;
    def get_p_port_selected_index(*args): return _sr_py.ChooseColorMapAlg_get_p_port_selected_index(*args)
    def get_p_port_valid_index(*args): return _sr_py.ChooseColorMapAlg_get_p_port_valid_index(*args)
    def get_p_use_first_valid(*args): return _sr_py.ChooseColorMapAlg_get_p_use_first_valid(*args)
    def get_progress_reporter(*args): return _sr_py.ChooseColorMapAlg_get_progress_reporter(*args)
    def set_p_port_selected_index(*args): return _sr_py.ChooseColorMapAlg_set_p_port_selected_index(*args)
    def set_p_port_valid_index(*args): return _sr_py.ChooseColorMapAlg_set_p_port_valid_index(*args)
    def set_p_use_first_valid(*args): return _sr_py.ChooseColorMapAlg_set_p_use_first_valid(*args)
    def set_progress_reporter(*args): return _sr_py.ChooseColorMapAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ChooseColorMapAlg_execute(*args)
ChooseColorMapAlg_swigregister = _sr_py.ChooseColorMapAlg_swigregister
ChooseColorMapAlg_swigregister(ChooseColorMapAlg)

get_choose_colormap_alg = _sr_py.get_choose_colormap_alg
class ColorMap2DSemanticsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorMap2DSemanticsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorMap2DSemanticsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ColorMap2DSemanticsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ColorMap2DSemanticsAlg
    __del__ = lambda self : None;
    def get_progress_reporter(*args): return _sr_py.ColorMap2DSemanticsAlg_get_progress_reporter(*args)
    def set_progress_reporter(*args): return _sr_py.ColorMap2DSemanticsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ColorMap2DSemanticsAlg_execute(*args)
ColorMap2DSemanticsAlg_swigregister = _sr_py.ColorMap2DSemanticsAlg_swigregister
ColorMap2DSemanticsAlg_swigregister(ColorMap2DSemanticsAlg)

get_colormap2d_semantics_alg = _sr_py.get_colormap2d_semantics_alg
class ConvertFieldsToTextureAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertFieldsToTextureAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertFieldsToTextureAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertFieldsToTextureAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertFieldsToTextureAlg
    __del__ = lambda self : None;
    def get_p_card_mem(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_card_mem(*args)
    def get_p_card_mem_auto(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_card_mem_auto(*args)
    def get_p_gamma(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_gamma(*args)
    def get_p_gmax(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_gmax(*args)
    def get_p_gmin(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_gmin(*args)
    def get_p_histogram(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_histogram(*args)
    def get_p_is_fixed(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_is_fixed(*args)
    def get_p_vmax(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_vmax(*args)
    def get_p_vmin(*args): return _sr_py.ConvertFieldsToTextureAlg_get_p_vmin(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertFieldsToTextureAlg_get_progress_reporter(*args)
    def set_p_card_mem(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_card_mem(*args)
    def set_p_card_mem_auto(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_card_mem_auto(*args)
    def set_p_gamma(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_gamma(*args)
    def set_p_gmax(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_gmax(*args)
    def set_p_gmin(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_gmin(*args)
    def set_p_histogram(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_histogram(*args)
    def set_p_is_fixed(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_is_fixed(*args)
    def set_p_vmax(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_vmax(*args)
    def set_p_vmin(*args): return _sr_py.ConvertFieldsToTextureAlg_set_p_vmin(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertFieldsToTextureAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertFieldsToTextureAlg_execute(*args)
ConvertFieldsToTextureAlg_swigregister = _sr_py.ConvertFieldsToTextureAlg_swigregister
ConvertFieldsToTextureAlg_swigregister(ConvertFieldsToTextureAlg)

get_convert_fields_to_texture_alg = _sr_py.get_convert_fields_to_texture_alg
class ConvertNrrdsToTextureAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvertNrrdsToTextureAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvertNrrdsToTextureAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ConvertNrrdsToTextureAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ConvertNrrdsToTextureAlg
    __del__ = lambda self : None;
    def get_p_card_mem(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_card_mem(*args)
    def get_p_card_mem_auto(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_card_mem_auto(*args)
    def get_p_gamma(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_gamma(*args)
    def get_p_gmax(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_gmax(*args)
    def get_p_gmin(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_gmin(*args)
    def get_p_histogram(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_histogram(*args)
    def get_p_is_fixed(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_is_fixed(*args)
    def get_p_is_uchar(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_is_uchar(*args)
    def get_p_mmax(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_mmax(*args)
    def get_p_mmin(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_mmin(*args)
    def get_p_vmax(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_vmax(*args)
    def get_p_vmin(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_p_vmin(*args)
    def get_progress_reporter(*args): return _sr_py.ConvertNrrdsToTextureAlg_get_progress_reporter(*args)
    def set_p_card_mem(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_card_mem(*args)
    def set_p_card_mem_auto(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_card_mem_auto(*args)
    def set_p_gamma(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_gamma(*args)
    def set_p_gmax(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_gmax(*args)
    def set_p_gmin(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_gmin(*args)
    def set_p_histogram(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_histogram(*args)
    def set_p_is_fixed(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_is_fixed(*args)
    def set_p_is_uchar(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_is_uchar(*args)
    def set_p_mmax(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_mmax(*args)
    def set_p_mmin(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_mmin(*args)
    def set_p_vmax(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_vmax(*args)
    def set_p_vmin(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_p_vmin(*args)
    def set_progress_reporter(*args): return _sr_py.ConvertNrrdsToTextureAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ConvertNrrdsToTextureAlg_execute(*args)
ConvertNrrdsToTextureAlg_swigregister = _sr_py.ConvertNrrdsToTextureAlg_swigregister
ConvertNrrdsToTextureAlg_swigregister(ConvertNrrdsToTextureAlg)

get_convert_nrrds_to_texture_alg = _sr_py.get_convert_nrrds_to_texture_alg
class CreateAndEditColorMap2DAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateAndEditColorMap2DAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateAndEditColorMap2DAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateAndEditColorMap2DAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateAndEditColorMap2DAlg
    __del__ = lambda self : None;
    def get_p_cm2view_targ(*args): return _sr_py.CreateAndEditColorMap2DAlg_get_p_cm2view_targ(*args)
    def get_p_histo(*args): return _sr_py.CreateAndEditColorMap2DAlg_get_p_histo(*args)
    def get_p_id(*args): return _sr_py.CreateAndEditColorMap2DAlg_get_p_id(*args)
    def get_p_marker(*args): return _sr_py.CreateAndEditColorMap2DAlg_get_p_marker(*args)
    def get_p_num_entries(*args): return _sr_py.CreateAndEditColorMap2DAlg_get_p_num_entries(*args)
    def get_p_selected_object(*args): return _sr_py.CreateAndEditColorMap2DAlg_get_p_selected_object(*args)
    def get_p_selected_widget(*args): return _sr_py.CreateAndEditColorMap2DAlg_get_p_selected_widget(*args)
    def get_progress_reporter(*args): return _sr_py.CreateAndEditColorMap2DAlg_get_progress_reporter(*args)
    def set_p_cm2view_targ(*args): return _sr_py.CreateAndEditColorMap2DAlg_set_p_cm2view_targ(*args)
    def set_p_histo(*args): return _sr_py.CreateAndEditColorMap2DAlg_set_p_histo(*args)
    def set_p_id(*args): return _sr_py.CreateAndEditColorMap2DAlg_set_p_id(*args)
    def set_p_marker(*args): return _sr_py.CreateAndEditColorMap2DAlg_set_p_marker(*args)
    def set_p_num_entries(*args): return _sr_py.CreateAndEditColorMap2DAlg_set_p_num_entries(*args)
    def set_p_selected_object(*args): return _sr_py.CreateAndEditColorMap2DAlg_set_p_selected_object(*args)
    def set_p_selected_widget(*args): return _sr_py.CreateAndEditColorMap2DAlg_set_p_selected_widget(*args)
    def set_progress_reporter(*args): return _sr_py.CreateAndEditColorMap2DAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateAndEditColorMap2DAlg_execute(*args)
CreateAndEditColorMap2DAlg_swigregister = _sr_py.CreateAndEditColorMap2DAlg_swigregister
CreateAndEditColorMap2DAlg_swigregister(CreateAndEditColorMap2DAlg)

get_create_and_edit_colormap2d_alg = _sr_py.get_create_and_edit_colormap2d_alg
class CreateAndEditColorMapAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateAndEditColorMapAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateAndEditColorMapAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateAndEditColorMapAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateAndEditColorMapAlg
    __del__ = lambda self : None;
    def get_p_alpha_points(*args): return _sr_py.CreateAndEditColorMapAlg_get_p_alpha_points(*args)
    def get_p_resolution(*args): return _sr_py.CreateAndEditColorMapAlg_get_p_resolution(*args)
    def get_p_rgb_points(*args): return _sr_py.CreateAndEditColorMapAlg_get_p_rgb_points(*args)
    def get_p_rgbhsv(*args): return _sr_py.CreateAndEditColorMapAlg_get_p_rgbhsv(*args)
    def get_progress_reporter(*args): return _sr_py.CreateAndEditColorMapAlg_get_progress_reporter(*args)
    def set_p_alpha_points(*args): return _sr_py.CreateAndEditColorMapAlg_set_p_alpha_points(*args)
    def set_p_resolution(*args): return _sr_py.CreateAndEditColorMapAlg_set_p_resolution(*args)
    def set_p_rgb_points(*args): return _sr_py.CreateAndEditColorMapAlg_set_p_rgb_points(*args)
    def set_p_rgbhsv(*args): return _sr_py.CreateAndEditColorMapAlg_set_p_rgbhsv(*args)
    def set_progress_reporter(*args): return _sr_py.CreateAndEditColorMapAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateAndEditColorMapAlg_execute(*args)
CreateAndEditColorMapAlg_swigregister = _sr_py.CreateAndEditColorMapAlg_swigregister
CreateAndEditColorMapAlg_swigregister(CreateAndEditColorMapAlg)

get_create_and_edit_colormap_alg = _sr_py.get_create_and_edit_colormap_alg
class CreateLightForViewerAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateLightForViewerAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateLightForViewerAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateLightForViewerAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateLightForViewerAlg
    __del__ = lambda self : None;
    def get_p_at_x(*args): return _sr_py.CreateLightForViewerAlg_get_p_at_x(*args)
    def get_p_at_y(*args): return _sr_py.CreateLightForViewerAlg_get_p_at_y(*args)
    def get_p_at_z(*args): return _sr_py.CreateLightForViewerAlg_get_p_at_z(*args)
    def get_p_control_pos_saved(*args): return _sr_py.CreateLightForViewerAlg_get_p_control_pos_saved(*args)
    def get_p_control_x(*args): return _sr_py.CreateLightForViewerAlg_get_p_control_x(*args)
    def get_p_control_y(*args): return _sr_py.CreateLightForViewerAlg_get_p_control_y(*args)
    def get_p_control_z(*args): return _sr_py.CreateLightForViewerAlg_get_p_control_z(*args)
    def get_p_on(*args): return _sr_py.CreateLightForViewerAlg_get_p_on(*args)
    def get_p_type(*args): return _sr_py.CreateLightForViewerAlg_get_p_type(*args)
    def get_progress_reporter(*args): return _sr_py.CreateLightForViewerAlg_get_progress_reporter(*args)
    def set_p_at_x(*args): return _sr_py.CreateLightForViewerAlg_set_p_at_x(*args)
    def set_p_at_y(*args): return _sr_py.CreateLightForViewerAlg_set_p_at_y(*args)
    def set_p_at_z(*args): return _sr_py.CreateLightForViewerAlg_set_p_at_z(*args)
    def set_p_control_pos_saved(*args): return _sr_py.CreateLightForViewerAlg_set_p_control_pos_saved(*args)
    def set_p_control_x(*args): return _sr_py.CreateLightForViewerAlg_set_p_control_x(*args)
    def set_p_control_y(*args): return _sr_py.CreateLightForViewerAlg_set_p_control_y(*args)
    def set_p_control_z(*args): return _sr_py.CreateLightForViewerAlg_set_p_control_z(*args)
    def set_p_on(*args): return _sr_py.CreateLightForViewerAlg_set_p_on(*args)
    def set_p_type(*args): return _sr_py.CreateLightForViewerAlg_set_p_type(*args)
    def set_progress_reporter(*args): return _sr_py.CreateLightForViewerAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateLightForViewerAlg_execute(*args)
CreateLightForViewerAlg_swigregister = _sr_py.CreateLightForViewerAlg_swigregister
CreateLightForViewerAlg_swigregister(CreateLightForViewerAlg)

get_create_light_for_viewer_alg = _sr_py.get_create_light_for_viewer_alg
class CreateStandardColorMapsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateStandardColorMapsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateStandardColorMapsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateStandardColorMapsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateStandardColorMapsAlg
    __del__ = lambda self : None;
    def get_p_faux(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_faux(*args)
    def get_p_gamma(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_gamma(*args)
    def get_p_height(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_height(*args)
    def get_p_mapName(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_mapName(*args)
    def get_p_nodeList(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_nodeList(*args)
    def get_p_positionList(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_positionList(*args)
    def get_p_resolution(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_resolution(*args)
    def get_p_reverse(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_reverse(*args)
    def get_p_width(*args): return _sr_py.CreateStandardColorMapsAlg_get_p_width(*args)
    def get_progress_reporter(*args): return _sr_py.CreateStandardColorMapsAlg_get_progress_reporter(*args)
    def set_p_faux(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_faux(*args)
    def set_p_gamma(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_gamma(*args)
    def set_p_height(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_height(*args)
    def set_p_mapName(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_mapName(*args)
    def set_p_nodeList(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_nodeList(*args)
    def set_p_positionList(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_positionList(*args)
    def set_p_resolution(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_resolution(*args)
    def set_p_reverse(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_reverse(*args)
    def set_p_width(*args): return _sr_py.CreateStandardColorMapsAlg_set_p_width(*args)
    def set_progress_reporter(*args): return _sr_py.CreateStandardColorMapsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateStandardColorMapsAlg_execute(*args)
CreateStandardColorMapsAlg_swigregister = _sr_py.CreateStandardColorMapsAlg_swigregister
CreateStandardColorMapsAlg_swigregister(CreateStandardColorMapsAlg)

get_create_standard_colormaps_alg = _sr_py.get_create_standard_colormaps_alg
class CreateViewerAxesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateViewerAxesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateViewerAxesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateViewerAxesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateViewerAxesAlg
    __del__ = lambda self : None;
    def get_p_Plane_01_0_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_absolute(*args)
    def get_p_Plane_01_0_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_divisions(*args)
    def get_p_Plane_01_0_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_labelangle(*args)
    def get_p_Plane_01_0_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_labelheight(*args)
    def get_p_Plane_01_0_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_lines(*args)
    def get_p_Plane_01_0_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_max_absolute(*args)
    def get_p_Plane_01_0_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_maxlabel(*args)
    def get_p_Plane_01_0_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_maxplane(*args)
    def get_p_Plane_01_0_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_maxticks(*args)
    def get_p_Plane_01_0_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_maxvalue(*args)
    def get_p_Plane_01_0_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_min_absolute(*args)
    def get_p_Plane_01_0_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_minlabel(*args)
    def get_p_Plane_01_0_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_minplane(*args)
    def get_p_Plane_01_0_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_minticks(*args)
    def get_p_Plane_01_0_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_minvalue(*args)
    def get_p_Plane_01_0_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_offset(*args)
    def get_p_Plane_01_0_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_range_first(*args)
    def get_p_Plane_01_0_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_range_second(*args)
    def get_p_Plane_01_0_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_tickangle(*args)
    def get_p_Plane_01_0_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_ticksize(*args)
    def get_p_Plane_01_0_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_ticktilt(*args)
    def get_p_Plane_01_0_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_valuesize(*args)
    def get_p_Plane_01_0_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_valuesquash(*args)
    def get_p_Plane_01_0_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_0_Axis_width(*args)
    def get_p_Plane_01_1_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_absolute(*args)
    def get_p_Plane_01_1_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_divisions(*args)
    def get_p_Plane_01_1_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_labelangle(*args)
    def get_p_Plane_01_1_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_labelheight(*args)
    def get_p_Plane_01_1_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_lines(*args)
    def get_p_Plane_01_1_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_max_absolute(*args)
    def get_p_Plane_01_1_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_maxlabel(*args)
    def get_p_Plane_01_1_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_maxplane(*args)
    def get_p_Plane_01_1_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_maxticks(*args)
    def get_p_Plane_01_1_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_maxvalue(*args)
    def get_p_Plane_01_1_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_min_absolute(*args)
    def get_p_Plane_01_1_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_minlabel(*args)
    def get_p_Plane_01_1_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_minplane(*args)
    def get_p_Plane_01_1_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_minticks(*args)
    def get_p_Plane_01_1_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_minvalue(*args)
    def get_p_Plane_01_1_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_offset(*args)
    def get_p_Plane_01_1_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_range_first(*args)
    def get_p_Plane_01_1_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_range_second(*args)
    def get_p_Plane_01_1_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_tickangle(*args)
    def get_p_Plane_01_1_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_ticksize(*args)
    def get_p_Plane_01_1_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_ticktilt(*args)
    def get_p_Plane_01_1_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_valuesize(*args)
    def get_p_Plane_01_1_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_valuesquash(*args)
    def get_p_Plane_01_1_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_01_1_Axis_width(*args)
    def get_p_Plane_02_0_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_absolute(*args)
    def get_p_Plane_02_0_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_divisions(*args)
    def get_p_Plane_02_0_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_labelangle(*args)
    def get_p_Plane_02_0_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_labelheight(*args)
    def get_p_Plane_02_0_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_lines(*args)
    def get_p_Plane_02_0_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_max_absolute(*args)
    def get_p_Plane_02_0_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_maxlabel(*args)
    def get_p_Plane_02_0_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_maxplane(*args)
    def get_p_Plane_02_0_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_maxticks(*args)
    def get_p_Plane_02_0_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_maxvalue(*args)
    def get_p_Plane_02_0_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_min_absolute(*args)
    def get_p_Plane_02_0_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_minlabel(*args)
    def get_p_Plane_02_0_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_minplane(*args)
    def get_p_Plane_02_0_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_minticks(*args)
    def get_p_Plane_02_0_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_minvalue(*args)
    def get_p_Plane_02_0_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_offset(*args)
    def get_p_Plane_02_0_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_range_first(*args)
    def get_p_Plane_02_0_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_range_second(*args)
    def get_p_Plane_02_0_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_tickangle(*args)
    def get_p_Plane_02_0_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_ticksize(*args)
    def get_p_Plane_02_0_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_ticktilt(*args)
    def get_p_Plane_02_0_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_valuesize(*args)
    def get_p_Plane_02_0_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_valuesquash(*args)
    def get_p_Plane_02_0_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_0_Axis_width(*args)
    def get_p_Plane_02_2_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_absolute(*args)
    def get_p_Plane_02_2_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_divisions(*args)
    def get_p_Plane_02_2_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_labelangle(*args)
    def get_p_Plane_02_2_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_labelheight(*args)
    def get_p_Plane_02_2_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_lines(*args)
    def get_p_Plane_02_2_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_max_absolute(*args)
    def get_p_Plane_02_2_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_maxlabel(*args)
    def get_p_Plane_02_2_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_maxplane(*args)
    def get_p_Plane_02_2_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_maxticks(*args)
    def get_p_Plane_02_2_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_maxvalue(*args)
    def get_p_Plane_02_2_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_min_absolute(*args)
    def get_p_Plane_02_2_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_minlabel(*args)
    def get_p_Plane_02_2_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_minplane(*args)
    def get_p_Plane_02_2_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_minticks(*args)
    def get_p_Plane_02_2_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_minvalue(*args)
    def get_p_Plane_02_2_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_offset(*args)
    def get_p_Plane_02_2_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_range_first(*args)
    def get_p_Plane_02_2_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_range_second(*args)
    def get_p_Plane_02_2_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_tickangle(*args)
    def get_p_Plane_02_2_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_ticksize(*args)
    def get_p_Plane_02_2_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_ticktilt(*args)
    def get_p_Plane_02_2_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_valuesize(*args)
    def get_p_Plane_02_2_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_valuesquash(*args)
    def get_p_Plane_02_2_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_02_2_Axis_width(*args)
    def get_p_Plane_12_1_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_absolute(*args)
    def get_p_Plane_12_1_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_divisions(*args)
    def get_p_Plane_12_1_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_labelangle(*args)
    def get_p_Plane_12_1_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_labelheight(*args)
    def get_p_Plane_12_1_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_lines(*args)
    def get_p_Plane_12_1_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_max_absolute(*args)
    def get_p_Plane_12_1_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_maxlabel(*args)
    def get_p_Plane_12_1_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_maxplane(*args)
    def get_p_Plane_12_1_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_maxticks(*args)
    def get_p_Plane_12_1_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_maxvalue(*args)
    def get_p_Plane_12_1_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_min_absolute(*args)
    def get_p_Plane_12_1_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_minlabel(*args)
    def get_p_Plane_12_1_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_minplane(*args)
    def get_p_Plane_12_1_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_minticks(*args)
    def get_p_Plane_12_1_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_minvalue(*args)
    def get_p_Plane_12_1_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_offset(*args)
    def get_p_Plane_12_1_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_range_first(*args)
    def get_p_Plane_12_1_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_range_second(*args)
    def get_p_Plane_12_1_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_tickangle(*args)
    def get_p_Plane_12_1_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_ticksize(*args)
    def get_p_Plane_12_1_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_ticktilt(*args)
    def get_p_Plane_12_1_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_valuesize(*args)
    def get_p_Plane_12_1_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_valuesquash(*args)
    def get_p_Plane_12_1_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_1_Axis_width(*args)
    def get_p_Plane_12_2_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_absolute(*args)
    def get_p_Plane_12_2_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_divisions(*args)
    def get_p_Plane_12_2_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_labelangle(*args)
    def get_p_Plane_12_2_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_labelheight(*args)
    def get_p_Plane_12_2_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_lines(*args)
    def get_p_Plane_12_2_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_max_absolute(*args)
    def get_p_Plane_12_2_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_maxlabel(*args)
    def get_p_Plane_12_2_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_maxplane(*args)
    def get_p_Plane_12_2_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_maxticks(*args)
    def get_p_Plane_12_2_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_maxvalue(*args)
    def get_p_Plane_12_2_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_min_absolute(*args)
    def get_p_Plane_12_2_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_minlabel(*args)
    def get_p_Plane_12_2_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_minplane(*args)
    def get_p_Plane_12_2_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_minticks(*args)
    def get_p_Plane_12_2_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_minvalue(*args)
    def get_p_Plane_12_2_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_offset(*args)
    def get_p_Plane_12_2_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_range_first(*args)
    def get_p_Plane_12_2_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_range_second(*args)
    def get_p_Plane_12_2_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_tickangle(*args)
    def get_p_Plane_12_2_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_ticksize(*args)
    def get_p_Plane_12_2_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_ticktilt(*args)
    def get_p_Plane_12_2_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_valuesize(*args)
    def get_p_Plane_12_2_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_valuesquash(*args)
    def get_p_Plane_12_2_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_get_p_Plane_12_2_Axis_width(*args)
    def get_p_labelrez(*args): return _sr_py.CreateViewerAxesAlg_get_p_labelrez(*args)
    def get_p_precision(*args): return _sr_py.CreateViewerAxesAlg_get_p_precision(*args)
    def get_p_squash(*args): return _sr_py.CreateViewerAxesAlg_get_p_squash(*args)
    def get_p_valuerez(*args): return _sr_py.CreateViewerAxesAlg_get_p_valuerez(*args)
    def get_progress_reporter(*args): return _sr_py.CreateViewerAxesAlg_get_progress_reporter(*args)
    def set_p_Plane_01_0_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_absolute(*args)
    def set_p_Plane_01_0_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_divisions(*args)
    def set_p_Plane_01_0_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_labelangle(*args)
    def set_p_Plane_01_0_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_labelheight(*args)
    def set_p_Plane_01_0_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_lines(*args)
    def set_p_Plane_01_0_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_max_absolute(*args)
    def set_p_Plane_01_0_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_maxlabel(*args)
    def set_p_Plane_01_0_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_maxplane(*args)
    def set_p_Plane_01_0_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_maxticks(*args)
    def set_p_Plane_01_0_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_maxvalue(*args)
    def set_p_Plane_01_0_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_min_absolute(*args)
    def set_p_Plane_01_0_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_minlabel(*args)
    def set_p_Plane_01_0_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_minplane(*args)
    def set_p_Plane_01_0_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_minticks(*args)
    def set_p_Plane_01_0_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_minvalue(*args)
    def set_p_Plane_01_0_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_offset(*args)
    def set_p_Plane_01_0_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_range_first(*args)
    def set_p_Plane_01_0_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_range_second(*args)
    def set_p_Plane_01_0_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_tickangle(*args)
    def set_p_Plane_01_0_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_ticksize(*args)
    def set_p_Plane_01_0_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_ticktilt(*args)
    def set_p_Plane_01_0_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_valuesize(*args)
    def set_p_Plane_01_0_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_valuesquash(*args)
    def set_p_Plane_01_0_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_0_Axis_width(*args)
    def set_p_Plane_01_1_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_absolute(*args)
    def set_p_Plane_01_1_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_divisions(*args)
    def set_p_Plane_01_1_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_labelangle(*args)
    def set_p_Plane_01_1_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_labelheight(*args)
    def set_p_Plane_01_1_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_lines(*args)
    def set_p_Plane_01_1_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_max_absolute(*args)
    def set_p_Plane_01_1_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_maxlabel(*args)
    def set_p_Plane_01_1_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_maxplane(*args)
    def set_p_Plane_01_1_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_maxticks(*args)
    def set_p_Plane_01_1_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_maxvalue(*args)
    def set_p_Plane_01_1_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_min_absolute(*args)
    def set_p_Plane_01_1_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_minlabel(*args)
    def set_p_Plane_01_1_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_minplane(*args)
    def set_p_Plane_01_1_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_minticks(*args)
    def set_p_Plane_01_1_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_minvalue(*args)
    def set_p_Plane_01_1_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_offset(*args)
    def set_p_Plane_01_1_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_range_first(*args)
    def set_p_Plane_01_1_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_range_second(*args)
    def set_p_Plane_01_1_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_tickangle(*args)
    def set_p_Plane_01_1_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_ticksize(*args)
    def set_p_Plane_01_1_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_ticktilt(*args)
    def set_p_Plane_01_1_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_valuesize(*args)
    def set_p_Plane_01_1_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_valuesquash(*args)
    def set_p_Plane_01_1_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_01_1_Axis_width(*args)
    def set_p_Plane_02_0_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_absolute(*args)
    def set_p_Plane_02_0_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_divisions(*args)
    def set_p_Plane_02_0_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_labelangle(*args)
    def set_p_Plane_02_0_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_labelheight(*args)
    def set_p_Plane_02_0_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_lines(*args)
    def set_p_Plane_02_0_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_max_absolute(*args)
    def set_p_Plane_02_0_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_maxlabel(*args)
    def set_p_Plane_02_0_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_maxplane(*args)
    def set_p_Plane_02_0_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_maxticks(*args)
    def set_p_Plane_02_0_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_maxvalue(*args)
    def set_p_Plane_02_0_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_min_absolute(*args)
    def set_p_Plane_02_0_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_minlabel(*args)
    def set_p_Plane_02_0_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_minplane(*args)
    def set_p_Plane_02_0_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_minticks(*args)
    def set_p_Plane_02_0_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_minvalue(*args)
    def set_p_Plane_02_0_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_offset(*args)
    def set_p_Plane_02_0_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_range_first(*args)
    def set_p_Plane_02_0_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_range_second(*args)
    def set_p_Plane_02_0_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_tickangle(*args)
    def set_p_Plane_02_0_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_ticksize(*args)
    def set_p_Plane_02_0_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_ticktilt(*args)
    def set_p_Plane_02_0_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_valuesize(*args)
    def set_p_Plane_02_0_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_valuesquash(*args)
    def set_p_Plane_02_0_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_0_Axis_width(*args)
    def set_p_Plane_02_2_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_absolute(*args)
    def set_p_Plane_02_2_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_divisions(*args)
    def set_p_Plane_02_2_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_labelangle(*args)
    def set_p_Plane_02_2_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_labelheight(*args)
    def set_p_Plane_02_2_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_lines(*args)
    def set_p_Plane_02_2_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_max_absolute(*args)
    def set_p_Plane_02_2_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_maxlabel(*args)
    def set_p_Plane_02_2_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_maxplane(*args)
    def set_p_Plane_02_2_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_maxticks(*args)
    def set_p_Plane_02_2_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_maxvalue(*args)
    def set_p_Plane_02_2_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_min_absolute(*args)
    def set_p_Plane_02_2_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_minlabel(*args)
    def set_p_Plane_02_2_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_minplane(*args)
    def set_p_Plane_02_2_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_minticks(*args)
    def set_p_Plane_02_2_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_minvalue(*args)
    def set_p_Plane_02_2_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_offset(*args)
    def set_p_Plane_02_2_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_range_first(*args)
    def set_p_Plane_02_2_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_range_second(*args)
    def set_p_Plane_02_2_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_tickangle(*args)
    def set_p_Plane_02_2_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_ticksize(*args)
    def set_p_Plane_02_2_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_ticktilt(*args)
    def set_p_Plane_02_2_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_valuesize(*args)
    def set_p_Plane_02_2_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_valuesquash(*args)
    def set_p_Plane_02_2_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_02_2_Axis_width(*args)
    def set_p_Plane_12_1_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_absolute(*args)
    def set_p_Plane_12_1_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_divisions(*args)
    def set_p_Plane_12_1_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_labelangle(*args)
    def set_p_Plane_12_1_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_labelheight(*args)
    def set_p_Plane_12_1_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_lines(*args)
    def set_p_Plane_12_1_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_max_absolute(*args)
    def set_p_Plane_12_1_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_maxlabel(*args)
    def set_p_Plane_12_1_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_maxplane(*args)
    def set_p_Plane_12_1_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_maxticks(*args)
    def set_p_Plane_12_1_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_maxvalue(*args)
    def set_p_Plane_12_1_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_min_absolute(*args)
    def set_p_Plane_12_1_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_minlabel(*args)
    def set_p_Plane_12_1_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_minplane(*args)
    def set_p_Plane_12_1_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_minticks(*args)
    def set_p_Plane_12_1_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_minvalue(*args)
    def set_p_Plane_12_1_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_offset(*args)
    def set_p_Plane_12_1_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_range_first(*args)
    def set_p_Plane_12_1_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_range_second(*args)
    def set_p_Plane_12_1_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_tickangle(*args)
    def set_p_Plane_12_1_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_ticksize(*args)
    def set_p_Plane_12_1_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_ticktilt(*args)
    def set_p_Plane_12_1_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_valuesize(*args)
    def set_p_Plane_12_1_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_valuesquash(*args)
    def set_p_Plane_12_1_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_1_Axis_width(*args)
    def set_p_Plane_12_2_Axis_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_absolute(*args)
    def set_p_Plane_12_2_Axis_divisions(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_divisions(*args)
    def set_p_Plane_12_2_Axis_labelangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_labelangle(*args)
    def set_p_Plane_12_2_Axis_labelheight(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_labelheight(*args)
    def set_p_Plane_12_2_Axis_lines(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_lines(*args)
    def set_p_Plane_12_2_Axis_max_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_max_absolute(*args)
    def set_p_Plane_12_2_Axis_maxlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_maxlabel(*args)
    def set_p_Plane_12_2_Axis_maxplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_maxplane(*args)
    def set_p_Plane_12_2_Axis_maxticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_maxticks(*args)
    def set_p_Plane_12_2_Axis_maxvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_maxvalue(*args)
    def set_p_Plane_12_2_Axis_min_absolute(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_min_absolute(*args)
    def set_p_Plane_12_2_Axis_minlabel(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_minlabel(*args)
    def set_p_Plane_12_2_Axis_minplane(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_minplane(*args)
    def set_p_Plane_12_2_Axis_minticks(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_minticks(*args)
    def set_p_Plane_12_2_Axis_minvalue(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_minvalue(*args)
    def set_p_Plane_12_2_Axis_offset(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_offset(*args)
    def set_p_Plane_12_2_Axis_range_first(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_range_first(*args)
    def set_p_Plane_12_2_Axis_range_second(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_range_second(*args)
    def set_p_Plane_12_2_Axis_tickangle(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_tickangle(*args)
    def set_p_Plane_12_2_Axis_ticksize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_ticksize(*args)
    def set_p_Plane_12_2_Axis_ticktilt(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_ticktilt(*args)
    def set_p_Plane_12_2_Axis_valuesize(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_valuesize(*args)
    def set_p_Plane_12_2_Axis_valuesquash(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_valuesquash(*args)
    def set_p_Plane_12_2_Axis_width(*args): return _sr_py.CreateViewerAxesAlg_set_p_Plane_12_2_Axis_width(*args)
    def set_p_labelrez(*args): return _sr_py.CreateViewerAxesAlg_set_p_labelrez(*args)
    def set_p_precision(*args): return _sr_py.CreateViewerAxesAlg_set_p_precision(*args)
    def set_p_squash(*args): return _sr_py.CreateViewerAxesAlg_set_p_squash(*args)
    def set_p_valuerez(*args): return _sr_py.CreateViewerAxesAlg_set_p_valuerez(*args)
    def set_progress_reporter(*args): return _sr_py.CreateViewerAxesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateViewerAxesAlg_execute(*args)
CreateViewerAxesAlg_swigregister = _sr_py.CreateViewerAxesAlg_swigregister
CreateViewerAxesAlg_swigregister(CreateViewerAxesAlg)

get_create_viewer_axes_alg = _sr_py.get_create_viewer_axes_alg
class CreateViewerClockIconAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateViewerClockIconAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateViewerClockIconAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_CreateViewerClockIconAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_CreateViewerClockIconAlg
    __del__ = lambda self : None;
    def get_p_bbox(*args): return _sr_py.CreateViewerClockIconAlg_get_p_bbox(*args)
    def get_p_color_b(*args): return _sr_py.CreateViewerClockIconAlg_get_p_color_b(*args)
    def get_p_color_g(*args): return _sr_py.CreateViewerClockIconAlg_get_p_color_g(*args)
    def get_p_color_r(*args): return _sr_py.CreateViewerClockIconAlg_get_p_color_r(*args)
    def get_p_current(*args): return _sr_py.CreateViewerClockIconAlg_get_p_current(*args)
    def get_p_format(*args): return _sr_py.CreateViewerClockIconAlg_get_p_format(*args)
    def get_p_location_x(*args): return _sr_py.CreateViewerClockIconAlg_get_p_location_x(*args)
    def get_p_location_y(*args): return _sr_py.CreateViewerClockIconAlg_get_p_location_y(*args)
    def get_p_max(*args): return _sr_py.CreateViewerClockIconAlg_get_p_max(*args)
    def get_p_min(*args): return _sr_py.CreateViewerClockIconAlg_get_p_min(*args)
    def get_p_size(*args): return _sr_py.CreateViewerClockIconAlg_get_p_size(*args)
    def get_p_type(*args): return _sr_py.CreateViewerClockIconAlg_get_p_type(*args)
    def get_progress_reporter(*args): return _sr_py.CreateViewerClockIconAlg_get_progress_reporter(*args)
    def set_p_bbox(*args): return _sr_py.CreateViewerClockIconAlg_set_p_bbox(*args)
    def set_p_color_b(*args): return _sr_py.CreateViewerClockIconAlg_set_p_color_b(*args)
    def set_p_color_g(*args): return _sr_py.CreateViewerClockIconAlg_set_p_color_g(*args)
    def set_p_color_r(*args): return _sr_py.CreateViewerClockIconAlg_set_p_color_r(*args)
    def set_p_current(*args): return _sr_py.CreateViewerClockIconAlg_set_p_current(*args)
    def set_p_format(*args): return _sr_py.CreateViewerClockIconAlg_set_p_format(*args)
    def set_p_location_x(*args): return _sr_py.CreateViewerClockIconAlg_set_p_location_x(*args)
    def set_p_location_y(*args): return _sr_py.CreateViewerClockIconAlg_set_p_location_y(*args)
    def set_p_max(*args): return _sr_py.CreateViewerClockIconAlg_set_p_max(*args)
    def set_p_min(*args): return _sr_py.CreateViewerClockIconAlg_set_p_min(*args)
    def set_p_size(*args): return _sr_py.CreateViewerClockIconAlg_set_p_size(*args)
    def set_p_type(*args): return _sr_py.CreateViewerClockIconAlg_set_p_type(*args)
    def set_progress_reporter(*args): return _sr_py.CreateViewerClockIconAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.CreateViewerClockIconAlg_execute(*args)
CreateViewerClockIconAlg_swigregister = _sr_py.CreateViewerClockIconAlg_swigregister
CreateViewerClockIconAlg_swigregister(CreateViewerClockIconAlg)

get_create_viewer_clock_icon_alg = _sr_py.get_create_viewer_clock_icon_alg
class ExtractIsosurfaceAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtractIsosurfaceAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtractIsosurfaceAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ExtractIsosurfaceAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ExtractIsosurfaceAlg
    __del__ = lambda self : None;
    def get_p_active_isoval_selection_tab(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_active_isoval_selection_tab(*args)
    def get_p_active_tab(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_active_tab(*args)
    def get_p_algorithm(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_algorithm(*args)
    def get_p_build_geom(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_build_geom(*args)
    def get_p_build_trisurf(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_build_trisurf(*args)
    def get_p_color_a(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_color_a(*args)
    def get_p_color_b(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_color_b(*args)
    def get_p_color_g(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_color_g(*args)
    def get_p_color_r(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_color_r(*args)
    def get_p_isoval(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_isoval(*args)
    def get_p_isoval_list(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_isoval_list(*args)
    def get_p_isoval_max(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_isoval_max(*args)
    def get_p_isoval_min(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_isoval_min(*args)
    def get_p_isoval_quantity(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_isoval_quantity(*args)
    def get_p_isoval_typed(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_isoval_typed(*args)
    def get_p_matrix_list(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_matrix_list(*args)
    def get_p_np(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_np(*args)
    def get_p_quantity_clusive(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_quantity_clusive(*args)
    def get_p_quantity_list(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_quantity_list(*args)
    def get_p_quantity_max(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_quantity_max(*args)
    def get_p_quantity_min(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_quantity_min(*args)
    def get_p_quantity_range(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_quantity_range(*args)
    def get_p_transparency(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_transparency(*args)
    def get_p_update_type(*args): return _sr_py.ExtractIsosurfaceAlg_get_p_update_type(*args)
    def get_progress_reporter(*args): return _sr_py.ExtractIsosurfaceAlg_get_progress_reporter(*args)
    def set_p_active_isoval_selection_tab(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_active_isoval_selection_tab(*args)
    def set_p_active_tab(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_active_tab(*args)
    def set_p_algorithm(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_algorithm(*args)
    def set_p_build_geom(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_build_geom(*args)
    def set_p_build_trisurf(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_build_trisurf(*args)
    def set_p_color_a(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_color_a(*args)
    def set_p_color_b(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_color_b(*args)
    def set_p_color_g(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_color_g(*args)
    def set_p_color_r(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_color_r(*args)
    def set_p_isoval(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_isoval(*args)
    def set_p_isoval_list(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_isoval_list(*args)
    def set_p_isoval_max(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_isoval_max(*args)
    def set_p_isoval_min(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_isoval_min(*args)
    def set_p_isoval_quantity(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_isoval_quantity(*args)
    def set_p_isoval_typed(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_isoval_typed(*args)
    def set_p_matrix_list(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_matrix_list(*args)
    def set_p_np(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_np(*args)
    def set_p_quantity_clusive(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_quantity_clusive(*args)
    def set_p_quantity_list(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_quantity_list(*args)
    def set_p_quantity_max(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_quantity_max(*args)
    def set_p_quantity_min(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_quantity_min(*args)
    def set_p_quantity_range(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_quantity_range(*args)
    def set_p_transparency(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_transparency(*args)
    def set_p_update_type(*args): return _sr_py.ExtractIsosurfaceAlg_set_p_update_type(*args)
    def set_progress_reporter(*args): return _sr_py.ExtractIsosurfaceAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ExtractIsosurfaceAlg_execute(*args)
ExtractIsosurfaceAlg_swigregister = _sr_py.ExtractIsosurfaceAlg_swigregister
ExtractIsosurfaceAlg_swigregister(ExtractIsosurfaceAlg)

get_extract_isosurface_alg = _sr_py.get_extract_isosurface_alg
class GenerateStreamLinesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenerateStreamLinesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenerateStreamLinesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GenerateStreamLinesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GenerateStreamLinesAlg
    __del__ = lambda self : None;
    def get_p_auto_parameterize(*args): return _sr_py.GenerateStreamLinesAlg_get_p_auto_parameterize(*args)
    def get_p_direction(*args): return _sr_py.GenerateStreamLinesAlg_get_p_direction(*args)
    def get_p_maxsteps(*args): return _sr_py.GenerateStreamLinesAlg_get_p_maxsteps(*args)
    def get_p_method(*args): return _sr_py.GenerateStreamLinesAlg_get_p_method(*args)
    def get_p_nthreads(*args): return _sr_py.GenerateStreamLinesAlg_get_p_nthreads(*args)
    def get_p_remove_colinear_pts(*args): return _sr_py.GenerateStreamLinesAlg_get_p_remove_colinear_pts(*args)
    def get_p_stepsize(*args): return _sr_py.GenerateStreamLinesAlg_get_p_stepsize(*args)
    def get_p_tolerance(*args): return _sr_py.GenerateStreamLinesAlg_get_p_tolerance(*args)
    def get_p_value(*args): return _sr_py.GenerateStreamLinesAlg_get_p_value(*args)
    def get_progress_reporter(*args): return _sr_py.GenerateStreamLinesAlg_get_progress_reporter(*args)
    def set_p_auto_parameterize(*args): return _sr_py.GenerateStreamLinesAlg_set_p_auto_parameterize(*args)
    def set_p_direction(*args): return _sr_py.GenerateStreamLinesAlg_set_p_direction(*args)
    def set_p_maxsteps(*args): return _sr_py.GenerateStreamLinesAlg_set_p_maxsteps(*args)
    def set_p_method(*args): return _sr_py.GenerateStreamLinesAlg_set_p_method(*args)
    def set_p_nthreads(*args): return _sr_py.GenerateStreamLinesAlg_set_p_nthreads(*args)
    def set_p_remove_colinear_pts(*args): return _sr_py.GenerateStreamLinesAlg_set_p_remove_colinear_pts(*args)
    def set_p_stepsize(*args): return _sr_py.GenerateStreamLinesAlg_set_p_stepsize(*args)
    def set_p_tolerance(*args): return _sr_py.GenerateStreamLinesAlg_set_p_tolerance(*args)
    def set_p_value(*args): return _sr_py.GenerateStreamLinesAlg_set_p_value(*args)
    def set_progress_reporter(*args): return _sr_py.GenerateStreamLinesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GenerateStreamLinesAlg_execute(*args)
GenerateStreamLinesAlg_swigregister = _sr_py.GenerateStreamLinesAlg_swigregister
GenerateStreamLinesAlg_swigregister(GenerateStreamLinesAlg)

get_generate_stream_lines_alg = _sr_py.get_generate_stream_lines_alg
class GenerateStreamLinesWithPlacementHeuristicAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenerateStreamLinesWithPlacementHeuristicAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenerateStreamLinesWithPlacementHeuristicAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_GenerateStreamLinesWithPlacementHeuristicAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_GenerateStreamLinesWithPlacementHeuristicAlg
    __del__ = lambda self : None;
    def get_p_direction(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_direction(*args)
    def get_p_maxg(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_maxg(*args)
    def get_p_maxper(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_maxper(*args)
    def get_p_maxsteps(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_maxsteps(*args)
    def get_p_method(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_method(*args)
    def get_p_ming(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_ming(*args)
    def get_p_minmag(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_minmag(*args)
    def get_p_minper(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_minper(*args)
    def get_p_numpts(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_numpts(*args)
    def get_p_numsamples(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_numsamples(*args)
    def get_p_numsl(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_numsl(*args)
    def get_p_stepout(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_stepout(*args)
    def get_p_stepsize(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_p_stepsize(*args)
    def get_progress_reporter(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_get_progress_reporter(*args)
    def set_p_direction(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_direction(*args)
    def set_p_maxg(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_maxg(*args)
    def set_p_maxper(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_maxper(*args)
    def set_p_maxsteps(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_maxsteps(*args)
    def set_p_method(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_method(*args)
    def set_p_ming(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_ming(*args)
    def set_p_minmag(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_minmag(*args)
    def set_p_minper(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_minper(*args)
    def set_p_numpts(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_numpts(*args)
    def set_p_numsamples(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_numsamples(*args)
    def set_p_numsl(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_numsl(*args)
    def set_p_stepout(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_stepout(*args)
    def set_p_stepsize(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_p_stepsize(*args)
    def set_progress_reporter(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_execute(*args)
GenerateStreamLinesWithPlacementHeuristicAlg_swigregister = _sr_py.GenerateStreamLinesWithPlacementHeuristicAlg_swigregister
GenerateStreamLinesWithPlacementHeuristicAlg_swigregister(GenerateStreamLinesWithPlacementHeuristicAlg)

get_generate_stream_lines_with_placement_heuristic_alg = _sr_py.get_generate_stream_lines_with_placement_heuristic_alg
class RescaleColorMapAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RescaleColorMapAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RescaleColorMapAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_RescaleColorMapAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_RescaleColorMapAlg
    __del__ = lambda self : None;
    def get_p_isFixed(*args): return _sr_py.RescaleColorMapAlg_get_p_isFixed(*args)
    def get_p_main_frame(*args): return _sr_py.RescaleColorMapAlg_get_p_main_frame(*args)
    def get_p_makeSymmetric(*args): return _sr_py.RescaleColorMapAlg_get_p_makeSymmetric(*args)
    def get_p_max(*args): return _sr_py.RescaleColorMapAlg_get_p_max(*args)
    def get_p_min(*args): return _sr_py.RescaleColorMapAlg_get_p_min(*args)
    def get_progress_reporter(*args): return _sr_py.RescaleColorMapAlg_get_progress_reporter(*args)
    def set_p_isFixed(*args): return _sr_py.RescaleColorMapAlg_set_p_isFixed(*args)
    def set_p_main_frame(*args): return _sr_py.RescaleColorMapAlg_set_p_main_frame(*args)
    def set_p_makeSymmetric(*args): return _sr_py.RescaleColorMapAlg_set_p_makeSymmetric(*args)
    def set_p_max(*args): return _sr_py.RescaleColorMapAlg_set_p_max(*args)
    def set_p_min(*args): return _sr_py.RescaleColorMapAlg_set_p_min(*args)
    def set_progress_reporter(*args): return _sr_py.RescaleColorMapAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.RescaleColorMapAlg_execute(*args)
RescaleColorMapAlg_swigregister = _sr_py.RescaleColorMapAlg_swigregister
RescaleColorMapAlg_swigregister(RescaleColorMapAlg)

get_rescale_colormap_alg = _sr_py.get_rescale_colormap_alg
class ShowColorMapAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShowColorMapAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShowColorMapAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ShowColorMapAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ShowColorMapAlg
    __del__ = lambda self : None;
    def get_p_color_b(*args): return _sr_py.ShowColorMapAlg_get_p_color_b(*args)
    def get_p_color_g(*args): return _sr_py.ShowColorMapAlg_get_p_color_g(*args)
    def get_p_color_r(*args): return _sr_py.ShowColorMapAlg_get_p_color_r(*args)
    def get_p_extra_padding(*args): return _sr_py.ShowColorMapAlg_get_p_extra_padding(*args)
    def get_p_length(*args): return _sr_py.ShowColorMapAlg_get_p_length(*args)
    def get_p_numlabels(*args): return _sr_py.ShowColorMapAlg_get_p_numlabels(*args)
    def get_p_numsigdigits(*args): return _sr_py.ShowColorMapAlg_get_p_numsigdigits(*args)
    def get_p_scale(*args): return _sr_py.ShowColorMapAlg_get_p_scale(*args)
    def get_p_side(*args): return _sr_py.ShowColorMapAlg_get_p_side(*args)
    def get_p_text_fontsize(*args): return _sr_py.ShowColorMapAlg_get_p_text_fontsize(*args)
    def get_p_units(*args): return _sr_py.ShowColorMapAlg_get_p_units(*args)
    def get_progress_reporter(*args): return _sr_py.ShowColorMapAlg_get_progress_reporter(*args)
    def set_p_color_b(*args): return _sr_py.ShowColorMapAlg_set_p_color_b(*args)
    def set_p_color_g(*args): return _sr_py.ShowColorMapAlg_set_p_color_g(*args)
    def set_p_color_r(*args): return _sr_py.ShowColorMapAlg_set_p_color_r(*args)
    def set_p_extra_padding(*args): return _sr_py.ShowColorMapAlg_set_p_extra_padding(*args)
    def set_p_length(*args): return _sr_py.ShowColorMapAlg_set_p_length(*args)
    def set_p_numlabels(*args): return _sr_py.ShowColorMapAlg_set_p_numlabels(*args)
    def set_p_numsigdigits(*args): return _sr_py.ShowColorMapAlg_set_p_numsigdigits(*args)
    def set_p_scale(*args): return _sr_py.ShowColorMapAlg_set_p_scale(*args)
    def set_p_side(*args): return _sr_py.ShowColorMapAlg_set_p_side(*args)
    def set_p_text_fontsize(*args): return _sr_py.ShowColorMapAlg_set_p_text_fontsize(*args)
    def set_p_units(*args): return _sr_py.ShowColorMapAlg_set_p_units(*args)
    def set_progress_reporter(*args): return _sr_py.ShowColorMapAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ShowColorMapAlg_execute(*args)
ShowColorMapAlg_swigregister = _sr_py.ShowColorMapAlg_swigregister
ShowColorMapAlg_swigregister(ShowColorMapAlg)

get_show_colormap_alg = _sr_py.get_show_colormap_alg
class ShowFieldGlyphsAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShowFieldGlyphsAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShowFieldGlyphsAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ShowFieldGlyphsAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ShowFieldGlyphsAlg
    __del__ = lambda self : None;
    def get_p_active_tab(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_active_tab(*args)
    def get_p_approx_div(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_approx_div(*args)
    def get_p_def_color_a(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_def_color_a(*args)
    def get_p_def_color_b(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_def_color_b(*args)
    def get_p_def_color_g(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_def_color_g(*args)
    def get_p_def_color_r(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_def_color_r(*args)
    def get_p_field_name(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_field_name(*args)
    def get_p_field_name_override(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_field_name_override(*args)
    def get_p_interactive_mode(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_interactive_mode(*args)
    def get_p_scalars_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_scalars_color_type(*args)
    def get_p_scalars_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_scalars_display_type(*args)
    def get_p_scalars_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_scalars_has_data(*args)
    def get_p_scalars_normalize(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_scalars_normalize(*args)
    def get_p_scalars_on(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_scalars_on(*args)
    def get_p_scalars_resolution(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_scalars_resolution(*args)
    def get_p_scalars_transparency(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_scalars_transparency(*args)
    def get_p_secondary_alpha(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_secondary_alpha(*args)
    def get_p_secondary_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_secondary_color_type(*args)
    def get_p_secondary_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_secondary_display_type(*args)
    def get_p_secondary_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_secondary_has_data(*args)
    def get_p_secondary_on(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_secondary_on(*args)
    def get_p_secondary_value(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_secondary_value(*args)
    def get_p_show_progress(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_show_progress(*args)
    def get_p_tensors_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tensors_color_type(*args)
    def get_p_tensors_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tensors_display_type(*args)
    def get_p_tensors_emphasis(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tensors_emphasis(*args)
    def get_p_tensors_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tensors_has_data(*args)
    def get_p_tensors_normalize(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tensors_normalize(*args)
    def get_p_tensors_on(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tensors_on(*args)
    def get_p_tensors_resolution(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tensors_resolution(*args)
    def get_p_tensors_transparency(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tensors_transparency(*args)
    def get_p_tertiary_alpha(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tertiary_alpha(*args)
    def get_p_tertiary_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tertiary_color_type(*args)
    def get_p_tertiary_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tertiary_display_type(*args)
    def get_p_tertiary_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tertiary_has_data(*args)
    def get_p_tertiary_on(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tertiary_on(*args)
    def get_p_tertiary_value(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_tertiary_value(*args)
    def get_p_text_always_visible(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_always_visible(*args)
    def get_p_text_backface_cull(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_backface_cull(*args)
    def get_p_text_color_b(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_color_b(*args)
    def get_p_text_color_g(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_color_g(*args)
    def get_p_text_color_r(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_color_r(*args)
    def get_p_text_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_color_type(*args)
    def get_p_text_fontsize(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_fontsize(*args)
    def get_p_text_on(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_on(*args)
    def get_p_text_precision(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_precision(*args)
    def get_p_text_render_locations(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_render_locations(*args)
    def get_p_text_show_cells(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_show_cells(*args)
    def get_p_text_show_data(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_show_data(*args)
    def get_p_text_show_edges(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_show_edges(*args)
    def get_p_text_show_faces(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_show_faces(*args)
    def get_p_text_show_nodes(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_text_show_nodes(*args)
    def get_p_use_default_size(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_use_default_size(*args)
    def get_p_vectors_bidirectional(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_vectors_bidirectional(*args)
    def get_p_vectors_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_vectors_color_type(*args)
    def get_p_vectors_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_vectors_display_type(*args)
    def get_p_vectors_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_vectors_has_data(*args)
    def get_p_vectors_normalize(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_vectors_normalize(*args)
    def get_p_vectors_on(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_vectors_on(*args)
    def get_p_vectors_resolution(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_vectors_resolution(*args)
    def get_p_vectors_transparency(*args): return _sr_py.ShowFieldGlyphsAlg_get_p_vectors_transparency(*args)
    def get_progress_reporter(*args): return _sr_py.ShowFieldGlyphsAlg_get_progress_reporter(*args)
    def set_p_active_tab(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_active_tab(*args)
    def set_p_approx_div(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_approx_div(*args)
    def set_p_def_color_a(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_def_color_a(*args)
    def set_p_def_color_b(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_def_color_b(*args)
    def set_p_def_color_g(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_def_color_g(*args)
    def set_p_def_color_r(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_def_color_r(*args)
    def set_p_field_name(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_field_name(*args)
    def set_p_field_name_override(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_field_name_override(*args)
    def set_p_interactive_mode(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_interactive_mode(*args)
    def set_p_scalars_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_scalars_color_type(*args)
    def set_p_scalars_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_scalars_display_type(*args)
    def set_p_scalars_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_scalars_has_data(*args)
    def set_p_scalars_normalize(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_scalars_normalize(*args)
    def set_p_scalars_on(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_scalars_on(*args)
    def set_p_scalars_resolution(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_scalars_resolution(*args)
    def set_p_scalars_transparency(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_scalars_transparency(*args)
    def set_p_secondary_alpha(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_secondary_alpha(*args)
    def set_p_secondary_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_secondary_color_type(*args)
    def set_p_secondary_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_secondary_display_type(*args)
    def set_p_secondary_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_secondary_has_data(*args)
    def set_p_secondary_on(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_secondary_on(*args)
    def set_p_secondary_value(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_secondary_value(*args)
    def set_p_show_progress(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_show_progress(*args)
    def set_p_tensors_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tensors_color_type(*args)
    def set_p_tensors_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tensors_display_type(*args)
    def set_p_tensors_emphasis(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tensors_emphasis(*args)
    def set_p_tensors_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tensors_has_data(*args)
    def set_p_tensors_normalize(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tensors_normalize(*args)
    def set_p_tensors_on(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tensors_on(*args)
    def set_p_tensors_resolution(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tensors_resolution(*args)
    def set_p_tensors_transparency(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tensors_transparency(*args)
    def set_p_tertiary_alpha(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tertiary_alpha(*args)
    def set_p_tertiary_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tertiary_color_type(*args)
    def set_p_tertiary_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tertiary_display_type(*args)
    def set_p_tertiary_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tertiary_has_data(*args)
    def set_p_tertiary_on(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tertiary_on(*args)
    def set_p_tertiary_value(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_tertiary_value(*args)
    def set_p_text_always_visible(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_always_visible(*args)
    def set_p_text_backface_cull(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_backface_cull(*args)
    def set_p_text_color_b(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_color_b(*args)
    def set_p_text_color_g(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_color_g(*args)
    def set_p_text_color_r(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_color_r(*args)
    def set_p_text_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_color_type(*args)
    def set_p_text_fontsize(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_fontsize(*args)
    def set_p_text_on(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_on(*args)
    def set_p_text_precision(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_precision(*args)
    def set_p_text_render_locations(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_render_locations(*args)
    def set_p_text_show_cells(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_show_cells(*args)
    def set_p_text_show_data(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_show_data(*args)
    def set_p_text_show_edges(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_show_edges(*args)
    def set_p_text_show_faces(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_show_faces(*args)
    def set_p_text_show_nodes(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_text_show_nodes(*args)
    def set_p_use_default_size(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_use_default_size(*args)
    def set_p_vectors_bidirectional(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_vectors_bidirectional(*args)
    def set_p_vectors_color_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_vectors_color_type(*args)
    def set_p_vectors_display_type(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_vectors_display_type(*args)
    def set_p_vectors_has_data(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_vectors_has_data(*args)
    def set_p_vectors_normalize(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_vectors_normalize(*args)
    def set_p_vectors_on(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_vectors_on(*args)
    def set_p_vectors_resolution(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_vectors_resolution(*args)
    def set_p_vectors_transparency(*args): return _sr_py.ShowFieldGlyphsAlg_set_p_vectors_transparency(*args)
    def set_progress_reporter(*args): return _sr_py.ShowFieldGlyphsAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ShowFieldGlyphsAlg_execute(*args)
ShowFieldGlyphsAlg_swigregister = _sr_py.ShowFieldGlyphsAlg_swigregister
ShowFieldGlyphsAlg_swigregister(ShowFieldGlyphsAlg)

get_show_field_glyphs_alg = _sr_py.get_show_field_glyphs_alg
class ShowFieldAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShowFieldAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShowFieldAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ShowFieldAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ShowFieldAlg
    __del__ = lambda self : None;
    def get_p_active_tab(*args): return _sr_py.ShowFieldAlg_get_p_active_tab(*args)
    def get_p_approx_div(*args): return _sr_py.ShowFieldAlg_get_p_approx_div(*args)
    def get_p_def_color_a(*args): return _sr_py.ShowFieldAlg_get_p_def_color_a(*args)
    def get_p_def_color_b(*args): return _sr_py.ShowFieldAlg_get_p_def_color_b(*args)
    def get_p_def_color_g(*args): return _sr_py.ShowFieldAlg_get_p_def_color_g(*args)
    def get_p_def_color_r(*args): return _sr_py.ShowFieldAlg_get_p_def_color_r(*args)
    def get_p_edges_color_type(*args): return _sr_py.ShowFieldAlg_get_p_edges_color_type(*args)
    def get_p_edges_display_type(*args): return _sr_py.ShowFieldAlg_get_p_edges_display_type(*args)
    def get_p_edges_on(*args): return _sr_py.ShowFieldAlg_get_p_edges_on(*args)
    def get_p_edges_resolution(*args): return _sr_py.ShowFieldAlg_get_p_edges_resolution(*args)
    def get_p_edges_scale(*args): return _sr_py.ShowFieldAlg_get_p_edges_scale(*args)
    def get_p_edges_scaleNV(*args): return _sr_py.ShowFieldAlg_get_p_edges_scaleNV(*args)
    def get_p_edges_transparency(*args): return _sr_py.ShowFieldAlg_get_p_edges_transparency(*args)
    def get_p_faces_color_type(*args): return _sr_py.ShowFieldAlg_get_p_faces_color_type(*args)
    def get_p_faces_normals(*args): return _sr_py.ShowFieldAlg_get_p_faces_normals(*args)
    def get_p_faces_on(*args): return _sr_py.ShowFieldAlg_get_p_faces_on(*args)
    def get_p_faces_transparency(*args): return _sr_py.ShowFieldAlg_get_p_faces_transparency(*args)
    def get_p_faces_usetexture(*args): return _sr_py.ShowFieldAlg_get_p_faces_usetexture(*args)
    def get_p_field_name(*args): return _sr_py.ShowFieldAlg_get_p_field_name(*args)
    def get_p_field_name_override(*args): return _sr_py.ShowFieldAlg_get_p_field_name_override(*args)
    def get_p_interactive_mode(*args): return _sr_py.ShowFieldAlg_get_p_interactive_mode(*args)
    def get_p_nodes_color_type(*args): return _sr_py.ShowFieldAlg_get_p_nodes_color_type(*args)
    def get_p_nodes_display_type(*args): return _sr_py.ShowFieldAlg_get_p_nodes_display_type(*args)
    def get_p_nodes_on(*args): return _sr_py.ShowFieldAlg_get_p_nodes_on(*args)
    def get_p_nodes_resolution(*args): return _sr_py.ShowFieldAlg_get_p_nodes_resolution(*args)
    def get_p_nodes_scale(*args): return _sr_py.ShowFieldAlg_get_p_nodes_scale(*args)
    def get_p_nodes_scaleNV(*args): return _sr_py.ShowFieldAlg_get_p_nodes_scaleNV(*args)
    def get_p_nodes_transparency(*args): return _sr_py.ShowFieldAlg_get_p_nodes_transparency(*args)
    def get_p_show_progress(*args): return _sr_py.ShowFieldAlg_get_p_show_progress(*args)
    def get_p_text_always_visible(*args): return _sr_py.ShowFieldAlg_get_p_text_always_visible(*args)
    def get_p_text_backface_cull(*args): return _sr_py.ShowFieldAlg_get_p_text_backface_cull(*args)
    def get_p_text_color_b(*args): return _sr_py.ShowFieldAlg_get_p_text_color_b(*args)
    def get_p_text_color_g(*args): return _sr_py.ShowFieldAlg_get_p_text_color_g(*args)
    def get_p_text_color_r(*args): return _sr_py.ShowFieldAlg_get_p_text_color_r(*args)
    def get_p_text_color_type(*args): return _sr_py.ShowFieldAlg_get_p_text_color_type(*args)
    def get_p_text_fontsize(*args): return _sr_py.ShowFieldAlg_get_p_text_fontsize(*args)
    def get_p_text_on(*args): return _sr_py.ShowFieldAlg_get_p_text_on(*args)
    def get_p_text_precision(*args): return _sr_py.ShowFieldAlg_get_p_text_precision(*args)
    def get_p_text_render_locations(*args): return _sr_py.ShowFieldAlg_get_p_text_render_locations(*args)
    def get_p_text_show_cells(*args): return _sr_py.ShowFieldAlg_get_p_text_show_cells(*args)
    def get_p_text_show_data(*args): return _sr_py.ShowFieldAlg_get_p_text_show_data(*args)
    def get_p_text_show_edges(*args): return _sr_py.ShowFieldAlg_get_p_text_show_edges(*args)
    def get_p_text_show_faces(*args): return _sr_py.ShowFieldAlg_get_p_text_show_faces(*args)
    def get_p_text_show_nodes(*args): return _sr_py.ShowFieldAlg_get_p_text_show_nodes(*args)
    def get_p_use_default_size(*args): return _sr_py.ShowFieldAlg_get_p_use_default_size(*args)
    def get_progress_reporter(*args): return _sr_py.ShowFieldAlg_get_progress_reporter(*args)
    def set_p_active_tab(*args): return _sr_py.ShowFieldAlg_set_p_active_tab(*args)
    def set_p_approx_div(*args): return _sr_py.ShowFieldAlg_set_p_approx_div(*args)
    def set_p_def_color_a(*args): return _sr_py.ShowFieldAlg_set_p_def_color_a(*args)
    def set_p_def_color_b(*args): return _sr_py.ShowFieldAlg_set_p_def_color_b(*args)
    def set_p_def_color_g(*args): return _sr_py.ShowFieldAlg_set_p_def_color_g(*args)
    def set_p_def_color_r(*args): return _sr_py.ShowFieldAlg_set_p_def_color_r(*args)
    def set_p_edges_color_type(*args): return _sr_py.ShowFieldAlg_set_p_edges_color_type(*args)
    def set_p_edges_display_type(*args): return _sr_py.ShowFieldAlg_set_p_edges_display_type(*args)
    def set_p_edges_on(*args): return _sr_py.ShowFieldAlg_set_p_edges_on(*args)
    def set_p_edges_resolution(*args): return _sr_py.ShowFieldAlg_set_p_edges_resolution(*args)
    def set_p_edges_scale(*args): return _sr_py.ShowFieldAlg_set_p_edges_scale(*args)
    def set_p_edges_scaleNV(*args): return _sr_py.ShowFieldAlg_set_p_edges_scaleNV(*args)
    def set_p_edges_transparency(*args): return _sr_py.ShowFieldAlg_set_p_edges_transparency(*args)
    def set_p_faces_color_type(*args): return _sr_py.ShowFieldAlg_set_p_faces_color_type(*args)
    def set_p_faces_normals(*args): return _sr_py.ShowFieldAlg_set_p_faces_normals(*args)
    def set_p_faces_on(*args): return _sr_py.ShowFieldAlg_set_p_faces_on(*args)
    def set_p_faces_transparency(*args): return _sr_py.ShowFieldAlg_set_p_faces_transparency(*args)
    def set_p_faces_usetexture(*args): return _sr_py.ShowFieldAlg_set_p_faces_usetexture(*args)
    def set_p_field_name(*args): return _sr_py.ShowFieldAlg_set_p_field_name(*args)
    def set_p_field_name_override(*args): return _sr_py.ShowFieldAlg_set_p_field_name_override(*args)
    def set_p_interactive_mode(*args): return _sr_py.ShowFieldAlg_set_p_interactive_mode(*args)
    def set_p_nodes_color_type(*args): return _sr_py.ShowFieldAlg_set_p_nodes_color_type(*args)
    def set_p_nodes_display_type(*args): return _sr_py.ShowFieldAlg_set_p_nodes_display_type(*args)
    def set_p_nodes_on(*args): return _sr_py.ShowFieldAlg_set_p_nodes_on(*args)
    def set_p_nodes_resolution(*args): return _sr_py.ShowFieldAlg_set_p_nodes_resolution(*args)
    def set_p_nodes_scale(*args): return _sr_py.ShowFieldAlg_set_p_nodes_scale(*args)
    def set_p_nodes_scaleNV(*args): return _sr_py.ShowFieldAlg_set_p_nodes_scaleNV(*args)
    def set_p_nodes_transparency(*args): return _sr_py.ShowFieldAlg_set_p_nodes_transparency(*args)
    def set_p_show_progress(*args): return _sr_py.ShowFieldAlg_set_p_show_progress(*args)
    def set_p_text_always_visible(*args): return _sr_py.ShowFieldAlg_set_p_text_always_visible(*args)
    def set_p_text_backface_cull(*args): return _sr_py.ShowFieldAlg_set_p_text_backface_cull(*args)
    def set_p_text_color_b(*args): return _sr_py.ShowFieldAlg_set_p_text_color_b(*args)
    def set_p_text_color_g(*args): return _sr_py.ShowFieldAlg_set_p_text_color_g(*args)
    def set_p_text_color_r(*args): return _sr_py.ShowFieldAlg_set_p_text_color_r(*args)
    def set_p_text_color_type(*args): return _sr_py.ShowFieldAlg_set_p_text_color_type(*args)
    def set_p_text_fontsize(*args): return _sr_py.ShowFieldAlg_set_p_text_fontsize(*args)
    def set_p_text_on(*args): return _sr_py.ShowFieldAlg_set_p_text_on(*args)
    def set_p_text_precision(*args): return _sr_py.ShowFieldAlg_set_p_text_precision(*args)
    def set_p_text_render_locations(*args): return _sr_py.ShowFieldAlg_set_p_text_render_locations(*args)
    def set_p_text_show_cells(*args): return _sr_py.ShowFieldAlg_set_p_text_show_cells(*args)
    def set_p_text_show_data(*args): return _sr_py.ShowFieldAlg_set_p_text_show_data(*args)
    def set_p_text_show_edges(*args): return _sr_py.ShowFieldAlg_set_p_text_show_edges(*args)
    def set_p_text_show_faces(*args): return _sr_py.ShowFieldAlg_set_p_text_show_faces(*args)
    def set_p_text_show_nodes(*args): return _sr_py.ShowFieldAlg_set_p_text_show_nodes(*args)
    def set_p_use_default_size(*args): return _sr_py.ShowFieldAlg_set_p_use_default_size(*args)
    def set_progress_reporter(*args): return _sr_py.ShowFieldAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ShowFieldAlg_execute(*args)
ShowFieldAlg_swigregister = _sr_py.ShowFieldAlg_swigregister
ShowFieldAlg_swigregister(ShowFieldAlg)

get_show_field_alg = _sr_py.get_show_field_alg
class ShowMatrixAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShowMatrixAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShowMatrixAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ShowMatrixAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ShowMatrixAlg
    __del__ = lambda self : None;
    def get_p_3d_mode(*args): return _sr_py.ShowMatrixAlg_get_p_3d_mode(*args)
    def get_p_col_begin(*args): return _sr_py.ShowMatrixAlg_get_p_col_begin(*args)
    def get_p_colormapmode(*args): return _sr_py.ShowMatrixAlg_get_p_colormapmode(*args)
    def get_p_cols(*args): return _sr_py.ShowMatrixAlg_get_p_cols(*args)
    def get_p_gmode(*args): return _sr_py.ShowMatrixAlg_get_p_gmode(*args)
    def get_p_row_begin(*args): return _sr_py.ShowMatrixAlg_get_p_row_begin(*args)
    def get_p_rows(*args): return _sr_py.ShowMatrixAlg_get_p_rows(*args)
    def get_p_showtext(*args): return _sr_py.ShowMatrixAlg_get_p_showtext(*args)
    def get_p_xpos(*args): return _sr_py.ShowMatrixAlg_get_p_xpos(*args)
    def get_p_xscale(*args): return _sr_py.ShowMatrixAlg_get_p_xscale(*args)
    def get_p_ypos(*args): return _sr_py.ShowMatrixAlg_get_p_ypos(*args)
    def get_p_yscale(*args): return _sr_py.ShowMatrixAlg_get_p_yscale(*args)
    def get_progress_reporter(*args): return _sr_py.ShowMatrixAlg_get_progress_reporter(*args)
    def set_p_3d_mode(*args): return _sr_py.ShowMatrixAlg_set_p_3d_mode(*args)
    def set_p_col_begin(*args): return _sr_py.ShowMatrixAlg_set_p_col_begin(*args)
    def set_p_colormapmode(*args): return _sr_py.ShowMatrixAlg_set_p_colormapmode(*args)
    def set_p_cols(*args): return _sr_py.ShowMatrixAlg_set_p_cols(*args)
    def set_p_gmode(*args): return _sr_py.ShowMatrixAlg_set_p_gmode(*args)
    def set_p_row_begin(*args): return _sr_py.ShowMatrixAlg_set_p_row_begin(*args)
    def set_p_rows(*args): return _sr_py.ShowMatrixAlg_set_p_rows(*args)
    def set_p_showtext(*args): return _sr_py.ShowMatrixAlg_set_p_showtext(*args)
    def set_p_xpos(*args): return _sr_py.ShowMatrixAlg_set_p_xpos(*args)
    def set_p_xscale(*args): return _sr_py.ShowMatrixAlg_set_p_xscale(*args)
    def set_p_ypos(*args): return _sr_py.ShowMatrixAlg_set_p_ypos(*args)
    def set_p_yscale(*args): return _sr_py.ShowMatrixAlg_set_p_yscale(*args)
    def set_progress_reporter(*args): return _sr_py.ShowMatrixAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ShowMatrixAlg_execute(*args)
ShowMatrixAlg_swigregister = _sr_py.ShowMatrixAlg_swigregister
ShowMatrixAlg_swigregister(ShowMatrixAlg)

get_show_matrix_alg = _sr_py.get_show_matrix_alg
class ShowMeshBoundingBoxAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShowMeshBoundingBoxAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShowMeshBoundingBoxAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ShowMeshBoundingBoxAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ShowMeshBoundingBoxAlg
    __del__ = lambda self : None;
    def get_p_sizex(*args): return _sr_py.ShowMeshBoundingBoxAlg_get_p_sizex(*args)
    def get_p_sizey(*args): return _sr_py.ShowMeshBoundingBoxAlg_get_p_sizey(*args)
    def get_p_sizez(*args): return _sr_py.ShowMeshBoundingBoxAlg_get_p_sizez(*args)
    def get_progress_reporter(*args): return _sr_py.ShowMeshBoundingBoxAlg_get_progress_reporter(*args)
    def set_p_sizex(*args): return _sr_py.ShowMeshBoundingBoxAlg_set_p_sizex(*args)
    def set_p_sizey(*args): return _sr_py.ShowMeshBoundingBoxAlg_set_p_sizey(*args)
    def set_p_sizez(*args): return _sr_py.ShowMeshBoundingBoxAlg_set_p_sizez(*args)
    def set_progress_reporter(*args): return _sr_py.ShowMeshBoundingBoxAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ShowMeshBoundingBoxAlg_execute(*args)
ShowMeshBoundingBoxAlg_swigregister = _sr_py.ShowMeshBoundingBoxAlg_swigregister
ShowMeshBoundingBoxAlg_swigregister(ShowMeshBoundingBoxAlg)

get_show_mesh_bounding_box_alg = _sr_py.get_show_mesh_bounding_box_alg
class ShowStringAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShowStringAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShowStringAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ShowStringAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ShowStringAlg
    __del__ = lambda self : None;
    def get_p_bbox(*args): return _sr_py.ShowStringAlg_get_p_bbox(*args)
    def get_p_color_b(*args): return _sr_py.ShowStringAlg_get_p_color_b(*args)
    def get_p_color_g(*args): return _sr_py.ShowStringAlg_get_p_color_g(*args)
    def get_p_color_r(*args): return _sr_py.ShowStringAlg_get_p_color_r(*args)
    def get_p_location_x(*args): return _sr_py.ShowStringAlg_get_p_location_x(*args)
    def get_p_location_y(*args): return _sr_py.ShowStringAlg_get_p_location_y(*args)
    def get_p_size(*args): return _sr_py.ShowStringAlg_get_p_size(*args)
    def get_progress_reporter(*args): return _sr_py.ShowStringAlg_get_progress_reporter(*args)
    def set_p_bbox(*args): return _sr_py.ShowStringAlg_set_p_bbox(*args)
    def set_p_color_b(*args): return _sr_py.ShowStringAlg_set_p_color_b(*args)
    def set_p_color_g(*args): return _sr_py.ShowStringAlg_set_p_color_g(*args)
    def set_p_color_r(*args): return _sr_py.ShowStringAlg_set_p_color_r(*args)
    def set_p_location_x(*args): return _sr_py.ShowStringAlg_set_p_location_x(*args)
    def set_p_location_y(*args): return _sr_py.ShowStringAlg_set_p_location_y(*args)
    def set_p_size(*args): return _sr_py.ShowStringAlg_set_p_size(*args)
    def set_progress_reporter(*args): return _sr_py.ShowStringAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ShowStringAlg_execute(*args)
ShowStringAlg_swigregister = _sr_py.ShowStringAlg_swigregister
ShowStringAlg_swigregister(ShowStringAlg)

get_show_string_alg = _sr_py.get_show_string_alg
class ShowTextureSlicesAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShowTextureSlicesAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShowTextureSlicesAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ShowTextureSlicesAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ShowTextureSlicesAlg
    __del__ = lambda self : None;
    def get_p_color_changed(*args): return _sr_py.ShowTextureSlicesAlg_get_p_color_changed(*args)
    def get_p_colors(*args): return _sr_py.ShowTextureSlicesAlg_get_p_colors(*args)
    def get_p_control_pos_saved(*args): return _sr_py.ShowTextureSlicesAlg_get_p_control_pos_saved(*args)
    def get_p_drawView(*args): return _sr_py.ShowTextureSlicesAlg_get_p_drawView(*args)
    def get_p_drawX(*args): return _sr_py.ShowTextureSlicesAlg_get_p_drawX(*args)
    def get_p_drawY(*args): return _sr_py.ShowTextureSlicesAlg_get_p_drawY(*args)
    def get_p_drawZ(*args): return _sr_py.ShowTextureSlicesAlg_get_p_drawZ(*args)
    def get_p_draw_phi_0(*args): return _sr_py.ShowTextureSlicesAlg_get_p_draw_phi_0(*args)
    def get_p_draw_phi_1(*args): return _sr_py.ShowTextureSlicesAlg_get_p_draw_phi_1(*args)
    def get_p_interp_mode(*args): return _sr_py.ShowTextureSlicesAlg_get_p_interp_mode(*args)
    def get_p_level_on(*args): return _sr_py.ShowTextureSlicesAlg_get_p_level_on(*args)
    def get_p_multi_level(*args): return _sr_py.ShowTextureSlicesAlg_get_p_multi_level(*args)
    def get_p_outline_levels(*args): return _sr_py.ShowTextureSlicesAlg_get_p_outline_levels(*args)
    def get_p_phi_0(*args): return _sr_py.ShowTextureSlicesAlg_get_p_phi_0(*args)
    def get_p_phi_1(*args): return _sr_py.ShowTextureSlicesAlg_get_p_phi_1(*args)
    def get_p_use_stencil(*args): return _sr_py.ShowTextureSlicesAlg_get_p_use_stencil(*args)
    def get_progress_reporter(*args): return _sr_py.ShowTextureSlicesAlg_get_progress_reporter(*args)
    def set_p_color_changed(*args): return _sr_py.ShowTextureSlicesAlg_set_p_color_changed(*args)
    def set_p_colors(*args): return _sr_py.ShowTextureSlicesAlg_set_p_colors(*args)
    def set_p_control_pos_saved(*args): return _sr_py.ShowTextureSlicesAlg_set_p_control_pos_saved(*args)
    def set_p_drawView(*args): return _sr_py.ShowTextureSlicesAlg_set_p_drawView(*args)
    def set_p_drawX(*args): return _sr_py.ShowTextureSlicesAlg_set_p_drawX(*args)
    def set_p_drawY(*args): return _sr_py.ShowTextureSlicesAlg_set_p_drawY(*args)
    def set_p_drawZ(*args): return _sr_py.ShowTextureSlicesAlg_set_p_drawZ(*args)
    def set_p_draw_phi_0(*args): return _sr_py.ShowTextureSlicesAlg_set_p_draw_phi_0(*args)
    def set_p_draw_phi_1(*args): return _sr_py.ShowTextureSlicesAlg_set_p_draw_phi_1(*args)
    def set_p_interp_mode(*args): return _sr_py.ShowTextureSlicesAlg_set_p_interp_mode(*args)
    def set_p_level_on(*args): return _sr_py.ShowTextureSlicesAlg_set_p_level_on(*args)
    def set_p_multi_level(*args): return _sr_py.ShowTextureSlicesAlg_set_p_multi_level(*args)
    def set_p_outline_levels(*args): return _sr_py.ShowTextureSlicesAlg_set_p_outline_levels(*args)
    def set_p_phi_0(*args): return _sr_py.ShowTextureSlicesAlg_set_p_phi_0(*args)
    def set_p_phi_1(*args): return _sr_py.ShowTextureSlicesAlg_set_p_phi_1(*args)
    def set_p_use_stencil(*args): return _sr_py.ShowTextureSlicesAlg_set_p_use_stencil(*args)
    def set_progress_reporter(*args): return _sr_py.ShowTextureSlicesAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ShowTextureSlicesAlg_execute(*args)
ShowTextureSlicesAlg_swigregister = _sr_py.ShowTextureSlicesAlg_swigregister
ShowTextureSlicesAlg_swigregister(ShowTextureSlicesAlg)

get_show_texture_slices_alg = _sr_py.get_show_texture_slices_alg
class ShowTextureVolumeAlg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShowTextureVolumeAlg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShowTextureVolumeAlg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _sr_py.new_ShowTextureVolumeAlg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sr_py.delete_ShowTextureVolumeAlg
    __del__ = lambda self : None;
    def get_p_adaptive(*args): return _sr_py.ShowTextureVolumeAlg_get_p_adaptive(*args)
    def get_p_alpha_scale(*args): return _sr_py.ShowTextureVolumeAlg_get_p_alpha_scale(*args)
    def get_p_ambient(*args): return _sr_py.ShowTextureVolumeAlg_get_p_ambient(*args)
    def get_p_blend_res(*args): return _sr_py.ShowTextureVolumeAlg_get_p_blend_res(*args)
    def get_p_cmap2_width(*args): return _sr_py.ShowTextureVolumeAlg_get_p_cmap2_width(*args)
    def get_p_diffuse(*args): return _sr_py.ShowTextureVolumeAlg_get_p_diffuse(*args)
    def get_p_gradient_max(*args): return _sr_py.ShowTextureVolumeAlg_get_p_gradient_max(*args)
    def get_p_gradient_min(*args): return _sr_py.ShowTextureVolumeAlg_get_p_gradient_min(*args)
    def get_p_id(*args): return _sr_py.ShowTextureVolumeAlg_get_p_id(*args)
    def get_p_interp_mode(*args): return _sr_py.ShowTextureVolumeAlg_get_p_interp_mode(*args)
    def get_p_invert_opacity(*args): return _sr_py.ShowTextureVolumeAlg_get_p_invert_opacity(*args)
    def get_p_level_on(*args): return _sr_py.ShowTextureVolumeAlg_get_p_level_on(*args)
    def get_p_level_vals(*args): return _sr_py.ShowTextureVolumeAlg_get_p_level_vals(*args)
    def get_p_light(*args): return _sr_py.ShowTextureVolumeAlg_get_p_light(*args)
    def get_p_multi_level(*args): return _sr_py.ShowTextureVolumeAlg_get_p_multi_level(*args)
    def get_p_num_clipping_planes(*args): return _sr_py.ShowTextureVolumeAlg_get_p_num_clipping_planes(*args)
    def get_p_render_style(*args): return _sr_py.ShowTextureVolumeAlg_get_p_render_style(*args)
    def get_p_sampling_rate_hi(*args): return _sr_py.ShowTextureVolumeAlg_get_p_sampling_rate_hi(*args)
    def get_p_sampling_rate_lo(*args): return _sr_py.ShowTextureVolumeAlg_get_p_sampling_rate_lo(*args)
    def get_p_shading(*args): return _sr_py.ShowTextureVolumeAlg_get_p_shading(*args)
    def get_p_shine(*args): return _sr_py.ShowTextureVolumeAlg_get_p_shine(*args)
    def get_p_show_clipping_widgets(*args): return _sr_py.ShowTextureVolumeAlg_get_p_show_clipping_widgets(*args)
    def get_p_specular(*args): return _sr_py.ShowTextureVolumeAlg_get_p_specular(*args)
    def get_p_sw_raster(*args): return _sr_py.ShowTextureVolumeAlg_get_p_sw_raster(*args)
    def get_p_use_stencil(*args): return _sr_py.ShowTextureVolumeAlg_get_p_use_stencil(*args)
    def get_progress_reporter(*args): return _sr_py.ShowTextureVolumeAlg_get_progress_reporter(*args)
    def set_p_adaptive(*args): return _sr_py.ShowTextureVolumeAlg_set_p_adaptive(*args)
    def set_p_alpha_scale(*args): return _sr_py.ShowTextureVolumeAlg_set_p_alpha_scale(*args)
    def set_p_ambient(*args): return _sr_py.ShowTextureVolumeAlg_set_p_ambient(*args)
    def set_p_blend_res(*args): return _sr_py.ShowTextureVolumeAlg_set_p_blend_res(*args)
    def set_p_cmap2_width(*args): return _sr_py.ShowTextureVolumeAlg_set_p_cmap2_width(*args)
    def set_p_diffuse(*args): return _sr_py.ShowTextureVolumeAlg_set_p_diffuse(*args)
    def set_p_gradient_max(*args): return _sr_py.ShowTextureVolumeAlg_set_p_gradient_max(*args)
    def set_p_gradient_min(*args): return _sr_py.ShowTextureVolumeAlg_set_p_gradient_min(*args)
    def set_p_id(*args): return _sr_py.ShowTextureVolumeAlg_set_p_id(*args)
    def set_p_interp_mode(*args): return _sr_py.ShowTextureVolumeAlg_set_p_interp_mode(*args)
    def set_p_invert_opacity(*args): return _sr_py.ShowTextureVolumeAlg_set_p_invert_opacity(*args)
    def set_p_level_on(*args): return _sr_py.ShowTextureVolumeAlg_set_p_level_on(*args)
    def set_p_level_vals(*args): return _sr_py.ShowTextureVolumeAlg_set_p_level_vals(*args)
    def set_p_light(*args): return _sr_py.ShowTextureVolumeAlg_set_p_light(*args)
    def set_p_multi_level(*args): return _sr_py.ShowTextureVolumeAlg_set_p_multi_level(*args)
    def set_p_num_clipping_planes(*args): return _sr_py.ShowTextureVolumeAlg_set_p_num_clipping_planes(*args)
    def set_p_render_style(*args): return _sr_py.ShowTextureVolumeAlg_set_p_render_style(*args)
    def set_p_sampling_rate_hi(*args): return _sr_py.ShowTextureVolumeAlg_set_p_sampling_rate_hi(*args)
    def set_p_sampling_rate_lo(*args): return _sr_py.ShowTextureVolumeAlg_set_p_sampling_rate_lo(*args)
    def set_p_shading(*args): return _sr_py.ShowTextureVolumeAlg_set_p_shading(*args)
    def set_p_shine(*args): return _sr_py.ShowTextureVolumeAlg_set_p_shine(*args)
    def set_p_show_clipping_widgets(*args): return _sr_py.ShowTextureVolumeAlg_set_p_show_clipping_widgets(*args)
    def set_p_specular(*args): return _sr_py.ShowTextureVolumeAlg_set_p_specular(*args)
    def set_p_sw_raster(*args): return _sr_py.ShowTextureVolumeAlg_set_p_sw_raster(*args)
    def set_p_use_stencil(*args): return _sr_py.ShowTextureVolumeAlg_set_p_use_stencil(*args)
    def set_progress_reporter(*args): return _sr_py.ShowTextureVolumeAlg_set_progress_reporter(*args)
    def execute(*args): return _sr_py.ShowTextureVolumeAlg_execute(*args)
ShowTextureVolumeAlg_swigregister = _sr_py.ShowTextureVolumeAlg_swigregister
ShowTextureVolumeAlg_swigregister(ShowTextureVolumeAlg)

get_show_texture_volume_alg = _sr_py.get_show_texture_volume_alg


