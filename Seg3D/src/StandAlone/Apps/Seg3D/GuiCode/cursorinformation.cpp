/////////////////////////////////////////////////////////////////////////////
// Name:        cursorinformation.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     21/08/2007 15:01:49
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 21/08/2007 15:01:49

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"
#include <StandAlone/Apps/Seg3D/Painter.h>

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "cursorinformation.h"
#include "seg3devents.h"

////@begin XPM images
////@end XPM images


/*!
 * CursorInformation type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CursorInformation, wxPanel )


/*!
 * CursorInformation event table definition
 */

BEGIN_EVENT_TABLE( CursorInformation, wxPanel )
EVT_COMMAND (wxID_ANY, wxEVT_CURSOR_INFORMATION_CHANGE, CursorInformation::SetMousePositionAndValue)

////@begin CursorInformation event table entries
////@end CursorInformation event table entries

END_EVENT_TABLE()


/*!
 * CursorInformation constructors
 */

CursorInformation::CursorInformation()
{
    Init();
}

CursorInformation::CursorInformation( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, pos, size, style);
}


/*!
 * CursorInformation creator
 */

bool CursorInformation::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CursorInformation creation
    SetParent(parent);
    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CursorInformation creation
    return true;
}


/*!
 * CursorInformation destructor
 */

CursorInformation::~CursorInformation()
{
////@begin CursorInformation destruction
////@end CursorInformation destruction
}


/*!
 * Member initialisation
 */

void CursorInformation::Init()
{
////@begin CursorInformation member initialisation
    mSpace_ = NULL;
////@end CursorInformation member initialisation
	
    mValue_ = NULL;
    mPosX_ = NULL;
    mPosY_ = NULL;
    mPosZ_ = NULL;
}


void CursorInformation::SetMousePositionAndValue(wxCommandEvent &event)
{
  CursorInformationStruct *CI =
    (CursorInformationStruct *)event.GetClientData();
	
  mPosX_->Clear();
  mPosY_->Clear();
  mPosZ_->Clear();
  if (mSpace_->GetSelection() != 0)
  {
    if (CI->value_is_valid)
    {
      *mPosX_ << CI->xi;
      *mPosY_ << CI->yi;
      *mPosZ_ << CI->zi;
    }
    else
    {
      *mPosX_ << "none";
      *mPosY_ << "none";
      *mPosZ_ << "none";
    }      
  }
  else
  {
    *mPosX_ << CI->x;
    *mPosY_ << CI->y;
    *mPosZ_ << CI->z;
  }
  mValue_->Clear();
  if (CI->value_is_valid)
  {
    *mValue_ << CI->value;
  }
  else
  {
    *mValue_ << "none";
  }
	
  delete CI;
}

void CursorInformation::SetMousePosition(double x, double y, double z)
{
	mPosX_->Clear();
	mPosY_->Clear();
    mPosZ_->Clear();
	*mPosX_ << x;
    *mPosY_ << y;
    *mPosZ_ << z;
}

void CursorInformation::SetInfoValue(double value)
{	
	mValue_->Clear();
	*mValue_ << value;
}

/*!
 * Control creation for CursorInformation
 */
void CursorInformation::CreateControls()
{    
////@begin CursorInformation content construction
    if (!wxXmlResource::Get()->LoadPanel(this, GetParent(), _T("ID_CURSORINFORMATION")))
        wxLogError(wxT("Missing wxXmlResource::Get()->Load() in OnInit()?"));
    mSpace_ = XRCCTRL(*this, "ID_CHOICE3", wxChoice);
    // Set validators
    if (FindWindow(XRCID("ID_TEXTCTRL1")))
        FindWindow(XRCID("ID_TEXTCTRL1"))->SetValidator( wxTextValidator(wxFILTER_NUMERIC) );
    if (FindWindow(XRCID("ID_TEXTCTRL2")))
        FindWindow(XRCID("ID_TEXTCTRL2"))->SetValidator( wxTextValidator(wxFILTER_NUMERIC) );
    if (FindWindow(XRCID("ID_TEXTCTRL3")))
        FindWindow(XRCID("ID_TEXTCTRL3"))->SetValidator( wxTextValidator(wxFILTER_NUMERIC) );
    if (FindWindow(XRCID("ID_TEXTCTRL4")))
        FindWindow(XRCID("ID_TEXTCTRL4"))->SetValidator( wxTextValidator(wxFILTER_NUMERIC) );
////@end CursorInformation content construction
	
	mValue_ = XRCCTRL(*this, "ID_TEXTCTRL1", wxTextCtrl);
    mPosX_ = XRCCTRL(*this, "ID_TEXTCTRL2", wxTextCtrl);
    mPosY_ = XRCCTRL(*this, "ID_TEXTCTRL3", wxTextCtrl);
    mPosZ_ = XRCCTRL(*this, "ID_TEXTCTRL4", wxTextCtrl);

    // Create custom windows not generated automatically here.
////@begin CursorInformation content initialisation
////@end CursorInformation content initialisation
}


/*!
 * Should we show tooltips?
 */

bool CursorInformation::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CursorInformation::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CursorInformation bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CursorInformation bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CursorInformation::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CursorInformation icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CursorInformation icon retrieval
}
