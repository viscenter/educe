#include "FilterPlugin.h"
 
#include <sci_defs/insight_defs.h>

#include <string>
#include <Core/Events/BaseTool.h>
#include <Core/Datatypes/ITKDatatype.h>
#include <StandAlone/Apps/Seg3D/VolumeFilter.h>
#include <itkImageToImageFilter.h>
#include <itkCommand.h>
#include <itkOtsuThresholdImageFilter.h>

SET_PLUGIN_VERSION;

// g++ -I../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/include/InsightToolkit/Algorithms/ -I../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/include/InsightToolkit/Utilities/ -I../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/include/InsightToolkit/IO/ -I../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/include/InsightToolkit/BasicFilters/ -I../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/include/InsightToolkit/ -I../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/include/InsightToolkit/Utilities/vxl/core/ -I../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/include/InsightToolkit/Utilities/vxl/vcl/ -I../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/include/InsightToolkit/Common/ -I../../../../src/externals/glew/include/ -I../../../../src/externals/ `../../../../thirdparty.bin/3.1.0/Linux/gcc-4.1.3-64bit/bin/wx-config --cppflags` -I../../../ -I../../../../src/include/ -I../../../../bin/include/ -fPIC -shared -o ExampleFilterPlugin ExampleFilterPlugin.cc

namespace SCIRun {

class ScrollFilterPlugin : public FilterPlugin {
	public:
		virtual std::string get_menu_string() const {
			return "Scroll Segmentation";
		}
		virtual void menu_event() const {
			// printf("Hello from ExampleFilterPlugin\n");
		}
		BaseTool::propagation_state_e process_event(event_handle_t event) /*const*/ {
			// printf("Attempting to handle event inside plugin\n");
			// check for the FinishEvent signal generated by the start button
			if (dynamic_cast<FinishEvent *>(event.get_rep())) {
				if (!painter_->check_for_active_data_volume("Scroll Segmentation filter"))
				{
					return STOP_E;
				}
			
				run_filter();
			}

			return CONTINUE_E;
		}
	private:
		virtual void run_filter() const {	
			printf("Scroll Segmentation run\n");

			painter_->volume_lock_.lock();

			// Save the source
			NrrdVolumeHandle source_volume = painter_->current_volume_;

			// Make a new label volume.
			NrrdDataHandle nrrdh = VolumeOps::create_clear_nrrd(painter_->current_volume_->nrrd_handle_, LabelNrrdType);
			const string name = painter_->unique_layer_name(painter_->current_volume_->name_ + " Scroll Label");
			painter_->volumes_.push_back(new NrrdVolume(painter_, name, nrrdh, 1));
			painter_->current_volume_ = painter_->volumes_.back();
			painter_->rebuild_layer_buttons();
			painter_->volume_lock_.unlock();
			
			painter_->set_status("Running scroll segmentation filter.");

			painter_->update_progress(50);
	
 		  VolumeFilter<itk::OtsuThresholdImageFilter< ITKImageFloat3D, ITKImageLabel3D > > filter;
			filter.set_volume(painter_->current_volume_);
			filter->SetOutsideValue(1);
			filter->SetInsideValue(0);

			filter(source_volume->nrrd_handle_);

			painter_->update_progress(100);
			
			painter_->mask_volume_ = painter_->current_volume_;

			painter_->extract_all_window_slices();
			painter_->rebuild_layer_buttons();
			painter_->redraw_all();

			painter_->hide_tool_panel();
		}
};

EXPORT_CREATE_FUNCTION(FilterPlugin, ScrollFilterPlugin)
EXPORT_DELETE_FUNCTION(FilterPlugin, ScrollFilterPlugin)

}
