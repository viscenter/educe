#
#  For more information, please see: http://software.sci.utah.edu
# 
#  The MIT License
# 
#  Copyright (c) 2004 Scientific Computing and Imaging Institute,
#  University of Utah.
# 
#  
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#  DEALINGS IN THE SOFTWARE.
#

# Makefile for field manipulation code that is compiled and loaded on the fly

# Default target
default: all

# OBJTOP and OBJTOP_ABS are necessary for configVars.mk to load
# without complaining... even though what they enable (Creation of
# LIBDIR) is overridden later on in this file.
OBJTOP      := ..
OBJTOP_ABS  := $(shell cd $(OBJTOP) ; pwd)

SCIRUN_SRCTOP   := @scirun_src_dir@
SCIRUN_OBJTOP   := @scirun_obj_dir@
SCIRUN_OBJTOP_DATAFLOW	:= @scirun_obj_dataflow_dir@

#ifneq ($(SCIRUN_OBJDIR),)
#  SCIRUN_OBJTOP := $(SCIRUN_OBJDIR)
#endif

ifneq ($(SCIRUN_SRCDIR),)
  SCIRUN_SRCTOP := $(SCIRUN_SRCDIR)
endif

#include $(SCIRUN_OBJTOP)/configVars.mk

LIBDIR1		:= $(SCIRUN_OBJTOP)/lib
LIBRPATH1       := -Wl,-rpath -Wl,$(LIBDIR1) -L$(LIBDIR1)

# get libraries in ./lib
LIBS_FULLNAMES1 := $(wildcard $(LIBDIR1)/*.@SO_OR_A_FILE@)
# remove extension
LIBS_NAMES1     := $(patsubst %.@SO_OR_A_FILE@,%, $(LIBS_FULLNAMES1))

# remove libs that start with an underscore
LIBS_under        := $(patsubst $(SCIRUN_OBJTOP)/lib/_%,, $(LIBS_NAMES1))

# replace front section with -l
LIBS1         := $(patsubst $(SCIRUN_OBJTOP)/lib/lib%,-l%, $(LIBS_under))

EXT_LIBS := $(subst -framework ,FRAMEWORK,$(subst ;, ,@SCI_THIRDPARTY_LIBRARY@ @BABEL_LIBRARY@ @TAU_LIBRARY@ @MPI_LIBRARY@ @GL_LIBRARY@ @INSIGHT_LIBRARY@ @TEEM_LIBRARY@ @TETGEN_LIBRARY@ @VERDICT_LIBRARY@ @MESQUITE_LIBRARY@ @CBLAS_LIBRARY@ @CONDITIONAL_LIBS@))
EXT_LIBS1 := $(filter-out FRAMEWORK%,$(EXT_LIBS))
EXT_LIBS1_PARSED := $(foreach lib,$(EXT_LIBS1), -L$(dir $(lib)) -l$(patsubst lib%.a,%,$(patsubst lib%.@SO_OR_A_FILE@,%,$(notdir $(lib)))))
EXT_LIBS2_PARSED := $(subst FRAMEWORK,-framework ,$(filter FRAMEWORK%,$(EXT_LIBS)))


# babel libs necessary for bridge compilation
BABEL_LIBS    := $(filter -lCCA_Components_BabelTest%,$(LIBS))


# Sandia Meshing Library
ifeq ($(HAVE_CAMAL),yes)
   CONDITIONAL_LIBS := $(CAMAL_LIBRARY) $(F_LIBRARY)
endif

# VERDICT Mesh Quality Library
ifeq ($(HAVE_VERDICT),yes)
   CONDITIONAL_LIBS := $(CONDITIONAL_LIBS) $(VERDICT_LIBRARY)
endif

# MESQUITE Mesh Optimization Library
ifeq ($(HAVE_MESQUITE),yes)
   CONDITIONAL_LIBS := $(CONDITIONAL_LIBS) $(MESQUITE_LIBRARY)
endif

INCLUDES = @OTFL_INCLUDES@

SRCS = $(wildcard *.cc)
OTF_LIBS := $(patsubst %.cc,%.@SO_OR_A_FILE@, $(SRCS))

ifeq ($(NEED_SONAME),yes)
SONAMEFLAG = -Wl,-soname,$(notdir $@)
else
SONAMEFLAG = 
endif


# Avoid error message when no .d files by specifying nonexistant filename.
ifneq (@IS_WIN@,yes)
ifneq ($(MAKECMDGOALS),)
-include dummyfile $(MAKECMDGOALS:.@SO_OR_A_FILE@=.d)
else
-include dummyfile $(SRCS:.cc=.d)
endif
endif
.SECONDARY:

.PHONY: all
all: $(OTF_LIBS)

%.d: %.cc
ifeq ($(SCI_MAKE_BE_QUIET),true)
	@echo "Building .d file for: $<"
	@set -e; $(CXX) -M @OTFL_CFLAGS@ $(INCLUDES) $< \
          | sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
          [ -s $@ ] || rm -f $@
else
	set -e; $(CXX) -M @OTFL_CFLAGS@ $(INCLUDES) $< \
          | sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
          [ -s $@ ] || rm -f $@
endif

%.o : %.cc %.d
ifeq ($(SCI_MAKE_BE_QUIET),true)
	@echo "Compiling: $<"
	@rm -f $@ $(*).so $(*).dylib $(*).dll
	@$(CXX) -c @OTFL_CFLAGS@ $(INCLUDES) $< -o $@ 
else
	rm -f $@ $(*).so $(*).dylib $(*).dll
	$(CXX) -c @OTFL_CFLAGS@ $(INCLUDES) $< -o $@ 
endif

# don't create deps with ms yet
%.obj : %.cc
	rm -f $@ $(*).dll
	$(CXX) -c $(CXXFLAGS) @WIN_OTFFLAGS@ $(INCLUDES) $< -o $@ 

%.so : %.o 
ifeq ($(SCI_MAKE_BE_QUIET),true)
	@echo "Linking: $@"
	@$(CXX) @OTFL_CFLAGS@ $(LIBRARY) @SOFLAGS@ $< -o $@ $(LIBRPATH1) $(LIBS1) $(EXT_LIBS2_PARSED) $(EXT_LIBS1_PARSED) 
else
	$(CXX) @OTFL_CFLAGS@ $(LIBRARY) @SOFLAGS@ $< -o $@ $(LIBRPATH1) $(LIBS1) $(EXT_LIBS2_PARSED) $(EXT_LIBS1_PARSED)
endif

%.dylib : %.o 
ifeq ($(SCI_MAKE_BE_QUIET),true)
	@echo "Linking: $@"
	@$(CXX) @OTFL_CFLAGS@ $(LIBRARY) @SOFLAGS@ $< -o $@ -L$(LIBDIR1) $(LIBS1) $(EXT_LIBS2_PARSED) $(EXT_LIBS1_PARSED)
else
	$(CXX) @OTFL_CFLAGS@ $(LIBRARY) @SOFLAGS@ $< -o $@ -L$(LIBDIR1) $(LIBS1) $(EXT_LIBS2_PARSED) $(EXT_LIBS1_PARSED)
endif

%.dll : %.obj
ifeq ($(SCI_MAKE_BE_QUIET),true)
	@echo "Linking: $@"
	@$(CXX) $(CXXFLAGS) $(LIBRARY)  $< -o $@ @SOFLAGS@ -LIBPATH:$(LIBDIR1) $(patsubst -l%,lib%.lib, $(LIBS1))  
else
	$(CXX) $(CXXFLAGS) $(LIBRARY)  $< -o $@ @SOFLAGS@ -LIBPATH:$(LIBDIR1) $(patsubst -l%,lib%.lib, $(LIBS1))  
endif

clean::
	@rm -rf *.o *.d *.cc *.h *.dll *.dylib *.so *.log *~ ii_files
